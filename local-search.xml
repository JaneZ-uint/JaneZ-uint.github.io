<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Data-Structure4</title>
    <link href="/2025/02/07/Data-Structure4/"/>
    <url>/2025/02/07/Data-Structure4/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）"><a href="#Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）" class="headerlink" title="Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）"></a>Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）</h5><p><img src="/img/%E5%AD%94%E9%9B%80.png" alt="孔雀"></p><h2 id="Data-Structure-4-约瑟夫环-动态内存分配"><a href="#Data-Structure-4-约瑟夫环-动态内存分配" class="headerlink" title="Data Structure 4 约瑟夫环 动态内存分配"></a>Data Structure 4 约瑟夫环 动态内存分配</h2><h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>约瑟夫环是一个很经典的循环链表问题，初次见于OJ上一道经典的题——春樱对决（ ACMOJ1088 ）<br>下面给出约瑟夫环问题一个最简单的例子（报到3倍数击毙）</p><h4 id="构建循环链表"><a href="#构建循环链表" class="headerlink" title="构建循环链表"></a>构建循环链表</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">head</span> <span class="hljs-operator">=</span> p  new node(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>for(int i <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">; i &lt; n ; i ++)&#123;</span><br>    p <span class="hljs-operator">=</span> p -&gt; next <span class="hljs-operator">=</span> new node(i)<span class="hljs-comment">;</span><br>&#125;<br>p -&gt; next <span class="hljs-operator">=</span> head<span class="hljs-comment">; //首尾相连</span><br></code></pre></td></tr></table></figure><h4 id="删除结点（也就是击毙的操作）"><a href="#删除结点（也就是击毙的操作）" class="headerlink" title="删除结点（也就是击毙的操作）"></a>删除结点（也就是击毙的操作）</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">q = head;<br><span class="hljs-function"><span class="hljs-title">while</span>(q -&gt;</span> next != q)&#123;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = q -&gt;</span> next;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>    <span class="hljs-comment">//删除q</span><br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = q -&gt;</span> next;<br>    delete q;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><h4 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h4><ul><li>存储在内存中一个被称为<strong>堆</strong>的区域中，由一个堆管理器进行管理</li><li>new 操作时分配一块空间，delete 操作时回收一块空间<br>但是不断的 new delete 操作会导致内存空间的碎片化，应该如何管理这些内存片段呢？😢</li></ul><h4 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h4><ul><li>所有的空闲片段形成一个集合，按地址顺序排列就得到了线性表，故堆空间的管理实际上就是在<strong>维护一个线性表</strong></li><li>由于该线性表经常需要删除操作（就是 new ）,并且delete操作时可能需要把一些潜在的相邻的闲置空间进行合并，所以用双链表比较合适</li></ul><h4 id="模拟动态内存管理的memory类（感觉这种理解很有意思）"><a href="#模拟动态内存管理的memory类（感觉这种理解很有意思）" class="headerlink" title="模拟动态内存管理的memory类（感觉这种理解很有意思）"></a>模拟动态内存管理的memory类（感觉这种理解很有意思）</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">class memory&#123;<br>    struct <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">        int</span> <span class="hljs-literal">start</span>; //起始地址<br>        int end; //终止地址<br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*prev</span>; <br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*next</span>;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">(int</span> s, int e,<span class="hljs-keyword">node</span> <span class="hljs-title">*p</span> = nullptr,<span class="hljs-keyword">node</span> <span class="hljs-title">*n</span> = nullptr)&#123;<br>            <span class="hljs-literal">start</span> = s;<br>            end = e;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">()&#123;</span><br><span class="hljs-title">            prev</span> = nullptr;<br>            next = nullptr;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*head</span>;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*tail</span>;<br><br>    public:<br>        memory(int capacity);<br>        int malloc(int size); //申请一块大小为size的空间，返回起始地址<br>        void free(int <span class="hljs-literal">start</span>,int size); //释放从<span class="hljs-literal">start</span>开始、大小为size的空间<br>        ~memory();<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">memory::memory(int capacity)&#123;<br>   <span class="hljs-built_in"> head</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> = new <span class="hljs-type">node</span>(<span class="hljs-number">0</span> , capacity - <span class="hljs-number">1</span>,<span class="hljs-built_in"> head</span>);<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> -&gt; <span class="hljs-keyword">next</span> =<span class="hljs-built_in"> tail</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> tail</span> -&gt; prev =<span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span>;<br>&#125;<br><br>memory::~memory()&#123;<br>    <span class="hljs-type">node</span> *p =<span class="hljs-built_in"> head</span>;<br>    <span class="hljs-type">node</span> *q;<br>    while(p != nullpter)&#123;<br>        q = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">int malloc(int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    int returnValue;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> &lt; size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == tail)&#123;<br>        return -<span class="hljs-number">1</span>; <span class="hljs-comment">//没有找到</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">returnValue</span> = p -&gt;</span> start;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> == size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = p -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> = p -&gt;</span> prev;<br>        delete p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start += size;<br>    &#125;<br>    return returnValue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">void memory::free(int start, int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    node *np;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> start &lt; start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p != tail &amp;&amp; start + size == p -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start = start;<br>        np = p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">np</span> = new node(start , start + size - 1 ,p -&gt;</span> prev, p );<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> next = np;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> prev = np;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = np -&gt;</span> prev;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> + 1 == np -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = np -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> end == start + size - <span class="hljs-number">1</span>;<br>        delete np;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure3</title>
    <link href="/2025/02/07/Data-Structure3/"/>
    <url>/2025/02/07/Data-Structure3/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）"><a href="#Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）" class="headerlink" title="Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）"></a>Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）</h5><h2 id="Data-Structure-3-双链表-容器-迭代器"><a href="#Data-Structure-3-双链表-容器-迭代器" class="headerlink" title="Data Structure 3 双链表 容器 迭代器"></a>Data Structure 3 双链表 容器 迭代器</h2><p>在上一节中，我们非常详细地实现了一个单链表类（算是对上学期所学进行了一个复习），我个人认为，双链表与单链表并不存在多么显著的区别。所以本章节中关于双链表的部分会相对比较简洁。</p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>定义：（和单链表不同的地方）每个结点既保存直接后继结点的地址，也保存直接前驱结点的地址（单链表只保存直接后继结点的地址）</li><li>拥有直接前驱结点的地址实际上意味着双链表可以从后向前访问</li><li>双链表中既包含了一个头结点head ,还包含了一个尾结点tail；保存一个双链表事实上就是保存头尾两个结点的地址<br>下面是一个双链表类的定义：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *prev;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x ,node *p = <span class="hljs-literal">nullptr</span>, node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br>node *tail;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">dLinkList</span>();<br>    ~<span class="hljs-built_in">dLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>        <span class="hljs-keyword">delete</span> tail;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="容器与迭代器"><a href="#容器与迭代器" class="headerlink" title="容器与迭代器"></a>容器与迭代器</h3><ul><li>本质上我们所说的数据结构，就是在<strong>保存一组相互之间具有某种关系的数据元素</strong>。而C++把每个数据结构的实现称为<strong>一个容器</strong></li><li>在设计容器时，我们通常为每种容器定义一个相应的表示其中对象位置的类型，称作<strong>迭代器</strong>，相当于指向容器中对象的指针</li><li>设计一个迭代器包括2个部分:<br>(1) 如何标识容器中某一对象的位置<br>(2) 如何实现迭代器的操作</li><li>为了方便用户使用，STL将迭代器类（iterator , const_iterator）定义成相应容器类的公有内嵌类</li><li>注意：iterator类可通过迭代器修改指向元素的值，而const_iterator只可以通过迭代器读取指向元素的值</li></ul><h4 id="下面是一些迭代器自身的常见操作："><a href="#下面是一些迭代器自身的常见操作：" class="headerlink" title="下面是一些迭代器自身的常见操作："></a>下面是一些迭代器自身的常见操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="迭代器自身操作"></p><h4 id="这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现："><a href="#这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现：" class="headerlink" title="这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现："></a>这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">iterator</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        node* ptr;<br>    <span class="hljs-keyword">public</span>:<br>        iterator(node* p = nullptr) : ptr(p) &#123;&#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>            ptr = ptr-&gt;next;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>--() &#123;<br>            ptr = ptr-&gt;prev;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>++(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            ++(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>--(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            --(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> ptr-&gt;<span class="hljs-keyword">data</span>;<br>        &#125;<br><br>        T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> &amp;(ptr-&gt;<span class="hljs-keyword">data</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* A operator to check whether two iterators are same (pointing to the same memory) */</span><br>        friend bool <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>           <span class="hljs-keyword">return</span> (a.ptr == b.ptr);<br>        &#125;<br><br>        friend bool <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> (a.ptr != b.ptr);<br>        &#125;<br><br>        friend <span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="以线性表为例"><a href="#以线性表为例" class="headerlink" title="以线性表为例"></a>以线性表为例</h3><h4 id="下面是一些list类和vector类中的迭代器相关操作："><a href="#下面是一些list类和vector类中的迭代器相关操作：" class="headerlink" title="下面是一些list类和vector类中的迭代器相关操作："></a>下面是一些list类和vector类中的迭代器相关操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png" alt="迭代器相关操作"></p><h4 id="这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡："><a href="#这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡：" class="headerlink" title="这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡："></a>这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡：</h4><p>注：其实存在一些问题（ 因为我的实现并没有考虑模板类型T 不具有默认构造函数的情况 😢 ）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* Return an iterator pointing to the first element. */</span><br>iterator <span class="hljs-built_in">begin</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(head-&gt;next);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cbegin</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(head-&gt;next);<br>&#125;<br><br><span class="hljs-comment">/* Return an iterator pointing to one past the last element. */</span><br>iterator <span class="hljs-built_in">end</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(tail);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cend</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(tail);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">iterator</span> insert(<span class="hljs-keyword">iterator</span> pos, <span class="hljs-keyword">const</span> T&amp; value) &#123;<br>    node* n = new node(value, pos.<span class="hljs-keyword">ptr</span>-&gt;prev, pos.<span class="hljs-keyword">ptr</span>);<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev-&gt;next = n;<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev = n;<br>    ++ currentLength;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">iterator</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">iterator erase(iterator pos) noexcept &#123;<br>    <span class="hljs-keyword">if</span> (pos == end()) &#123;<br>        return end();<br>    &#125;<br>    node* tmp = pos.ptr;<br>    <span class="hljs-function"><span class="hljs-title">iterator</span> it(tmp-&gt;</span>next);<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = tmp-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span> = tmp-&gt;</span>prev;<br>    delete tmp;<br>    -- currentLength;<br>    return it;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis2</title>
    <link href="/2025/02/05/Maths-Analysis2/"/>
    <url>/2025/02/05/Maths-Analysis2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-好的，又来水文章了。今天要讲的是："><a href="#Before-好的，又来水文章了。今天要讲的是：" class="headerlink" title="Before: 好的，又来水文章了。今天要讲的是："></a>Before: 好的，又来水文章了。今天要讲的是：</h5><h2 id="Maths-Analysis-2-一致收敛判别法"><a href="#Maths-Analysis-2-一致收敛判别法" class="headerlink" title="Maths Analysis 2 一致收敛判别法"></a>Maths Analysis 2 一致收敛判别法</h2><h3 id="第一种：比较判别法"><a href="#第一种：比较判别法" class="headerlink" title="第一种：比较判别法"></a>第一种：比较判别法</h3><p><img src="/img/%E6%AF%94%E8%BE%83%E5%88%A4%E5%88%AB.png" alt="比较判别法"></p><h3 id="第二种：Dirichlet判别法"><a href="#第二种：Dirichlet判别法" class="headerlink" title="第二种：Dirichlet判别法"></a>第二种：Dirichlet判别法</h3><p><img src="/img/%E8%BF%AA%E5%88%A9%E5%85%8B%E9%9B%B7%E5%88%A4%E5%88%AB.png" alt="Dirichlet判别法"></p><h3 id="第三种：Abel判别法"><a href="#第三种：Abel判别法" class="headerlink" title="第三种：Abel判别法"></a>第三种：Abel判别法</h3><p><img src="/img/%E9%98%BF%E8%B4%9D%E5%B0%94%E5%88%A4%E5%88%AB.png" alt="Abel判别法"></p><h3 id="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"><a href="#总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些" class="headerlink" title="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"></a>总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些</h3><ul><li>收敛 &lt;-&gt; 一致收敛</li><li>有界 &lt;-&gt; 一致有界</li><li>其实今天仔细一想，对于函数列的问题，好像就应该讨论一致收敛而不是普通的收敛。主要是我觉得吧，普通收敛引入了一个很麻烦的x 😅😅😅</li></ul>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic1</title>
    <link href="/2025/02/03/Java-Basic1/"/>
    <url>/2025/02/03/Java-Basic1/</url>
    
    <content type="html"><![CDATA[<h5 id="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"><a href="#JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）" class="headerlink" title="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"></a>JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）</h5><h4 id="Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java"><a href="#Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java" class="headerlink" title="Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java"></a>Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java</h4><h2 id="Java-Basic-1"><a href="#Java-Basic-1" class="headerlink" title="Java Basic 1"></a>Java Basic 1</h2><h3 id="Compiling-Java"><a href="#Compiling-Java" class="headerlink" title="Compiling Java"></a>Compiling Java</h3><p>Source Code(.java) -&gt; javac -&gt; Byte Code -&gt; java</p><h3 id="Java版的Hello-world"><a href="#Java版的Hello-world" class="headerlink" title="Java版的Hello world"></a>Java版的Hello world</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] <span class="hljs-variable language_">arguments</span></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>,<span class="hljs-title function_">printIn</span>(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Program-Structure"><a href="#Program-Structure" class="headerlink" title="Program Structure"></a>Program Structure</h3><p>class <strong>CLASSNAME</strong>{<br>    public static void main(String[] arguments){<br>        <strong>STATEMENTS</strong><br>    }<br>}</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>System.out.printIn(some String)<br>Example:</p><ul><li>System.output.printIn(“output”);</li><li>Console: output</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>boolean 相当于C&#x2F;C++中的bool<br>int 相当于C&#x2F;C++中的int<br>double 相当于C&#x2F;C++中的double<br>String 相当于C&#x2F;C++中的string<br><strong>注意：Java要求数据类型必须正确匹配</strong><br>如：String five &#x3D; 5; &#x2F;&#x2F; ERROR</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Form:<br>Type Name;</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>使用 &#x3D;  与C&#x2F;C++相同<br>Example:<br>String foo;<br>foo &#x3D; “IAP 6.092”;<br>double badPi &#x3D; 3.14;</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>与C&#x2F;C++完全一致<br>&#x3D; + - * &#x2F;(整数进行&#x2F;时同样是向下取整)<br><strong>注意： double b &#x3D; 5&#x2F;2; &#x2F;&#x2F; b &#x3D; 2.0</strong><br>优先级：括号 &gt; 乘除法 &gt; 加减法<br>也支持 +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; 等复合运算符</p><h3 id="字符串加法"><a href="#字符串加法" class="headerlink" title="字符串加法"></a>字符串加法</h3><p>String text &#x3D; “hello” + “world”;<br>text &#x3D; text + “number” + 5;<br>&#x2F;&#x2F; text &#x3D; “helloworldnumber5”;</p><h3 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h3><ul><li>强制类型转换 ： int a &#x3D; (int)18.7;</li><li>隐式类型转换 ：double a &#x3D; 2;&#x2F;&#x2F;2.0</li></ul><h3 id="Java的函数——Method"><a href="#Java的函数——Method" class="headerlink" title="Java的函数——Method"></a>Java的函数——Method</h3><p>Example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：NAME();</p><h4 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">NewLine</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newLine</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threeLines</span>()</span>&#123;<br>        newLine();<br>        newLine();<br>        newLine();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] arguments</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 1&quot;</span>);<br>        threeLines();<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数参数Parameter"><a href="#函数参数Parameter" class="headerlink" title="函数参数Parameter"></a>函数参数Parameter</h4><p>Example:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>调用：<br>NAME(EXPRESSION);<br>Another Example:<br>多个参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>,<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Return-Values-返回值"><a href="#Return-Values-返回值" class="headerlink" title="Return Values 返回值"></a>Return Values 返回值</h4><p>Example：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TYPE <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>    <span class="hljs-keyword">return</span> EXPRESSION;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IF-ELSE语句"><a href="#IF-ELSE语句" class="headerlink" title="IF ELSE语句"></a>IF ELSE语句</h3><p>Example:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(CONDITION)</span></span>&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(CONDITION)&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>x &gt; y  x &lt; y  x &gt;&#x3D; y x &lt;&#x3D; y  x&#x3D;&#x3D; y</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>&amp;&amp; ||</p>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis1</title>
    <link href="/2025/02/02/Maths-Analysis1/"/>
    <url>/2025/02/02/Maths-Analysis1/</url>
    
    <content type="html"><![CDATA[<h5 id="好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣"><a href="#好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣" class="headerlink" title="好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣"></a>好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣</h5><h2 id="Maths-Analysis-1-函数列与一致收敛性"><a href="#Maths-Analysis-1-函数列与一致收敛性" class="headerlink" title="Maths Analysis 1  函数列与一致收敛性"></a>Maths Analysis 1  函数列与一致收敛性</h2><h3 id="首先，给出函数列定义！"><a href="#首先，给出函数列定义！" class="headerlink" title="首先，给出函数列定义！"></a>首先，给出函数列定义！</h3><p>！<a href="/img/%E5%87%BD%E6%95%B0%E5%88%97%E5%AE%9A%E4%B9%89.png">函数列定义</a></p><h4 id="是不是很简单？让我们来看一个例子——经典-x-n"><a href="#是不是很简单？让我们来看一个例子——经典-x-n" class="headerlink" title="是不是很简单？让我们来看一个例子——经典 $x^n$"></a>是不是很简单？让我们来看一个例子——经典 $x^n$</h4><p>！<a href="/img/%E5%87%BD%E6%95%B0%E5%88%97%E4%BE%8B%E5%AD%90.png">函数列例子</a></p><h3 id="接着隆重推出：《一致收敛》"><a href="#接着隆重推出：《一致收敛》" class="headerlink" title="接着隆重推出：《一致收敛》"></a>接着隆重推出：《一致收敛》</h3><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E4%B9%89.png">一致收敛定义</a></p><h4 id="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"><a href="#看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白" class="headerlink" title="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"></a>看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白</h4><h4 id="哦菜菜鼠鼠似乎明白了些什么"><a href="#哦菜菜鼠鼠似乎明白了些什么" class="headerlink" title="哦菜菜鼠鼠似乎明白了些什么"></a>哦菜菜鼠鼠似乎明白了些什么</h4><h3 id="函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）"><a href="#函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）" class="headerlink" title="函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）"></a>函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）</h3><h4 id="接下来从几何上看看一致收敛"><a href="#接下来从几何上看看一致收敛" class="headerlink" title="接下来从几何上看看一致收敛"></a>接下来从几何上看看一致收敛</h4><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89.png">一致收敛几何意义</a></p><h3 id="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"><a href="#将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上" class="headerlink" title="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"></a>将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上</h3><p>！<a href="/img/%E6%9F%AF%E8%A5%BF%E6%94%B6%E6%95%9B%E5%87%86%E5%88%99.png">柯西收敛准则</a></p><h4 id="证明还是很简单的"><a href="#证明还是很简单的" class="headerlink" title="证明还是很简单的"></a>证明还是很简单的</h4><h3 id="接下来看一个和上确界相关的定理及推论吧"><a href="#接下来看一个和上确界相关的定理及推论吧" class="headerlink" title="接下来看一个和上确界相关的定理及推论吧"></a>接下来看一个和上确界相关的定理及推论吧</h3><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E5%8F%8A%E6%8E%A8%E8%AE%BA.png">一致收敛定理及推论</a></p><h4 id="And-An-Example"><a href="#And-An-Example" class="headerlink" title="And An Example~"></a>And An Example~</h4><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E4%BE%8B%E5%AD%90.png">一致收敛定理例子</a></p><h5 id="JaneZ要做回数分皇帝😎😎😎（口嗨中）"><a href="#JaneZ要做回数分皇帝😎😎😎（口嗨中）" class="headerlink" title="JaneZ要做回数分皇帝😎😎😎（口嗨中）"></a>JaneZ要做回数分皇帝😎😎😎（口嗨中）</h5>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure2</title>
    <link href="/2025/02/01/Data-Structure2/"/>
    <url>/2025/02/01/Data-Structure2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）"><a href="#Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）" class="headerlink" title="Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）"></a>Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）</h5><h2 id="Data-Structure-2-链表-LinkList"><a href="#Data-Structure-2-链表-LinkList" class="headerlink" title="Data Structure 2 链表 LinkList"></a>Data Structure 2 链表 LinkList</h2><h3 id="线性链表的链接存储"><a href="#线性链表的链接存储" class="headerlink" title="线性链表的链接存储"></a>线性链表的链接存储</h3><ul><li>链接存储通过让每个结点保存与它有关系的结点的地址来保存结点之间的关系</li><li>线性表的链接存储是指将每个数据元素存放在一个独立的数据存储单元（结点）中</li><li>链表不需要事先准备空间，一般采用动态存储的方法</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li>每个结点存储一个数据元素和一个后继指针<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="单链表"></li><li>为防止忘记处理特殊情况，可以引入一个不存放数据的特殊结点——头结点（一种优化）<br><img src="/img/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="带头结点单链表"></li></ul><h4 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">sLinkList</span>();<br>    ~<span class="hljs-built_in">sLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="单链表的运算实现"><a href="#单链表的运算实现" class="headerlink" title="单链表的运算实现"></a>单链表的运算实现</h4><ul><li>私有成员函数move的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">node</span> *<span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">move</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head;<br>    <span class="hljs-keyword">while</span>( i -- &gt;= <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表构造函数<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">sLinkList</span>()</span>&#123;<br>    head = new node;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表清空函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B8%85%E7%A9%BA.png" alt="单链表清空操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">clear</span>()</span>&#123;<br>    node *p = head-&gt;<span class="hljs-keyword">next</span>;<br>    node *<span class="hljs-keyword">q</span>;<br>    head -&gt; <span class="hljs-keyword">next</span> = nullptr;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = <span class="hljs-keyword">q</span>;<br>    &#125;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表插入删除函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表删除操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">insert</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span> ,<span class="hljs-title">const</span> <span class="hljs-title">elemType</span> &amp;<span class="hljs-title">x</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = new node(<span class="hljs-keyword">x</span> ,<span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>);<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">remove</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    node *delp;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    delp = <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = delp -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">delete</span> delp;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表search visit traverse函数的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head -&gt; next;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>ptr &amp;&amp; p -&gt; data != x)&#123;<br>        p = p -&gt; next;<br>        ++ i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> move(i) -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">traverse</span>() <span class="hljs-title">const</span></span>&#123;<br>    node *p = head -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        cout &lt;&lt; p -&gt; data &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        p = p -&gt; <span class="hljs-keyword">next</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="JaneZ发烧了，各位注意身体啊"><a href="#JaneZ发烧了，各位注意身体啊" class="headerlink" title="JaneZ发烧了，各位注意身体啊!"></a>JaneZ发烧了，各位注意身体啊!</h5>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Structure1</title>
    <link href="/2025/01/29/Data-Structure1/"/>
    <url>/2025/01/29/Data-Structure1/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！"><a href="#Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！" class="headerlink" title="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！"></a>Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！</h5><h2 id="Data-Structure-1-线性表List"><a href="#Data-Structure-1-线性表List" class="headerlink" title="Data Structure 1 线性表List"></a>Data Structure 1 线性表List</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><ul><li>线性结构的定义：所有结点按一对一的邻接关系构成的整体就是线性结构</li><li>线性表是处理线性结构的数据结构</li><li>线性表中数据元素的个数称为线性表的长度</li></ul><h4 id="线性表的基本运算："><a href="#线性表的基本运算：" class="headerlink" title="线性表的基本运算："></a>线性表的基本运算：</h4><ul><li>创建空线性表 create</li><li>删除线性表中所有数据元素 clear</li><li>求长度 length</li><li>插入元素 insert</li><li>删除元素 remove</li><li>搜索元素 search</li><li>返回特定位置元素值 visit</li><li>按序访问每一数据元素 traverse</li></ul><h4 id="线性表的抽象类"><a href="#线性表的抽象类" class="headerlink" title="线性表的抽象类"></a>线性表的抽象类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span> ; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span> <span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp;x)</span><span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">list</span>()&#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="线性表的顺序实现"><a href="#线性表的顺序实现" class="headerlink" title="线性表的顺序实现"></a>线性表的顺序实现</h3><ul><li>将线性表的数据元素存储在一块连续的空间里，用存储位置反映数据元素间的关系<br><img src="/img/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="顺序表存储结构"></li></ul><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><ul><li>从线性表的抽象类list公有派生<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><br>    <span class="hljs-keyword">private</span>:<br><br>        elemType *data;<br>        <span class="hljs-type">int</span> currentLength;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">public</span>:<br><br>        <span class="hljs-built_in">seqList</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqList</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">seqList</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">initsize</span>)&#123;<br>    data = new elemType[initsize];<br>    maxsize = initsize;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">seqList</span>()</span>&#123;<br>    <span class="hljs-keyword">delete</span> []data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">clear</span>()&#123;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br>(是个伪清除)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">length</span>()&#123;<br>    <span class="hljs-keyword">return</span> currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span>&amp;<span class="hljs-symbol">x</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; currentLength &amp;&amp; data[i] != x; i ++);<br>    <span class="hljs-keyword">if</span>(i == currentLength)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> i; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">traverse</span>()<span class="hljs-symbol">const</span>&#123;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        cout &lt;&lt; data[i]&lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单独讨论插入删除函数"><a href="#单独讨论插入删除函数" class="headerlink" title="单独讨论插入删除函数"></a>单独讨论插入删除函数</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">doubleSpace</span>()&#123;<br>    elemType *tmp = data;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    data = new elemType[maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        data[i] = tmp[i];<br>    &#125;<br>    delete []tmp;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i,<span class="hljs-symbol">const</span></span> <span class="hljs-symbol">elemType</span>&amp; <span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(currentLength == maxSize)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = currentLength; j &gt; i ; j --)&#123;<br>        data[j] = data[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    data[i] = x;<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = i;j &lt; currentLength - <span class="hljs-number">1</span>; j ++)&#123;<br>        data[j] = data[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Before Everything</title>
    <link href="/2025/01/21/Before-Everything/"/>
    <url>/2025/01/21/Before-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="Before-Everything"><a href="#Before-Everything" class="headerlink" title="Before Everything"></a>Before Everything</h1><h5 id="JaneZ-2025-1-21-M-Stand-Coffee-Nanjing-City"><a href="#JaneZ-2025-1-21-M-Stand-Coffee-Nanjing-City" class="headerlink" title="JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City"></a>JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City</h5><p>Well, hello world ! This is the owner of this crazy blog ! My name is JaneZ , a student from Shanghai Jiaotong University .<br>I major in <strong>Computer Science</strong> . I ‘m totally an E man , so I really want to know more people with the same interests.<br><strong>Why I start this blog ?</strong><br>Well , partly motivated by my high school classmate YXY , who major in <strong>Artificial Intelligence</strong> also in SJTU .<br>I think it’s mainly because that after a whole semester learning in the ACM class , I didn’t actually adapt to university life that well .<br>So I hope to be more proactive in my learning through this blog.<br>Any way , let’s get started.<br>Attach a picture of this wonderful coffee shop !<br><img src="/img/MStandCoffee.png" alt="M Stand Coffee"><br>Can’t live without coffee …</p>]]></content>
    
    
    
    <tags>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
