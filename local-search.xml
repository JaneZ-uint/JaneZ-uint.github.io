<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Data-Structure11</title>
    <link href="/2025/02/25/Data-Structure11/"/>
    <url>/2025/02/25/Data-Structure11/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：全世界都在偶遇她，只有我没机会嘛😥"><a href="#Before：全世界都在偶遇她，只有我没机会嘛😥" class="headerlink" title="Before：全世界都在偶遇她，只有我没机会嘛😥"></a>Before：全世界都在偶遇她，只有我没机会嘛😥</h5><h1 id="Data-Structure-11-二叉链表遍历的非递归实现及二叉树的应用"><a href="#Data-Structure-11-二叉链表遍历的非递归实现及二叉树的应用" class="headerlink" title="Data Structure 11 二叉链表遍历的非递归实现及二叉树的应用"></a>Data Structure 11 二叉链表遍历的非递归实现及二叉树的应用</h1><h2 id="二叉链表遍历的非递归实现"><a href="#二叉链表遍历的非递归实现" class="headerlink" title="二叉链表遍历的非递归实现"></a>二叉链表遍历的非递归实现</h2><p>上一节翁阿姨的课上，我们讲到了通过栈对函数实现非递归调用，而今天所说的二叉链表遍历的非递归实现，同样也是依靠链接栈这一数据结构实现的。实现时需要注意进栈顺序的细节，下面给出代码实现。</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xl">template &lt;class T&gt;<br>void binaryTree&lt;T&gt;::preOrder() const&#123;<br>    linkStack&lt;Node *&gt; s;<br>    s.push(root);<br>    <span class="hljs-keyword">while</span>(!s.isEmpty())&#123;<br>        Node *tmp = s.pop();<br>        <span class="hljs-function"><span class="hljs-title">cout</span> &lt;&lt; tmp -&gt;</span> <span class="hljs-keyword">data</span>;<br><br>        <span class="hljs-function"><span class="hljs-title">if</span>(tmp -&gt;</span> left != nullptr)&#123;<br>            <span class="hljs-function"><span class="hljs-title">s</span>.push(tmp -&gt;</span> left);<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(tmp -&gt;</span> right != nullptr)&#123;<br>            <span class="hljs-function"><span class="hljs-title">s</span>.push(tmp -&gt;</span> right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>而中序遍历在实现时则有一些不同，因为中序遍历要求<strong>先访问左子树</strong>，再访问根结点，最后访问<strong>右子树</strong>，所以在根结点出栈后不能先访问它，而将其暂存，先访问<strong>左子树</strong>，再访问它。为了解决这一问题，我们重新更换一种结点，记录结点进栈的次数。</p><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs abnf">struct StNode&#123;<br>    Node *node<span class="hljs-comment">;</span><br>    int timePop<span class="hljs-comment">;</span><br>    StNode(Node *n <span class="hljs-operator">=</span> nullptr)&#123;<br>        node <span class="hljs-operator">=</span> n<span class="hljs-comment">;</span><br>        timePop <span class="hljs-operator">=</span> <span class="hljs-number">0</span><span class="hljs-comment">;</span><br>    &#125;<span class="hljs-comment">;</span><br>&#125;<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nsis">template &lt;class T&gt;<br>void binaryTree&lt;T&gt;::midOrder() const&#123;<br>    linkStack&lt;StNode&gt; s<span class="hljs-comment">;</span><br>    StNode <span class="hljs-literal">current</span>(root)<span class="hljs-comment">;</span><br><br>    while(!s.isEmpty())&#123;<br>        <span class="hljs-literal">current</span> = s.<span class="hljs-keyword">pop</span>()<span class="hljs-comment">;</span><br>        ++ <span class="hljs-literal">current</span>.timePop<span class="hljs-comment">;</span><br>        if(<span class="hljs-literal">current</span>.timePop == <span class="hljs-number">2</span>)&#123;<br>            // 出栈<span class="hljs-number">2</span>次了<br>            cout &lt;&lt; <span class="hljs-literal">current</span>.node -&gt; data &lt;&lt; endl<span class="hljs-comment">;</span><br>            if(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">right</span> != nullptr)&#123;<br>                <span class="hljs-literal">current</span>.<span class="hljs-keyword">push</span>(StNode n(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">right</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;else&#123;<br>            // 重新被推回栈中<br>            s.<span class="hljs-keyword">push</span>(<span class="hljs-literal">current</span>)<span class="hljs-comment">;</span><br>            if(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">left</span> != nullptr)&#123;<br>                <span class="hljs-literal">current</span>.<span class="hljs-keyword">push</span>(StNode n(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">left</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是后序遍历，与中序遍历实现方法类似，但只有在第三次出栈时才会被访问</p><figure class="highlight nsis"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs nsis">template &lt;class T&gt;<br>void binaryTree&lt;T&gt;::postOrder() const&#123;<br>    linkStack&lt;StNode&gt; s<span class="hljs-comment">;</span><br>    StNode <span class="hljs-literal">current</span>(root)<span class="hljs-comment">;</span><br><br>    while(!s.isEmpty())&#123;<br>        <span class="hljs-literal">current</span> = s.<span class="hljs-keyword">pop</span>()<span class="hljs-comment">;</span><br>        ++ <span class="hljs-literal">current</span>.timePop<span class="hljs-comment">;</span><br><br>        if(<span class="hljs-literal">current</span>.timePop == <span class="hljs-number">3</span>)&#123;<br>            cout &lt;&lt; <span class="hljs-literal">current</span>.node -&gt; data &lt;&lt; endl<span class="hljs-comment">;</span><br>        &#125;else if(<span class="hljs-literal">current</span>.timePop == <span class="hljs-number">2</span>)&#123;<br>            s.<span class="hljs-keyword">push</span>(<span class="hljs-literal">current</span>)<span class="hljs-comment">;</span><br>            if(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">right</span> != nullptr)&#123;<br>                s.<span class="hljs-keyword">push</span>(StNode n(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">right</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;else if(<span class="hljs-literal">current</span>.timePop == <span class="hljs-number">1</span>)&#123;<br>            s.<span class="hljs-keyword">push</span>(<span class="hljs-literal">current</span>)<span class="hljs-comment">;</span><br>            if(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">left</span> != nullptr)&#123;<br>                s.<span class="hljs-keyword">push</span>(StNode n(<span class="hljs-literal">current</span>.node -&gt; <span class="hljs-literal">left</span>))<span class="hljs-comment">;</span><br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="二叉树的应用——计算表达式"><a href="#二叉树的应用——计算表达式" class="headerlink" title="二叉树的应用——计算表达式"></a>二叉树的应用——计算表达式</h2><p>由于算术运算符是二元运算符，故可以很自然地表示成一棵二叉树，根结点表示运算符，左右孩子是运算数，这棵树被称为<strong>表达式树</strong>，既然如此，我们知道对这棵树的遍历是<strong>后序遍历</strong><br>下面就是一棵表达式树：<br><img src="/img/%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%A0%91.png" alt="表达式树"></p><p>所描述的表达式为：**(4 - 2)<em>(10 + (4 + 6)&#x2F;2) + 2</em>*</p><p>这个逻辑构造似乎还是比较好理解的，所以，我们就直接来看看如何建树吧。</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">class calc&#123;<br>    enum <span class="hljs-keyword">Type</span>&#123;DATA,ADD,SUB,MULTI,DIV,OPAREN,CPAREN,EOL&#125;;<br><br>    struct <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">        Type</span> <span class="hljs-keyword">type</span>;<br>        int data;<br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*lchild</span>,rchild;<br><br>        <span class="hljs-keyword">node</span><span class="hljs-title">(Type</span> t,int d = <span class="hljs-number">0</span>,<span class="hljs-keyword">node</span> <span class="hljs-title">*lc</span> = nullptr,<span class="hljs-keyword">node</span> <span class="hljs-title">*rc</span> = nullptr)&#123;<br>            <span class="hljs-keyword">type</span> = t;<br>            data = d;<br>            lchild = lc;<br>            rchild = rc;<br>        &#125;<br>    &#125;;<br><br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*root</span>;<br><br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*create</span>(char *&amp;s); //创建一棵表达式树<br>    <span class="hljs-keyword">Type</span> getToken(char *&amp;s,int &amp;value); // 获得一个切片<br>    int result(<span class="hljs-keyword">node</span> <span class="hljs-title">*t</span>); //计算表达式结果<br><br>    public:<br>        calc(char *s)&#123;<br>            root = create(s);<br>        &#125;<br><br>        int result()&#123;<br>            if(root == nullptr)&#123;<br>                return <span class="hljs-number">0</span>;<br>            &#125;<br>            return result(root);<br>        &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>create函数的实现</p><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs xquery">calc::node *calc::create(char *&amp;s)&#123;<br>    calc::node *p,<span class="hljs-built_in">*root</span> = nullptr;<br>    Type returnType;<br>    int <span class="hljs-keyword">value</span>;<br><br>    while(*s)&#123;<br>        returnType = calc::getToken(s,<span class="hljs-keyword">value</span>);<br><br>        <span class="hljs-keyword">switch</span>(returnType)&#123;<br>            <span class="hljs-keyword">case</span> DATA:case OPAREN:<br>                <span class="hljs-keyword">if</span>(returnType == DATA)&#123;<br>                    <span class="hljs-type">node</span> *p = new <span class="hljs-type">node</span>(DATA,<span class="hljs-keyword">value</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    p = create(s);<br>                &#125;<br>                <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span> != nullptr)&#123;<br>                    <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span> -&gt; rchild == nullptr)&#123;<br>                       <span class="hljs-built_in"> root</span> -&gt; rchild = p;<br>                    &#125;<span class="hljs-keyword">else</span>&#123;<br>                       <span class="hljs-built_in"> root</span> -&gt; rchild -&gt; rchild = p;<br>                    &#125;<br>                &#125;<br>                break;<br>            <span class="hljs-keyword">case</span> ADD: <span class="hljs-keyword">case</span> SUB:<br>                <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span> == nullptr)&#123;<br>                   <span class="hljs-built_in"> root</span> = new <span class="hljs-type">node</span>(returnType,<span class="hljs-number">0</span>,p);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-built_in"> root</span> = new <span class="hljs-type">node</span>(returnType,<span class="hljs-number">0</span><span class="hljs-built_in">,root</span>);<br>                &#125;<br>                break;<br>            <span class="hljs-keyword">case</span> MULTI: <span class="hljs-keyword">case</span> DIV:<br>                <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span> == nullptr)&#123;<br>                   <span class="hljs-built_in"> root</span> = new <span class="hljs-type">node</span>(returnType,<span class="hljs-number">0</span>,p);<br>                &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span><span class="hljs-built_in">(root</span> -&gt; type == MULTI ||<span class="hljs-built_in"> root</span> -&gt; type == DIV)&#123;<br>                   <span class="hljs-built_in"> root</span> = new <span class="hljs-type">node</span>(returnType,<span class="hljs-number">0</span><span class="hljs-built_in">,root</span>);<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                   <span class="hljs-built_in"> root</span> -&gt; rchild = new <span class="hljs-type">node</span>(returnType,<span class="hljs-number">0</span><span class="hljs-built_in">,root</span> -&gt; rchild);<br>                &#125;<br>                break;<br>            <span class="hljs-keyword">case</span> CPAREN: caseEOL:<br>                <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span><span class="hljs-built_in"> root</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>getToken 函数与先前在Bookstore-2024中写的TokenScanner类类似，故不描述了（好懒啊😅）</p><p>另一个比较有趣的函数——result</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">int calc::result(calc::node *t)&#123;<br>    int num1,num2;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(t -&gt;</span> type == DATA)&#123;<br>        <span class="hljs-function"><span class="hljs-title">return</span> t -&gt;</span> <span class="hljs-keyword">data</span>;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">num1</span> = calc(t -&gt;</span> lchild);<br>    <span class="hljs-function"><span class="hljs-title">num2</span> = calc(t -&gt;</span> rchild);<br>    <span class="hljs-function"><span class="hljs-title">if</span>(t -&gt;</span> type == ADD)&#123;<br>        <span class="hljs-function"><span class="hljs-title">t</span> -&gt;</span> <span class="hljs-keyword">data</span> = num1 + num2;<br>        return num1 + num2;<br>    &#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(t -&gt;</span> type == SUB)&#123;<br>        <span class="hljs-function"><span class="hljs-title">t</span> -&gt;</span> <span class="hljs-keyword">data</span> = num1 - num2;<br>        return num1 - num2;<br>    &#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(t -&gt;</span> type == MULTI)&#123;<br>        <span class="hljs-function"><span class="hljs-title">t</span> -&gt;</span> <span class="hljs-keyword">data</span> = num1 * num2;<br>        return num1 * num2;<br>    &#125;<span class="hljs-function"><span class="hljs-title">else</span> <span class="hljs-keyword">if</span>(t -&gt;</span> type == DIV)&#123;<br>        <span class="hljs-function"><span class="hljs-title">t</span> -&gt;</span> <span class="hljs-keyword">data</span> = num1 / num2;<br>        return num1 / num2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h2><p>这两天一直在写二叉树，总结一下，真是对<strong>递归</strong>很巧妙的应用呢！<br>下面就是<strong>Huffman Tree</strong>了，离priority_queue越来越近了😝</p>]]></content>
    
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Tree</tag>
      
      <tag>Binary Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure10</title>
    <link href="/2025/02/24/Data-Structure10/"/>
    <url>/2025/02/24/Data-Structure10/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：接Data-Structure-9，继续二叉链表…"><a href="#Before：接Data-Structure-9，继续二叉链表…" class="headerlink" title="Before：接Data Structure 9，继续二叉链表…"></a>Before：接Data Structure 9，继续二叉链表…</h5><h5 id="PS-Today-is-a-happy-day-for-Jane-maybe-you-can-guess-why"><a href="#PS-Today-is-a-happy-day-for-Jane-maybe-you-can-guess-why" class="headerlink" title="PS: Today is a happy day for Jane,maybe you can guess why?"></a>PS: Today is a happy day for Jane,maybe you can guess why?</h5><h1 id="Data-Structure-10-二叉链表"><a href="#Data-Structure-10-二叉链表" class="headerlink" title="Data Structure 10 二叉链表"></a>Data Structure 10 二叉链表</h1><h2 id="二叉链表类定义"><a href="#二叉链表类定义" class="headerlink" title="二叉链表类定义"></a>二叉链表类定义</h2><p>首先，回顾一下《C++程序设计思想与方法》，<strong>友元函数（friend function）</strong>是一个特殊的函数，它可以访问类的私有（private）和保护（protected）成员，即使它不是该类的成员函数。</p><p>下面给出定义：</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-title">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-type">T</span>&gt;<br><span class="hljs-class"><span class="hljs-keyword">class</span> binaryTree:public bTree&lt;<span class="hljs-type">T</span>&gt;&#123;</span><br><span class="hljs-class">    friend void printTree(<span class="hljs-title">const</span> <span class="hljs-title">binaryTree</span>&lt;<span class="hljs-type">T</span>&gt; &amp;<span class="hljs-title">t</span>,<span class="hljs-type">T</span> <span class="hljs-title">flag</span>);</span><br><span class="hljs-class">private:</span><br><span class="hljs-class">    struct <span class="hljs-type">Node</span>&#123;</span><br><span class="hljs-class">        <span class="hljs-type">Node</span> *left,right;</span><br><span class="hljs-class">        <span class="hljs-type">T</span> data;</span><br><span class="hljs-class"></span><br><span class="hljs-class">        <span class="hljs-type">Node</span>():left(<span class="hljs-title">nullptr</span>),right(<span class="hljs-title">nullptr</span>)&#123;&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">        <span class="hljs-type">Node</span>(<span class="hljs-type">T</span> <span class="hljs-title">data</span>,<span class="hljs-type">Node</span> *<span class="hljs-title">l</span> = <span class="hljs-title">nullptr</span>,<span class="hljs-type">Node</span> *<span class="hljs-title">r</span> == <span class="hljs-title">nullptr</span>)&#123;</span><br><span class="hljs-class">            left = l;</span><br><span class="hljs-class">            right = r;</span><br><span class="hljs-class">            data = <span class="hljs-type">Data</span>;</span><br><span class="hljs-class">        &#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">        ~<span class="hljs-type">Node</span>()&#123;&#125;</span><br><span class="hljs-class">    &#125;;</span><br><span class="hljs-class"></span><br><span class="hljs-class">    <span class="hljs-type">Node</span> *root; // 二叉树根结点</span><br><span class="hljs-class">public:</span><br><span class="hljs-class">    binaryTree():root(<span class="hljs-title">nullptr</span>)&#123;&#125;</span><br><span class="hljs-class">    binaryTree(<span class="hljs-type">T</span> <span class="hljs-title">x</span>):root(<span class="hljs-title">new</span> <span class="hljs-type">Node(x)</span>)&#123;&#125;</span><br><span class="hljs-class">    ~binaryTree();</span><br><span class="hljs-class"></span><br><span class="hljs-class">    void clear();</span><br><span class="hljs-class">    bool isEmpty() const;</span><br><span class="hljs-class">    <span class="hljs-type">T</span> <span class="hljs-type">Root</span>(<span class="hljs-type">T</span> <span class="hljs-title">flag</span>) const;</span><br><span class="hljs-class">    <span class="hljs-type">T</span> lChild(<span class="hljs-type">T</span> <span class="hljs-title">x</span>,<span class="hljs-type">T</span> <span class="hljs-title">flag</span>) const;</span><br><span class="hljs-class">    <span class="hljs-type">T</span> rChild(<span class="hljs-type">T</span> <span class="hljs-title">x</span>,<span class="hljs-type">T</span> <span class="hljs-title">flag</span>) const;</span><br><span class="hljs-class">    void delLeft(<span class="hljs-type">T</span> <span class="hljs-title">x</span>);</span><br><span class="hljs-class">    void delRight(<span class="hljs-type">T</span> <span class="hljs-title">x</span>);</span><br><span class="hljs-class">    void preOrder() const;</span><br><span class="hljs-class">    void midOrder() const;</span><br><span class="hljs-class">    void postOrder() const;</span><br><span class="hljs-class">    void levelOrder() const;</span><br><span class="hljs-class">    void createTree(<span class="hljs-type">T</span> <span class="hljs-title">flag</span>);</span><br><span class="hljs-class">    <span class="hljs-type">T</span> parent(<span class="hljs-type">T</span> <span class="hljs-title">x</span>,<span class="hljs-type">T</span> <span class="hljs-title">flag</span>) const&#123;&#125;</span><br><span class="hljs-class"></span><br><span class="hljs-class">private:</span><br><span class="hljs-class">    <span class="hljs-type">Node</span> *find(<span class="hljs-type">T</span> <span class="hljs-title">x</span>,<span class="hljs-type">Node</span> *<span class="hljs-title">t</span>) const;</span><br><span class="hljs-class">    void clear(<span class="hljs-type">Node</span> *&amp;<span class="hljs-title">t</span>);</span><br><span class="hljs-class">    void preOrder(<span class="hljs-type">Node</span> *<span class="hljs-title">t</span>) const;</span><br><span class="hljs-class">    void midOrder(<span class="hljs-type">Node</span> *<span class="hljs-title">t</span>) const;</span><br><span class="hljs-class">    void postOrder(<span class="hljs-type">Node</span> *<span class="hljs-title">t</span>) const;</span><br><span class="hljs-class">&#125;;</span><br></code></pre></td></tr></table></figure><h2 id="二叉链表类的运算实现"><a href="#二叉链表类的运算实现" class="headerlink" title="二叉链表类的运算实现"></a>二叉链表类的运算实现</h2><p>首先是isEmpty、Root、clear和析构函数</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> root == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">T</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Root</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">flag</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(root == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> root-&gt;data;<br>    &#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">clear</span>(<span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Node</span> *&amp;<span class="hljs-symbol">t</span>)&#123;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    clear(t-&gt;left);<br>    clear(t-&gt;right);<br>    delete t;<br>    t = <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::~<span class="hljs-symbol">binaryTree</span>()&#123;<br>    clear(root);<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是遍历函数的实现</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">preOrder</span>(<span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Node</span> *<span class="hljs-symbol">t</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    cout &lt;&lt; t-&gt;data;<br>    preOrder(t-&gt;left);<br>    preOrder(t-&gt;right);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">preOrder</span>() <span class="hljs-symbol">const</span>&#123;<br>    preOrder(root);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">midOrder</span>(<span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Node</span> *<span class="hljs-symbol">t</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    midOrder(t-&gt;left);<br>    cout &lt;&lt; t-&gt;data;<br>    midOrder(t-&gt;right);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">midOrder</span>() <span class="hljs-symbol">const</span>&#123;<br>    midOrder(root);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">postOrder</span>(<span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Node</span> *<span class="hljs-symbol">t</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    postOrder(t-&gt;left);<br>    postOrder(t-&gt;right);<br>    cout &lt;&lt; t-&gt;data;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">postOrder</span>() <span class="hljs-symbol">const</span>&#123;<br>    postOrder(root);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">levelOrder</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-comment">// 这里采用链接队列实现</span><br>    <span class="hljs-comment">// 类似于广度优先搜索（BFS）</span><br>    linkQueue&lt;Node *&gt; que;<br>    Node *tmp;<br>    que.enQueue(root);<br><br>    <span class="hljs-keyword">while</span>(!que.isEmpty())&#123;<br>        tmp = que.deQueue;<br>        cout &lt;&lt; tmp -&gt; data;<br>        <span class="hljs-keyword">if</span>(tmp -&gt; left)&#123;<br>            que.enQueue(tmp -&gt; left);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(tmp -&gt; right)&#123;<br>            que.enQueue(tmp -&gt; right);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>接着是find、lChild、rChild、delLeft、delRight函数实现</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">Node</span> *<span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">find</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">x,<span class="hljs-symbol">binaryTree</span></span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">Node</span> *<span class="hljs-symbol">t</span>) <span class="hljs-symbol">const</span>&#123;<br>    Node *tmp;<br>    <span class="hljs-keyword">if</span>(t == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>ptr;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(t-&gt;data == x)&#123;<br>        <span class="hljs-keyword">return</span> t;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp = find(x,t-&gt;left))&#123;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(tmp = find(x,t-&gt;right))&#123;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">null</span>ptr;<br>    &#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">T</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">lChild</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">x,<span class="hljs-symbol">T</span></span> <span class="hljs-symbol">flag</span>) <span class="hljs-symbol">const</span>&#123;<br>    Node *tmp = find(x,root);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp -&gt; left == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp -&gt; left -&gt; data;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">T</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">rChild</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">x,<span class="hljs-symbol">T</span></span> <span class="hljs-symbol">flag</span>) <span class="hljs-symbol">const</span>&#123;<br>    Node *tmp = find(x,root);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp -&gt; right == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> flag;<br>    &#125;<br>    <span class="hljs-keyword">return</span> tmp -&gt; right -&gt; data;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">delLeft</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">x</span>)&#123;<br>    Node *tmp = find(x,root);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp -&gt; left == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    clear(tmp -&gt; left);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">T</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">binaryTree</span>&lt;<span class="hljs-symbol">T</span>&gt;::<span class="hljs-symbol">delRight</span>(<span class="hljs-symbol">T</span> <span class="hljs-symbol">x</span>)&#123;<br>    Node *tmp = find(x,root);<br>    <span class="hljs-keyword">if</span>(tmp == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(tmp -&gt; right == <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    clear(tmp -&gt; right);<br>&#125;<br></code></pre></td></tr></table></figure><p>最后是createTree建树操作</p><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">template<span class="hljs-tag">&lt;class T&gt;</span><br>void binaryTree<span class="hljs-tag">&lt;T&gt;</span>::createTree(T flag)&#123;<br>    linkQueue<span class="hljs-tag">&lt;Node *&gt;</span>que;<br>    <span class="hljs-keyword">Node</span> <span class="hljs-title">*tmp</span>;<br>    T x,lData,rData;<br>    cin &gt;&gt; x;<br>    que.enQueue(new <span class="hljs-keyword">Node</span><span class="hljs-title">(x</span>));<br>    while(!que.isEmpty())&#123;<br>        tmp = que.deQueue();<br>        cin &gt;&gt; lDta &gt;&gt; rData;<br>        if(lData != flag)&#123;<br>            que.enQueue(tmp -&gt; left = new <span class="hljs-keyword">Node</span><span class="hljs-title">(lData</span>));<br>        &#125;<br>        if(rData != flag)&#123;<br>            que.enQueue(tmp -&gt; right = new <span class="hljs-keyword">Node</span><span class="hljs-title">(rData</span>));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>附上友元函数打印树</p><figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stata">void printTree(<span class="hljs-keyword">const</span> binaryTree&lt;T&gt; &amp;t,T flag)&#123;<br>    linkQueue&lt;T&gt;<span class="hljs-keyword">que</span>;<br>    <span class="hljs-keyword">que</span>.enQueue(t -&gt; root -&gt; data);<br>    <br>    <span class="hljs-keyword">while</span>(!<span class="hljs-keyword">que</span>.isEmpty())&#123;<br>        T tmp = <span class="hljs-keyword">que</span>.deQueue();<br>        T <span class="hljs-keyword">l</span> = lChild(tmp,flag);<br>        T r = rChild(tmp,flag);<br>        cout &lt;&lt; tmp &lt;&lt; <span class="hljs-keyword">l</span> &lt;&lt; r &lt;&lt; endl;<br>        <span class="hljs-keyword">if</span>(<span class="hljs-keyword">l</span> != flag)&#123;<br>            <span class="hljs-keyword">que</span>.enQueue(<span class="hljs-keyword">l</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span>(r != flag)&#123;<br>            <span class="hljs-keyword">que</span>.enQueue(r);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Tree</tag>
      
      <tag>Binary Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic4</title>
    <link href="/2025/02/23/Java-Basic4/"/>
    <url>/2025/02/23/Java-Basic4/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：忙里偷闲出一期extra，感觉后面时间越来越少了，Games101遥遥无期😭😭😭"><a href="#Before：忙里偷闲出一期extra，感觉后面时间越来越少了，Games101遥遥无期😭😭😭" class="headerlink" title="Before：忙里偷闲出一期extra，感觉后面时间越来越少了，Games101遥遥无期😭😭😭"></a>Before：忙里偷闲出一期extra，感觉后面时间越来越少了，Games101遥遥无期😭😭😭</h5><h1 id="Java-Basic-4"><a href="#Java-Basic-4" class="headerlink" title="Java Basic 4"></a>Java Basic 4</h1><h2 id="Good-program-design"><a href="#Good-program-design" class="headerlink" title="Good program design"></a>Good program design</h2><p>Correct &#x2F; Easy to understand &#x2F; Easy to modify &#x2F; speed</p><h3 id="Naming"><a href="#Naming" class="headerlink" title="Naming"></a>Naming</h3><p>Variables: nouns,lowercase first letter,capitals separating words<br>Methods: Verbs,lowercase first letter<br>Classes:nouns,uppercase first letter</p><h3 id="Good-Class-Design"><a href="#Good-Class-Design" class="headerlink" title="Good Class Design"></a>Good Class Design</h3><ul><li>Make fields and methods private by default 默认私有即可，无需强行private</li><li>Only make methods public if you need to 只有必要时将函数设为公有</li><li>If you need access to a field, create a method 我们建议将成员变量设成private，再通过get或set函数来获取值或修改值</li></ul><h2 id="Debugging"><a href="#Debugging" class="headerlink" title="Debugging"></a>Debugging</h2><h3 id="Interval-Testing"><a href="#Interval-Testing" class="headerlink" title="Interval Testing"></a>Interval Testing</h3><p>Important cases<br>下界以下、等于下界、在区间内、等于上界、上界以上</p><h3 id="Eclipse-Warnings"><a href="#Eclipse-Warnings" class="headerlink" title="Eclipse Warnings"></a>Eclipse Warnings</h3><p>May not be a mistake, but it likely is.<br>Always fix all warning!</p><h3 id="Assertion-断言"><a href="#Assertion-断言" class="headerlink" title="Assertion 断言"></a>Assertion 断言</h3><p>断言用于验证代码是否按预期运行</p><ul><li>当断言条件为真时，程序正常运行，不会有额外操作。</li><li>当断言条件为假时，程序会崩溃并抛出错误。</li></ul><p><code>assert difference &gt;= 0</code><br>这行代码表示断言变量difference的值大于或等于0，如果不满足该条，程序将报错。</p><h2 id="Interfaces-接口"><a href="#Interfaces-接口" class="headerlink" title="Interfaces 接口"></a>Interfaces 接口</h2><p><img src="/img/interface.png" alt="Implementation/Interface"><br>Java接口可以在不了解对象内部工作原理的情况下对其进行操作。</p><ul><li>当处理相似但不完全相同的对象时，接口很有用</li><li>当想要使用他人编写的代码时，接口也很实用。通过定义接口，代码提供者可以明确对外提供的功能契约，使用者只需按照接口定义来调用，而无需关心具体实现细节</li></ul><p>类比：C++中的抽象基类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.Graphics<br><br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Drawable</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(Graphics surface)</span>;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">setColor</span><span class="hljs-params">(Color color)</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.awt.Graphics<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flower</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Drawable</span>&#123;<br>    <span class="hljs-comment">//some stuff...</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">draw</span><span class="hljs-params">(Graphics surface)</span>&#123;<br>        <span class="hljs-comment">// ...</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>implement关键字：用于类与接口之间的关系，表明一个类要实现接口中定义的所有抽象方法。<strong>一个类可以实现多个接口</strong>，从而具备多种不同的行为。（与后文提到的extends一个重要的区别）</p><h3 id="Interface-Notes-关于抽象基类"><a href="#Interface-Notes-关于抽象基类" class="headerlink" title="Interface Notes 关于抽象基类"></a>Interface Notes 关于抽象基类</h3><ul><li>只有函数</li><li>不提供具体代码实现，只提供定义</li><li>一个类可以实现任意数量的接口<br>关于最后一点，在C++中，可以举个这样的例子：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-comment">// 第一个抽象类，模拟第一个接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Flyable</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 纯虚函数，模拟接口方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Flyable</span>() &#123;&#125;<br>&#125;;<br><span class="hljs-comment">// 第二个抽象类，模拟第二个接口</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Swimmable</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 纯虚函数，模拟接口方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <br>    <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">Swimmable</span>() &#123;&#125;<br>&#125;;<br><span class="hljs-comment">// 一个类继承多个抽象类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Duck</span> : <span class="hljs-keyword">public</span> Flyable, <span class="hljs-keyword">public</span> Swimmable &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-comment">// 实现Flyable接口的方法</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fly</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Duck is flying.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>    <span class="hljs-comment">// 实现Swimmable接口的方法</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">swim</span><span class="hljs-params">()</span> <span class="hljs-keyword">override</span> </span>&#123;<br>        std::cout &lt;&lt; <span class="hljs-string">&quot;Duck is swimming.&quot;</span> &lt;&lt; std::endl;<br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="Access"><a href="#Access" class="headerlink" title="Access"></a>Access</h3><p>当通过接口来引用对象时，只能访问接口中定义的成员（方法、常量等）<br>举个例子：<br><code>Drawable d = new BouncingBox(...);</code><br>d只能访问Grawable接口中定义的draw函数<br>相当于接口限定了外部可见功能的边界</p><h3 id="Cast"><a href="#Cast" class="headerlink" title="Cast"></a>Cast</h3><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs abnf">Drawable d <span class="hljs-operator">=</span> new BouncingBox(...)<span class="hljs-comment">;</span><br>BouncingBox box <span class="hljs-operator">=</span> (BouncingBox) d<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><p>则box可以调用BouncingBox类中</p><h2 id="Inheritance"><a href="#Inheritance" class="headerlink" title="Inheritance"></a>Inheritance</h2><p>extends关键字：用于类与类之间的继承关系，即一个类（子类、派生类）可以继承另一个类（父类、基类）的属性和方法。<br>特别注意的是：<strong>在 Java 里，类的继承只支持单继承，也就是一个子类只能有一个直接父类。</strong><br>class A extends B{}：A是B的子类<br>A拥有B的全部成员变量和函数，且可以增加自己的成员变量和函数</p><p>Example:</p><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs scala"><span class="hljs-comment">// 父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    void eat() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Animal is eating.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 子类继承父类</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Animal</span> </span>&#123;<br>    void bark() &#123;<br>        <span class="hljs-type">System</span>.out.println(<span class="hljs-string">&quot;Dog is barking.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>当然A也可以通过implement替换父类中的某个函数<br>Example:</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> speed;<br><br>    void move() &#123;<br>        System.out.println(<span class="hljs-string">&quot;Vehicle is moving.&quot;</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-title">extends</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> numDoors;<br><br>    <span class="hljs-variable">@Override</span><br>    void move() &#123;<br>        System.out.println(<span class="hljs-string">&quot;Car is moving on the road.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h2><p>Java中的报错信息主要为以下几种：<br><img src="/img/Exceptions.png" alt="Java Exceptions"><br>Java 通过创建异常对象并抛出的方式处理异常</p><h3 id="throw-主动抛出异常"><a href="#throw-主动抛出异常" class="headerlink" title="throw 主动抛出异常"></a>throw 主动抛出异常</h3><figure class="highlight scala"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs scala">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyException</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Exception</span></span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><p>throws &amp; throw：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-built_in">public</span> <span class="hljs-keyword">Object</span> <span class="hljs-keyword">get</span>(<span class="hljs-type">int</span> <span class="hljs-keyword">index</span>) throws ArrayOutOfBoundsException &#123;<br>    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">index</span> &lt; <span class="hljs-number">0</span> || <span class="hljs-keyword">index</span> &gt;= size())<br>        throw <span class="hljs-built_in">new</span> ArrayOutOfBoundsException(&quot;&quot;+<span class="hljs-keyword">index</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>throws关键字：用于方法声明中，它告诉 Java 这个get方法在执行过程中可能会抛出ArrayOutOfBoundsException（数组越界异常）</li><li>throw关键字：用于实际抛出一个ArrayOutOfBoundsException异常对象，并将index作为参数传递给异常构造函数，方便在异常处理时获取相关信息。</li></ul><h3 id="try-catch-捕获并处理异常"><a href="#try-catch-捕获并处理异常" class="headerlink" title="try-catch 捕获并处理异常"></a>try-catch 捕获并处理异常</h3><p>Java希望调用get函数来处理异常</p><ul><li>Catching it</li><li>Rethrowing it</li></ul><p>try块用于执行可能会抛出异常的代码。在执行过程中，一旦代码抛出异常，程序的执行流程就会立即改变。<br>catch块则是告诉 Java 当捕获到指定类型的异常时，应该执行什么样的处理逻辑。</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-keyword">get</span>(<span class="hljs-number">-1</span>);<br>&#125; <span class="hljs-keyword">catch</span> (ArrayOutOfBoundsException err) &#123;<br>    System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;oh dear!&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-type">static</span> <span class="hljs-type">void</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-type">String</span>[] args)</span> throws Exception</span>&#123;<br>    <span class="hljs-comment">//...</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="I-O-文件读写"><a href="#I-O-文件读写" class="headerlink" title="I&#x2F;O 文件读写"></a>I&#x2F;O 文件读写</h2><h3 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h3><p>以字节为单位进行数据读写，适用于处理所有类型的数据，如图片、音频等二进制文件。<br>InputStream（输入字节流的抽象类）和OutputStream（输出字节流的抽象类）</p><h3 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h3><p>以字符为单位进行数据读写，适合处理文本数据。主要的字符流类有Reader（输入字符流的抽象类）和Writer（输出字符流的抽象类）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadFile</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(<span class="hljs-string">&quot;./src/readme&quot;</span>);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(fr);<br>        <span class="hljs-comment">//缓冲功能</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">line</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="END"><a href="#END" class="headerlink" title="END"></a>END</h2><p>MIT 6.092: Introduction To Programming In Java<br>完结撒花🎇🎆</p>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>Exceptions</tag>
      
      <tag>I/O</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure9</title>
    <link href="/2025/02/22/Data-Structure9/"/>
    <url>/2025/02/22/Data-Structure9/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：这一章，我们要进入一种新的数据结构类型——树🌲🌳🌴🎄。lz早就听闻各种神奇的树（二叉树、平衡树、红黑树、线段树、B树、B-树…）😇😭😥，今天中午和学长吃饭得知他红黑树调了1个月找不出bug只好重构的事迹，已经开始害怕了😰咱们还是快开始吧！"><a href="#Before：这一章，我们要进入一种新的数据结构类型——树🌲🌳🌴🎄。lz早就听闻各种神奇的树（二叉树、平衡树、红黑树、线段树、B树、B-树…）😇😭😥，今天中午和学长吃饭得知他红黑树调了1个月找不出bug只好重构的事迹，已经开始害怕了😰咱们还是快开始吧！" class="headerlink" title="Before：这一章，我们要进入一种新的数据结构类型——树🌲🌳🌴🎄。lz早就听闻各种神奇的树（二叉树、平衡树、红黑树、线段树、B树、B+树…）😇😭😥，今天中午和学长吃饭得知他红黑树调了1个月找不出bug只好重构的事迹，已经开始害怕了😰咱们还是快开始吧！"></a>Before：这一章，我们要进入一种新的数据结构类型——树🌲🌳🌴🎄。lz早就听闻各种神奇的树（二叉树、平衡树、红黑树、线段树、B树、B+树…）😇😭😥，今天中午和学长吃饭得知他红黑树调了1个月找不出bug只好重构的事迹，已经开始害怕了😰咱们还是快开始吧！</h5><h1 id="Data-Structure-9-树"><a href="#Data-Structure-9-树" class="headerlink" title="Data Structure 9 树"></a>Data Structure 9 树</h1><p>为了满足一下某人的好奇心，决定先贴一张树的归纳总结的图，作为开端（自己宠自己）<br><img src="/img/%E6%A0%91%E5%A4%A7%E5%85%A8.png" alt="树的总结"></p><h2 id="树的定义"><a href="#树的定义" class="headerlink" title="树的定义"></a>树的定义</h2><p>首先，回顾一下树状结构的特点：只有一个直接前驱（除根结点外），但可以有多个直接后继。</p><p>树的递归定义：有n个结点的有限集合，或者是空集。拥有1个根结点，其余结点可分成m个互不相交的集合，这些集合本质上也是树，称作根节点的子树。<br>下面是树的一些基本术语：</p><ul><li>根节点  叶节点（没有直接后继的结点） 内部结点（除根叶结点外）</li><li>结点的度（一个结点的直接后继数目）  树的度（所有结点的度的最大值）</li><li>子结点（结点的直接后继结点） 父结点（结点的直接前驱） 祖先节点（每个结点通向根结点的唯一路径上的所有结点） 子孙结点（该结点所有子树中的全部结点）</li><li>兄弟结点（同一个结点的子结点互为兄弟结点）</li><li>结点层次（相当于家谱中的第几代） 树的高度（结点的最大层次） 结点高度（以该结点为根的子树高度）</li><li>有序树（把树中每个结点的子树看成自左向右有序的）</li><li>森林（M棵互不相交的树的集合）</li></ul><h2 id="树的基本运算"><a href="#树的基本运算" class="headerlink" title="树的基本运算"></a>树的基本运算</h2><p>（1）create() 创建空树<br>（2）clear() 清除树中所有结点<br>（3）isEmpty() 判别空树<br>（4）root() 找到根结点的值<br>（5）parent(x) 找到结点x的父结点值<br>（6）child(x,i) 找结点x的第i个子结点值<br>（7）remove(x,i) 删除结点i的第i棵子树<br>（8）traverse() 访问树上每一个结点<br>还是老样子，给出树的抽象类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">tree</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">root</span><span class="hljs-params">(T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//flag是结点不存在时的返回值</span><br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">parent</span><span class="hljs-params">(T x,T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">child</span><span class="hljs-params">(T x,<span class="hljs-type">int</span> i,T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(T x,<span class="hljs-type">int</span> i)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="二叉树-binary-tree"><a href="#二叉树-binary-tree" class="headerlink" title="二叉树 binary tree"></a>二叉树 binary tree</h2><p>放在第一个，那自然是因为它《简单且应用广泛》</p><p>二叉树是结点的有限集合，它或者为空，或者由一个根结点及两棵互不相交的左右子树构成，而其左、右子树又都是二叉树。<strong>注意：二叉树是有序树，必须严格区分左右子树。</strong>即使只有一棵子树，也要说明它是左子树还是右子树。</p><p>二叉树有5种基本形态：<br><img src="/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E5%BD%A2%E6%80%81.png" alt="二叉树的5种基本形态"></p><p>满二叉树：一棵二叉树中任意一层结点数量都达到了最大值<br>完全二叉树：在满二叉树的最底层自右向左依次去掉若干个结点（不能跳过任何一个结点）。即满二叉树一定是完全二叉树，但完全二叉树不一定是满二叉树。</p><p>下面是二叉树的一些常用性质：<br>1.一棵二叉树第i层最多有2^(i - 1)个结点<br>2.一棵高度为k的二叉树上，最多有2^k - 1 个结点<br>3.对于一棵非空二叉树，如果叶子结点数为n_0，度为2的结点数为n_2，则有n_0 &#x3D; n_2 + 1<br>证明：设二叉树中度数为1的结点数量为n_1，结点总数为n，那么自然有：<br>n &#x3D; n_0 + n_1 + n_2<br>再看树枝数量B，二叉树中每个结点（除根结点外）都有一根指向他们的树枝，所以有：<br>B &#x3D; n - 1<br>这些树枝都是由度为1、2的结点发出的，所以<br>n_1 + 2 * n_2 &#x3D; n - 1<br>所以<br>n_0 &#x3D; n_2 + 1<br>4.具有n个结点的完全二叉树高度为[log_2 n] + 1<br>5.如果对一棵有n个结点的完全二叉树中的结点按层自上而下，每一层按自左至右依次编号，若设根结点的编号为1，则对任一编号为i的结点，有：<br>（1）若i &#x3D; 1，则为根结点；若i&gt;1，则父结点编号为[i&#x2F;2]<br>（2）如果2i&gt;n，则编号为i的结点为叶子结点，没有儿子；否则，其左儿子的编号为2i<br>（3）如果2i + 1&gt;n，则编号为i的结点无右儿子；否则，其右儿子的编号为2i + 1</p><h2 id="二叉树的基本操作"><a href="#二叉树的基本操作" class="headerlink" title="二叉树的基本操作"></a>二叉树的基本操作</h2><p>（1）create() 创建空二叉树<br>（2）clear() 清除二叉树中所有结点<br>（3）isEmpty() 判别空二叉树<br>（4）root() 找到二叉树根结点的值<br>（5）parent(x) 找到结点x的父结点值<br>（6）lchild(x) 找结点x的左结点值<br>（7）rchild(x) 找结点x的右结点值<br>（8）deLeft(x) 删除结点x的左子树<br>（9）deRight(x) 删除结点x的右子树<br>（10）traverse() 访问二叉树上每一个结点<br>对于最后一个操作——traverse()，我们有以下几种方式实现遍历：</p><ul><li>前序遍历（先根遍历）：先访问根结点，然后前序遍历左子树，然后前序遍历右子树</li><li>中序遍历（中根遍历）：先中序遍历左子树，然后访问根结点，然后中序遍历右子树<br><img src="/img/%E4%BA%8C%E5%8F%89%E6%A0%91%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86.png" alt="二叉树中序遍历"></li><li>后序遍历（后根遍历）：先后序遍历左子树，然后后序遍历右子树，最后访问根结点</li><li>层次遍历：在访问了第k层的所有结点后，再按从左到右的次序访问第k+1层</li></ul><p>前序遍历+中序遍历可以确定一棵二叉树（通过前序遍历找到根结点，然后得到左子树右子树，下面就是递归了），同理，后序遍历+中序遍历也可以确定一棵二叉树，但前序遍历+后序遍历无法确定一棵二叉树（易举反例）</p><p>下面是二叉树的抽象类：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">bTree</span>&#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">Root</span><span class="hljs-params">(T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">parent</span><span class="hljs-params">(T x,T flag)</span> <span class="hljs-type">const</span> </span>= O;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">lchild</span><span class="hljs-params">(T x,T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> T <span class="hljs-title">rchild</span><span class="hljs-params">(T x,T flag)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">delLeft</span><span class="hljs-params">(T x)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">delRight</span><span class="hljs-params">(T x)</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">preOreder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">midOrder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">postOrder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">levelOrder</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="二叉树的顺序实现"><a href="#二叉树的顺序实现" class="headerlink" title="二叉树的顺序实现"></a>二叉树的顺序实现</h2><p>与线性结构一样，所谓的顺序存储就是将数据元素存放在一个<strong>数组</strong>中<br>若是完全二叉树，那显然用数组实现将会非常简单，结点的存储位置可以直接反应出结点的存储关系。</p><p>但如果需要存储的二叉树不是完全二叉树，情况就会比较不同。父子间数量关系（性质5）并不成立。可能的解决方案是在残缺位置上添加“虚结点”使之变成一棵完全二叉树。<br>如下图所示：<br><img src="/img/%E8%99%9A%E7%BB%93%E7%82%B9%E4%BA%8C%E5%8F%89%E6%A0%91.png" alt="虚结点二叉树"></p><h2 id="二叉树的链接实现"><a href="#二叉树的链接实现" class="headerlink" title="二叉树的链接实现"></a>二叉树的链接实现</h2><h3 id="标准存储方式——二叉链表"><a href="#标准存储方式——二叉链表" class="headerlink" title="标准存储方式——二叉链表"></a>标准存储方式——二叉链表</h3><p>在二叉链表中，每个存储结点由3个字段组成，存储数据元素值的数据字段以及指向左、右儿子的指针字段。如下所示：<br>| left | data | right | </p><p>下面是二叉链表存储示例：</p><p><img src="/img/%E4%BA%8C%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8.png" alt="二叉链表存储"></p><h3 id="广义标准存储方式——三叉链表"><a href="#广义标准存储方式——三叉链表" class="headerlink" title="广义标准存储方式——三叉链表"></a>广义标准存储方式——三叉链表</h3><p>在标准存储结构的基础上，再增加一个指向其父亲结点的指针，这就是广义标准存储方式<br>| data | left | parent | right |</p><p>下面是三叉链表存储示例：</p><p><img src="/img/%E4%B8%89%E5%8F%89%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8.png" alt="三叉链表存储"></p><h3 id="Conclude"><a href="#Conclude" class="headerlink" title="Conclude"></a>Conclude</h3><p>由于二叉链表的简洁，且查找父亲的操作较为少见，所以我们更为常用的还是<strong>二叉链表</strong></p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p><a href="https://www.pdai.tech/md/algorithm/alg-basic-tree.html">https://www.pdai.tech/md/algorithm/alg-basic-tree.html</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Tree</tag>
      
      <tag>Binary Tree</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Mathematical-Logic1</title>
    <link href="/2025/02/21/Mathematical-Logic1/"/>
    <url>/2025/02/21/Mathematical-Logic1/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-数理逻辑是ACM班大一下要求修的一门课，这门课本质上还是一门数学课，一般也是数学系的同学可能会上的（而不是计算机系🤣）。Prof是Yin-Qiang，Yijia-Chen的学生。后续会更新这门“抽象”的课的Lecture-Notes❤️"><a href="#Before-数理逻辑是ACM班大一下要求修的一门课，这门课本质上还是一门数学课，一般也是数学系的同学可能会上的（而不是计算机系🤣）。Prof是Yin-Qiang，Yijia-Chen的学生。后续会更新这门“抽象”的课的Lecture-Notes❤️" class="headerlink" title="Before: 数理逻辑是ACM班大一下要求修的一门课，这门课本质上还是一门数学课，一般也是数学系的同学可能会上的（而不是计算机系🤣）。Prof是Yin Qiang，Yijia Chen的学生。后续会更新这门“抽象”的课的Lecture Notes❤️"></a>Before: 数理逻辑是ACM班大一下要求修的一门课，这门课本质上还是一门数学课，一般也是数学系的同学可能会上的（而不是计算机系🤣）。Prof是Yin Qiang，Yijia Chen的学生。后续会更新这门“抽象”的课的Lecture Notes❤️</h5><h1 id="Methematical-Logic-1-Introduction-The-Syntax-of-First-order-Logic"><a href="#Methematical-Logic-1-Introduction-The-Syntax-of-First-order-Logic" class="headerlink" title="Methematical Logic 1 Introduction &amp; The Syntax of First-order Logic"></a>Methematical Logic 1 Introduction &amp; The Syntax of First-order Logic</h1><h2 id="Course-Introduction"><a href="#Course-Introduction" class="headerlink" title="Course Introduction"></a>Course Introduction</h2><p>Four Problems mainly</p><ul><li>What is a mathematical proof</li><li>What makes a proof correct</li><li>Is there a boundary of provability</li><li>Can computers find proofs</li></ul><h3 id="Q1-What-is-a-mathematical-proof"><a href="#Q1-What-is-a-mathematical-proof" class="headerlink" title="Q1.What is a mathematical proof"></a>Q1.What is a mathematical proof</h3><p>Based on first-order logic</p><h3 id="Q2-What-makes-a-proof-correct"><a href="#Q2-What-makes-a-proof-correct" class="headerlink" title="Q2.What makes a proof correct"></a>Q2.What makes a proof correct</h3><p>Gödel Completeness Theorem</p><h3 id="Q3-Is-there-a-boundary-of-provability"><a href="#Q3-Is-there-a-boundary-of-provability" class="headerlink" title="Q3.Is there a boundary of provability"></a>Q3.Is there a boundary of provability</h3><p>Gödel’s First Incompleteness Theorem</p><h3 id="Q4-Can-computers-find-proofs"><a href="#Q4-Can-computers-find-proofs" class="headerlink" title="Q4.Can computers find proofs"></a>Q4.Can computers find proofs</h3><p>Any computer program cannot decide whether an arbitrary input mathematical statement has a proof.<br>Turing’s undecidability of the halting problem.(图灵停机问题不可判定)</p><p>Below is A Proof of Q4:<br>φP,x has a proof | P will eventually halt on input x<br>1.construct the mathematical statement φx,x<br>2.call the program T on input φx,x<br>3.if T(φx,x) &#x3D; yes then run forever else halt</p><p>Then we can get that H(H) haltss iff H(H) does not halt.(Using what we know up)</p><h2 id="The-Syntax-of-First-order-Logic"><a href="#The-Syntax-of-First-order-Logic" class="headerlink" title="The Syntax of First-order Logic"></a>The Syntax of First-order Logic</h2><h3 id="Alphabets-字母表"><a href="#Alphabets-字母表" class="headerlink" title="Alphabets 字母表"></a>Alphabets 字母表</h3><p>an nonempty set of symbols 非空符号的集合</p><h3 id="Word-词"><a href="#Word-词" class="headerlink" title="Word 词"></a>Word 词</h3><p>A word w over A(an Alphabet) is a finite sequence of symbols in A,i.e,<br>$$<br>w &#x3D; w_1w_2…w_n<br>$$<br>$<br>w_i \in A<br>$<br>$A^*$ denotes the set of all words over A</p><h3 id="Countable-Set"><a href="#Countable-Set" class="headerlink" title="Countable Set"></a>Countable Set</h3><p>There exists an injective function(单射) α from N onto M<br>At most countable: if M is either finite or countable</p><p>Two lemmas<br>1.These three equivalent:<br>(1)M is at most countable<br>(2)an surjective function f:N -&gt; M<br>(3)an injective function f:M -&gt; N<br>2.A is most countable,then $A^*$ is countable.</p><h3 id="Terms-项"><a href="#Terms-项" class="headerlink" title="Terms 项"></a>Terms 项</h3><p>Variable Constant are both S-terms.<br>And if f is a n-ary function symbol in S,then f(S-terms) is also a S-term.</p><h3 id="Formula-公式"><a href="#Formula-公式" class="headerlink" title="Formula 公式"></a>Formula 公式</h3><p>The set $L^S$ of S-formulas contains precisely those words in $A^∗_S$ which can be obtained by applying the following rules finitely many times.<br><img src="/img/Formula.png" alt="Formula Rules"></p><h3 id="Variables-变量"><a href="#Variables-变量" class="headerlink" title="Variables 变量"></a>Variables 变量</h3><p>Let t be a S-term, then var(t) is the set of variables in t.</p><h3 id="Free-Variables-自由变元"><a href="#Free-Variables-自由变元" class="headerlink" title="Free Variables 自由变元"></a>Free Variables 自由变元</h3><p>We say that an occurrence of x in φ is free if it is not in the scope of any ∀x or ∃x.<br>只有出现在约束范围内的变量才算是约束出现的</p><h3 id="Sentence-句子"><a href="#Sentence-句子" class="headerlink" title="Sentence 句子"></a>Sentence 句子</h3><p>If free(φ) is ∅,then it’s a sentence. 没有自由变元<br>Reflect Mathematical characteristics.<br>$L_N^S$:&#x3D; {φ | φ an S-formula with free(φ) ⊆ {v0, . . . , vn−1}}.</p>]]></content>
    
    
    <categories>
      
      <category>Mathematical Logic</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Mathematical Logic</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure8</title>
    <link href="/2025/02/20/Data-Structure8/"/>
    <url>/2025/02/20/Data-Structure8/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：字符串是琴弦，想弹琴了🎸🎹🪕"><a href="#Before：字符串是琴弦，想弹琴了🎸🎹🪕" class="headerlink" title="Before：字符串是琴弦，想弹琴了🎸🎹🪕"></a>Before：字符串是琴弦，想弹琴了🎸🎹🪕</h5><h1 id="Data-Structure-8-字符串"><a href="#Data-Structure-8-字符串" class="headerlink" title="Data Structure 8 字符串"></a>Data Structure 8 字符串</h1><h2 id="字符串的定义"><a href="#字符串的定义" class="headerlink" title="字符串的定义"></a>字符串的定义</h2><p>字符串是由若干个字符按照一定顺序组合而成，如果把单个字符看作一个元素，则可把字符串看成是一个字符类型的线性表。但区别在于，线性表中的个体大多相互独立，强调的是对表中某个元素的操作，而字符串更强调的是整体的操作，是对多个字符串的同时操作。关于字符串的基本操作有以下几种：<br>1.求字符串中元素个数length(s)<br>2.字符串输出disp(s)<br>3.判断两个字符串相等equal(s1,s2)、大于greater(s1,s2)大于等greaterEqual(s1, s2)、小于less(s1,s2)小于等于lessEqual(s1,s2)，按字母序判断两个字符串的大小，返回true或者false<br>4.字符串赋值copy(s1,s2)，将字符串s2赋值给另一个字符串s1。如t的值“SHANGHAI”,s的值是“UNIVERSITY”，执行copy(t,s)后，t的值变为“UNIVERSITY”。<br>5.字符串连接cat(s1,s2)，将字符串s2中的字符序列连接到字符串s1的字符序列之后。<br>6.取子串substr(s,start,len)，在字符串 s 中从start开始取长度为len的子串。<br>7.字符串插入insert(s1, start, s2)<br>8.删除子串remove(s, start, len)<br>9.查找子串search(s1,s2)</p><h2 id="字符串的顺序实现"><a href="#字符串的顺序实现" class="headerlink" title="字符串的顺序实现"></a>字符串的顺序实现</h2><p>字符串本质上是一个线性表，因而可以采用顺序存储。我们要做的是创建一个字符类型的数组。我们常说C风格字符串和C++字符串，那么C语言和C++在字符串这一数据结构的处理上有何区别呢？</p><p><img src="/img/%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%AF%B9%E6%AF%94.png" alt="C风格字符串与C++字符串对比"></p><p>而更为底层的区别在于，C语言的字符串是采用静态的顺序存储，使用一个以null(‘\0’)字符结尾的字符数组来保存字符串，而C++中则把字符串封装成了一种数据类型string，采用动态的顺序存储，并用运算符重载实现了赋值、连接、比较等操作，使字符串类型的变量能与整型、实型等内置类型的变量一样用运算符操作。</p><p>那么顺序串的存储实现采用一个动态的字符数组（一个动态数组自然需要一个指向数组首地址的指针和数组的大小两个量），但由于C++字符串必须以’\0’结尾，故不管该字符数组后面还有多少元素，一旦遇到’\0’，即终止，故字符串类的动态字符数组不需要记录数组的大小。</p><h2 id="字符串类的顺序实现"><a href="#字符串类的顺序实现" class="headerlink" title="字符串类的顺序实现"></a>字符串类的顺序实现</h2><p>在上代码前，让我们先明晰一下，字符串类的实现要点：</p><p>1.构造函数：接受一个字符串常量作为参数。构造函数会动态分配一个数组来存储这个字符串。<br>2.拷贝构造函数和析构函数：由于使用了动态内存分配，需要定义拷贝构造函数来正确处理对象的拷贝，以及析构函数来释放分配的内存。（<strong>回顾《程序设计思想与方法》</strong>，存在动态内存分配时，简单的浅拷贝（按位复制）会导致多个对象共享同一块内存。这可能导致析构时多次释放同一内存（double free），引发未定义行为。）<br>3.运算符的重载（字符串操作包含很多运算符运算）：输出、赋值、比较、输出。（<strong>回顾《程序设计思想与方法》</strong>，运算符重载通常定义为友元函数，出于对称性的考虑，即如果其中一个操作数不是类的对象，重载为成员函数可能会导致不对称性；也出于自然语法中输入输出运算符的左操作数通常是流对象，而不是自定义类的对象。）</p><p>下面给出字符串类的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqString</span>&#123;<br>    <span class="hljs-keyword">friend</span> seqString <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> seqString &amp;s1,<span class="hljs-type">const</span> seqString &amp;s2);<br>    <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ofstream &amp;os,<span class="hljs-type">const</span> seqString &amp;s);<br><br>    <span class="hljs-type">char</span> *data;<br>    <span class="hljs-type">int</span> len;<br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">seqString</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">seqString</span>(<span class="hljs-type">const</span> seqString &amp;other);<br>        ~<span class="hljs-built_in">seqString</span>();<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-comment">// 补充说明一下这里添加const的原因：</span><br>        <span class="hljs-comment">//  保证函数不会修改对象；允许在常量对象上调用</span><br>        seqString &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> seqString&amp;other);<br>        <span class="hljs-function">seqString <span class="hljs-title">subStr</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> num)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">const</span> seqString &amp;s)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> num)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>** 有趣的是，这里字符串类居然没有使用类模板？！不会是因为elemType都是char吧🤣🤣🤣</p><p>接下来就是字符串类的具体实现了，话不多说，上代码！</p><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><code class="hljs kotlin">seqString::seqString(<span class="hljs-keyword">const</span> char*s)&#123;<br>    int i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&#x27;\0&#x27;</span>)&#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    len = i;<br>    <span class="hljs-keyword">data</span> = new char[len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt;= len;i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = s[i];<br>    &#125;<br>&#125;<br><br>seqString::seqString(<span class="hljs-keyword">const</span> seqString &amp;other)&#123;<br>    <span class="hljs-keyword">data</span> = new char[other.len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ; i &lt;= other.len;i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = other.<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    len = other.len;<br>&#125;<br><br>seqString::~seqString()&#123;<br>    delete []<span class="hljs-keyword">data</span>;<br>&#125;<br><br>int seqString::length() <span class="hljs-keyword">const</span>&#123;<br>    <span class="hljs-keyword">return</span> len;<br>&#125;<br><br>seqString &amp;seqString::<span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> seqString&amp;other)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-keyword">this</span> == &amp;other)&#123;<br>        <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>    &#125;<br>    delete []<span class="hljs-keyword">data</span>;<br>    len = other.len;<br>    <span class="hljs-keyword">data</span> = new char[len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>;i &lt;= len;i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = other.<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>&#125;<br><br>seqString seqString::substr(int start,int num)&#123;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span> || start &gt;= len)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;&quot;</span>;<br>    &#125;<br>    seqString s;<br>    <span class="hljs-keyword">if</span>(start + num &gt; len)&#123;<br>        s.len = len - start;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        s.len = num;<br>    &#125;<br>    delete []s.<span class="hljs-keyword">data</span>;<br>    s.<span class="hljs-keyword">data</span> = new char[s.len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; s.len;i ++)&#123;<br>        s.<span class="hljs-keyword">data</span>[i] = <span class="hljs-keyword">data</span>[start + i];<br>    &#125;<br>    s.<span class="hljs-keyword">data</span>[s.len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> s;<br>&#125;<br><br>void seqString::insert(int start,<span class="hljs-keyword">const</span> seqString &amp;s)&#123;<br>    char *tmp = <span class="hljs-keyword">data</span>;<br>    <span class="hljs-keyword">if</span>(start &gt; len || start &lt; <span class="hljs-number">0</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    len += s.len;<br>    <span class="hljs-keyword">data</span> = new char[len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>;i &lt; start; i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = tmp[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i = start; i &lt; start + s.len;i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = s.<span class="hljs-keyword">data</span>[i - start];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i = start + s.len; i &lt;= len; i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i] = tmp[i - s.len];<br>    &#125;<br>    <br>    delete tmp;<br>&#125;<br><br>void seqString::remove(int start,int num)&#123;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span> || start &gt;= len)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(start + num &gt;= len)&#123;<br>        <span class="hljs-keyword">data</span>[start] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>        len = start;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i = start + num; i &lt; len; i ++)&#123;<br>        <span class="hljs-keyword">data</span>[i - num] =<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    len -= num;<br>    <span class="hljs-keyword">data</span>[len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>&#125;<br><br>seqString <span class="hljs-keyword">operator</span>+(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    seqString tmp;<br>    tmp.len = s1.len + s2.len;<br>    delete []tmp.<span class="hljs-keyword">data</span>;<br>    tmp.<span class="hljs-keyword">data</span> = new char[tmp.len + <span class="hljs-number">1</span>];<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ; i &lt; s1.len; i ++)&#123;<br>        tmp.<span class="hljs-keyword">data</span>[i] = s1.<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; s2.len; i ++)&#123;<br>        tmp.<span class="hljs-keyword">data</span>[s1.len + i] = s2.<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    tmp.<span class="hljs-keyword">data</span>[tmp.len] = <span class="hljs-string">&#x27;\0&#x27;</span>;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">if</span>(s1.len != s2.len)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ; i &lt;= s1.len; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(s1.<span class="hljs-keyword">data</span>[i] != s2.<span class="hljs-keyword">data</span>[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">if</span>(s1 == s2)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ; i &lt; s1.len; i ++)&#123;<br>        <span class="hljs-keyword">if</span>(s1.<span class="hljs-keyword">data</span>[i] &gt; s2.<span class="hljs-keyword">data</span>[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(s1.<span class="hljs-keyword">data</span>[i] &lt; s2.<span class="hljs-keyword">data</span>[i])&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">if</span>(s1 &gt; s2)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(s1 == s2)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">if</span>(s1 &gt;= s2)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>bool <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-keyword">const</span> seqString &amp;s1,<span class="hljs-keyword">const</span> seqString &amp;s2)&#123;<br>    <span class="hljs-keyword">if</span>(s1 &gt; s2)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>&#125;<br><br>ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ofstream &amp;os,<span class="hljs-keyword">const</span> seqString &amp;s)&#123;<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; s.len; i ++)&#123;<br>        os &lt;&lt; s.<span class="hljs-keyword">data</span>[i];<br>    &#125;<br>    <span class="hljs-keyword">return</span> os;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="字符串类的链接实现"><a href="#字符串类的链接实现" class="headerlink" title="字符串类的链接实现"></a>字符串类的链接实现</h2><p>正常的链表理应当在一个结点中存储一个字符，这种存储方式使insert和remove操作容易实现，但太浪费空间。在每个结点中，数据只占一个字节，而指针却要占多个字节。为了提高空间利用率，可使每个结点存放多个字符，称为<strong>块状链表</strong>😅😅😅😅😅流汗黄豆贴满了，应该能看出JaneZ对块状链表的无语了吧，一个差点要了我命的数据结构，《重生之JaneZ要斩了块状链表》，即将上演。</p><p>下图是一张块状链表的示意图：</p><p><img src="/img/%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8%E5%AD%97%E7%AC%A6%E4%B8%B2.png" alt="块状链表存储字符串"><br>块状链表提高了空间的利用率，但插入和删除时会引起数据的大量移动.例如在上图中的字符串中删除”C”，所有结点的数据都要发生变化。数据插入也是如此。为了提高插入和删除的效率，块状链表通常允许结点有一定的空闲空间。</p><p>如在上图的字符串中删除”C”只需在第一个结点中删除”C”，其他结点保持不变。如要删除”EFGI”只需删除第2个结点，并在原第3个结点中删除”I”。当需要在”F”后插入字符串”UVXYZ”时，先形成两个新的结点”UVX”和”YZ”，然后将结点”EFG”分裂成两个结点”EF”和”G”，将两个新结点插入它们之间。为了保证块状链表不退化成单个字符的链表，检查新插入的最后一个结点和后面一个结点能否合并成一个结点。</p><p><img src="/img/%E5%9D%97%E7%8A%B6%E9%93%BE%E8%A1%A8%E8%BF%87%E7%A8%8B.png" alt="块状链表执行insert操作具体过程"></p><p>一些实现要点：链接串类的存储采用带头结点的块状链表。由于采用链接存储，在链接串类中定义了一个私有的内嵌类node，即链表中的结点类。每个结点由3部分组成：结点中的有效字符数、保存字符串的字符数组以及一个指向后继结点的指针。链接串类有 3 个数据成员：指向头结点的指针、字符串的长度以及每个结点的容量。</p><p>下面给出代码实现：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">class</span> <span class="hljs-title class_">linkString</span>&#123;<br>    <span class="hljs-keyword">friend</span> linkString <span class="hljs-keyword">operator</span>+(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>!=(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&gt;=(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>&lt;=(<span class="hljs-type">const</span> linkString &amp;s1,<span class="hljs-type">const</span> linkString &amp;s2);<br>    <span class="hljs-keyword">friend</span> ostream &amp;<span class="hljs-keyword">operator</span>&lt;&lt;(ofstream &amp;os,<span class="hljs-type">const</span> linkString &amp;s);<br><br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>        <span class="hljs-type">int</span> size;<br>        Node *next;<br>        <span class="hljs-type">char</span> *data;<br><br>        <span class="hljs-built_in">Node</span>(<span class="hljs-type">int</span> s = <span class="hljs-number">1</span>,Node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = <span class="hljs-keyword">new</span> <span class="hljs-type">char</span>[s];<br>            next = n;<br>            size = s;<br>        &#125;<br>    &#125;;<br><br>    Node *head;<br>    <span class="hljs-type">int</span> len;<br>    <span class="hljs-type">int</span> nodeSize;<br><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-comment">//释放块状链表的存储空间</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">findPos</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> &amp;pos,Node *&amp;p)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-comment">//找到第start个字符所在的结点地址p以及在结点中的位置pos </span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">split</span><span class="hljs-params">(Node *p,<span class="hljs-type">int</span> pos)</span></span>;<br>    <span class="hljs-comment">//split函数将指针p指向的结点以位置pos为界分裂成两个结点。</span><br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">merge</span><span class="hljs-params">(Node *p)</span></span>;<br>    <span class="hljs-comment">//merge函数检查p指向的结点是否能与它的直接后继合并成一个结点。 </span><br><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">linkString</span>(<span class="hljs-type">const</span> <span class="hljs-type">char</span> *s = <span class="hljs-string">&quot;&quot;</span>);<br>        <span class="hljs-built_in">linkString</span>(<span class="hljs-type">const</span> linkString &amp;other);<br>        ~<span class="hljs-built_in">linkString</span>();<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        linkString &amp;<span class="hljs-keyword">operator</span>=(<span class="hljs-type">const</span> linkString&amp;other);<br>        <span class="hljs-function">linkString <span class="hljs-title">subStr</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> num)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">const</span> linkString &amp;s)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> start,<span class="hljs-type">int</span> num)</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>关于块状链表的性能，研究表明（事实上好像未必），块状链表的结点容最与结点个数相同时算法的效率是最高的。所以将结点数量设为 $\sqrt{len}$ </p><p>具体实现：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br></pre></td><td class="code"><pre><code class="hljs xl">linkString::linkString(const char *s = <span class="hljs-string">&quot;&quot;</span>)&#123;<br>    Node *p;<br><br>    int i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;;i++)&#123;<br>        <span class="hljs-keyword">if</span>(s[i] == <span class="hljs-string">&quot;\0&quot;</span>)&#123;<br>            break;<br>        &#125;<br>    &#125;<br>    len = i;<br>    nodeSize = <span class="hljs-built_in">sqrt</span>(len);<br><br>    <span class="hljs-keyword">while</span>(*s)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next = new Node(<span class="hljs-number">1</span>);<br>        <span class="hljs-function"><span class="hljs-title">for</span>( ; p -&gt;</span><span class="hljs-function"><span class="hljs-title">size</span> &lt; nodeSize &amp;&amp; *s; p -&gt;</span> size ++,s ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[p-&gt;</span>size] = *s;<br>        &#125;<br>    &#125;<br>&#125;<br><br>linkString::linkString(const linkString &amp;other)&#123;<br>    Node *p = head = new Node(<span class="hljs-number">1</span>);<br>    N<span class="hljs-function"><span class="hljs-title">ode</span> *otherp = other.head -&gt;</span> next;<br>    <span class="hljs-keyword">while</span>(otherp)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next = new Node(<span class="hljs-number">1</span>);<br>        <span class="hljs-function"><span class="hljs-title">for</span>(;p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> &lt; other.nodeSize &amp;&amp; otherp -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span>];p -&gt;</span> size ++, otherp ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span>] = otherp -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[p -&gt;</span> size];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">otherp</span> = otherp -&gt;</span> next;<br>    &#125;<br>    len = other.len;<br>    nodeSize = other.nodeSize;<br>&#125;<br><br>void clear()&#123;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span> *p = head -&gt;</span> next;<br>    Node *tmp;<br>    <span class="hljs-keyword">while</span>(p)&#123;<br>        tmp = p;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>        delete tmp;<br>    &#125;<br>&#125;<br><br>~linkString()&#123;<br>    clear();<br>    delete head;<br>&#125;<br><br>int linkString::length() const&#123;<br>    return len;<br>&#125;<br><br>linkString &amp;linkString::operator=(const linkString&amp;other)&#123;<br>    <span class="hljs-keyword">if</span>(other == this)&#123;<br>        return *this;<br>    &#125;<br><br>    clear();<br>    Node *p = head;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span> *otherp = other.head -&gt;</span> next;<br>    <span class="hljs-keyword">while</span>(otherp)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next = new Node(<span class="hljs-number">1</span>);<br>        <span class="hljs-function"><span class="hljs-title">for</span>(;p-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span> &lt; other.nodeSize &amp;&amp; otherp-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[p-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span>];p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> ++, otherp-&gt;</span><span class="hljs-keyword">data</span> ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[p-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span>] = otherp-&gt;</span><span class="hljs-function"><span class="hljs-title">data</span>[p-&gt;</span>size];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">otherp</span> = otherp -&gt;</span> next;<br>    &#125;<br>    len = other.len;<br>    nodeSize = other.nodeSize;<br>    return *this;<br>&#125;<br><br>void linkString::findPos(int start,int &amp;pos,Node *&amp;p) const&#123;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span> || start &gt;= len)&#123;<br>        return;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = head -&gt;</span> next;<br>    int count = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-keyword">while</span>(p)&#123;<br>        <span class="hljs-keyword">if</span>(start - count &gt; p.size)&#123;<br>            count += p.size;<br>            <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            pos = start - count;<br>            return;<br>        &#125;<br>    &#125;<br>&#125;<br><br>linkString linkString::subStr(int start,int num)&#123;<br>    linkString tmp;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span> || start &gt;= len)&#123;<br>        return tmp;<br>    &#125;<br>    Node *p;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span> *tmpp = tmp -&gt;</span> head;<br>    int pos;<br><br>    <span class="hljs-keyword">if</span>(start + num &gt; len)&#123;<br>        num = len - start ;<br>    &#125;<br>    findPos(start,pos,p);<br>    tmp.len = num;<br>    tmp.nodeSize = <span class="hljs-built_in">sqrt</span>(num);<br>    <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span> ; i &lt; num;)&#123;<br>        <span class="hljs-function"><span class="hljs-title">tmpp</span> = tmpp -&gt;</span> next = new Node(nodeSize);<br><br>        <span class="hljs-function"><span class="hljs-title">for</span>(;tmpp -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> &lt; tmp.nodeSize &amp;&amp; i &lt; tmp.len;i ++,tmpp-&gt;</span>size ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">if</span>(pos == p -&gt;</span> size)&#123;<br>                <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>                pos = <span class="hljs-number">0</span>;<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-title">tmpp</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[tmpp -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span>] = p -&gt;</span> <span class="hljs-keyword">data</span>[pos ++];<br>        &#125;<br>    &#125;<br><br>    return tmp;<br>&#125;<br><br>void linkString::split(Node *p,int pos)&#123;<br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = new node(nodeSize,p -&gt;</span> next);<br><br>    <span class="hljs-function"><span class="hljs-title">for</span>(int i = pos; i &lt; p -&gt;</span> size; i ++)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[i - pos] = p -&gt;</span> next[i];<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> = p -&gt;</span> size - pos ;<br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> size = pos;<br>&#125;<br><br>void linkString::merge(Node *p)&#123;<br>    NO<span class="hljs-function"><span class="hljs-title">de</span> *tmp = p -&gt;</span> next;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(tmp -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> + p -&gt;</span> size &lt;= nodeSize)&#123;<br>        <span class="hljs-function"><span class="hljs-title">for</span>(int i = p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span>; i &lt; tmp-&gt;</span><span class="hljs-function"><span class="hljs-title">size</span> + p -&gt;</span> size; i ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[i] = tmp -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[i - p -&gt;</span> size];<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> = tmp -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span> + p -&gt;</span> size;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = tmp -&gt;</span> next;<br>        delete tmp;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>⭐下面是比较重要的insert和remove的实现：</p><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><code class="hljs xl">void linkString::insert(int start,const linkString &amp;s)&#123;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span>||start &gt;= len)&#123;<br>        return;<br>    &#125;<br><br>    Node *p;<br>    Node *tmp;<br>    N<span class="hljs-function"><span class="hljs-title">ode</span> *stmp = s.head -&gt;</span> next;<br>    int pos;<br><br>    findpos(start,pos,p);<br>    split(p,pos);<br>    <span class="hljs-function"><span class="hljs-title">tmp</span> = p -&gt;</span> next;<br><br>    <span class="hljs-keyword">while</span>(stmp)&#123;<br>        <span class="hljs-function"><span class="hljs-title">for</span>(pos = 0;pos &lt; stmp -&gt;</span> size;pos ++)&#123;<br>            <span class="hljs-function"><span class="hljs-title">if</span>(pos == p -&gt;</span> size)&#123;<br>                <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next = new Node(nodeSize);<br>            &#125;<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">data</span>[p -&gt;</span> <span class="hljs-function"><span class="hljs-title">size</span>] = stmp -&gt;</span> <span class="hljs-keyword">data</span>[pos];<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> size ++;<br>        &#125;<br>        <span class="hljs-function"><span class="hljs-title">stmp</span> = stmp -&gt;</span> next;<br>    &#125;<br><br>    len += s.len;<br>    merge(p);<br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> next = tmp;<br>&#125;<br><br>void linkString::remove(int start,int num)&#123;<br>    <span class="hljs-keyword">if</span>(start &lt; <span class="hljs-number">0</span>||start &gt;= len)&#123;<br>        return;<br>    &#125;<br>    Node *p;<br>    int pos;<br>    findPos(start,pos,p);<br>    split(p,pos);<br><br>    <span class="hljs-keyword">if</span>(start + num &gt; len)&#123;<br>        num = len - start;<br>        len = start;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        len -= num;<br>    &#125;<br><br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>        N<span class="hljs-function"><span class="hljs-title">ode</span> *tmp = p -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">if</span>(num - tmp-&gt;</span>size &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-function"><span class="hljs-title">num</span> -= tmp -&gt;</span> size;<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = tmp -&gt;</span> next;<br>            delete tmp;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            split(tmp,num);<br>            <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = tmp -&gt;</span> next;<br>            delete tmp;<br>            break;<br>        &#125;<br>    &#125;<br>    merge(p);<br>&#125;<br></code></pre></td></tr></table></figure><p>重载运算符部分与顺序实现类似，较容易，就不写了（bushi）。又一遍块状链表真是把人快搞死了😅，真难写啊呜呜呜…字符串相关算法（kmp，字符串哈希等）上学期上机课有过介绍，就不会再出现了（偷懒😋）</p><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>CSDN:<a href="https://blog.csdn.net/yf210yf/article/details/8777131">https://blog.csdn.net/yf210yf/article/details/8777131</a><br>CSDN:<a href="https://blog.csdn.net/tuolaji8/article/details/51362698">https://blog.csdn.net/tuolaji8/article/details/51362698</a></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>String</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构2</title>
    <link href="/2025/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/"/>
    <url>/2025/02/20/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%842/</url>
    
    <content type="html"><![CDATA[<h1 id="数据结构2-线性表"><a href="#数据结构2-线性表" class="headerlink" title="数据结构2 线性表"></a>数据结构2 线性表</h1><h2 id="线性表"><a href="#线性表" class="headerlink" title="线性表"></a>线性表</h2><p>线性表的抽象类中，少了构造函数（对应create函数），多了析构函数。我们将create函数交给了具体类的构造函数。那为什么要加析构函数呢？这里的虚析构函数是为了防止派生类中出现内存泄漏。计算机看到抽象类的析构函数时，才回去找到派生类中的析构函数，防止派生类出现内存泄漏。<br><code>virtual ~list()&#123;&#125;;</code></p><h3 id="什么是顺序实现？"><a href="#什么是顺序实现？" class="headerlink" title="什么是顺序实现？"></a>什么是顺序实现？</h3><p>线性表中结点存放在存储器上一块连续的空间中，即一个<strong>数组</strong>。且这个数组一定是动态数组。借助存储空间的连续性，结点可以按照其逻辑顺序依次存放。顺序表类的定义同样不太常见，是一个类模板的继承。在实现时，我们需要注意顺序存储的容量问题，有2种解决方法，要么不执行操作（这不好吧），要么让用户觉得这是一个无限的空间，即程序员需要增设一个扩大空间的函数。<br>但顺序表同样存在一个问题，当执行insert操作时，最坏时间复杂度达到了O(N)，remove操作也同样如此，所以当执行插入删除操作次数较少时，适合用顺序实现（静态的）</p><h3 id="什么是链接实现"><a href="#什么是链接实现" class="headerlink" title="什么是链接实现"></a>什么是链接实现</h3><p>每个结点存放在独立的存储空间中，结点间的逻辑关系依靠存储单元中附加的指针给出。通常用链表实现，具体有单链表、双链表和循环链表</p><p>Wait to be updated…</p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure7</title>
    <link href="/2025/02/19/Data-Structure7/"/>
    <url>/2025/02/19/Data-Structure7/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：新学期第一篇DS！写于物理学实验绪论课上😋"><a href="#Before：新学期第一篇DS！写于物理学实验绪论课上😋" class="headerlink" title="Before：新学期第一篇DS！写于物理学实验绪论课上😋"></a>Before：新学期第一篇DS！写于物理学实验绪论课上😋</h5><h1 id="Data-Structure-7-队列"><a href="#Data-Structure-7-队列" class="headerlink" title="Data Structure 7 队列"></a>Data Structure 7 队列</h1><h2 id="队列的定义"><a href="#队列的定义" class="headerlink" title="队列的定义"></a>队列的定义</h2><p>队列是一种特殊的<strong>线性表</strong>，插入限定在表的一端，删除限定在表的另一端；允许进行插入的一端成为<strong>队尾</strong>，允许进行删除的一端称为<strong>队头</strong>；位于队头的元素称为<strong>队头元素</strong>，位于队尾的元素称为<strong>队尾元素</strong>。因为这一性质，队列也被称为FIFO表（先进先出）。<br><img src="/img/%E9%98%9F%E5%88%97.png" alt="队列示意图"><br>队列的基本操作有如下5种：</p><ul><li>创建一个队列create()</li><li>入队enQueue(x)：将x插入队尾</li><li>出队deQueue()：删除队头元素</li><li>读队头元素getHead()</li><li>判空isEmpty()</li></ul><p>下面是队列的抽象类定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">queue</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">deQueue</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">getHead</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">queue</span>();<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="顺序队列的存储实现-用一维数组实现"><a href="#顺序队列的存储实现-用一维数组实现" class="headerlink" title="顺序队列的存储实现 用一维数组实现"></a>顺序队列的存储实现 用一维数组实现</h2><p>1.队头位置固定<br>如下图所示：<br><img src="/img/%E9%98%9F%E5%A4%B40.png" alt="队头固定在位置0"><br>入队、读取队头元素、判空操作的复杂度均为O(1)，而入队操作的复杂度为O(N)，其实现方式类似于vector类的实现，故在这里不做具体实现<br>2.队头位置不固定的顺序实现<br>一旦入队后，存储位置保持不变，而队头位置在变化，只需增加一个变量front，用于存储队头位置，这样一来所有操作的复杂度均为O(1)<br>如下图所示：<br><img src="/img/%E9%98%9F%E5%A4%B4%E4%B8%8D%E5%9B%BA%E5%AE%9A.png" alt="队头位置不固定"><br>但是这种做法的弊端在于空间很快会被用完，空间利用率低，于是我们有了：<br>3.循环队列 <strong>最常用方案</strong><br>我们可以将数列看作是首尾相连的，利用前面的空间，这样每次出队操作，有<code>front = (front + 1)%MaxSize;</code><br>如下图所示：<br><img src="/img/%E5%BE%AA%E7%8E%AF%E9%98%9F%E5%88%97.png" alt="循环队列"><br>但是这会带来一个问题，就是队空和队满是，均有<code>front == rear</code>，两种情况无法区分。这时候我们可以联想在链表实现时我们构建的head结点，不存储元素。同样这种思想可以应用在这里，我们可以牺牲一个空间单元，规定front指向的单元不能存储元素，作为服务台，这样一来，队满的条件为：<br><code>(rear + 1)%MaxSize == front</code><br>队伍为空的条件为：<br><code>rear == front</code><br>下面给出循环队列的定义：</p><figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqQueue</span>: <span class="hljs-keyword">public</span> queue&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        elemType *elem;<br>        <span class="hljs-type">int</span> front,rear;<br>        <span class="hljs-type">int</span> MaxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">seqQueue</span>(<span class="hljs-type">int</span> size = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqQueue</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">deQueue</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">getHead</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="循环队列的具体实现"><a href="#循环队列的具体实现" class="headerlink" title="循环队列的具体实现"></a>循环队列的具体实现</h2><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">seqQueue</span>(<span class="hljs-title">int</span> <span class="hljs-title">size</span>)</span>&#123;<br>    elem = new elemType[size];<br>    MaxSize = size;<br>    front = <span class="hljs-number">0</span>;<br>    rear = <span class="hljs-number">0</span>;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">seqQueue</span>()</span>&#123;<br>    <span class="hljs-keyword">delete</span> []elem;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">enQueue</span>(<span class="hljs-title">const</span> <span class="hljs-title">elemType</span>&amp; <span class="hljs-title">x</span>)</span>&#123;<br>    <span class="hljs-keyword">if</span>((rear + <span class="hljs-number">1</span>)<span class="hljs-variable">%MaxSize</span> == front)&#123;<br>        <span class="hljs-regexp">//</span> 队伍已满<br>        doubleSpace(); <span class="hljs-regexp">//</span>扩大空间<br>    &#125;<br>    rear = (rear + <span class="hljs-number">1</span>)<span class="hljs-variable">%MaxSize</span>;<br>    elem[rear] = <span class="hljs-keyword">x</span>;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">elemType</span> <span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">deQueue</span>()</span>&#123;<br>    <span class="hljs-keyword">if</span>(!isEmpty())&#123;<br>        front = (front + <span class="hljs-number">1</span>)<span class="hljs-variable">%MaxSize</span>;<br>        <span class="hljs-keyword">return</span> elem[front];<br>    &#125;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">elemType</span> <span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">getHead</span>() <span class="hljs-title">const</span></span>&#123;<br>    <span class="hljs-keyword">return</span> elem[(front + <span class="hljs-number">1</span>)<span class="hljs-variable">%MaxSize</span>];<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">bool</span> <span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">isEmpty</span>() <span class="hljs-title">const</span></span>&#123;<br>    <span class="hljs-keyword">return</span> front == rear;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">seqQueue</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">doubleSpace</span>()</span>&#123;<br>    elemType *tmp = elem;<br>    elem = new elemType[<span class="hljs-number">2</span> * MaxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>;i &lt;= MaxSize; i ++)&#123;<br>        elem[i] = tmp[(front + i)<span class="hljs-variable">%MaxSize</span>];<br>    &#125;<br>    <span class="hljs-keyword">delete</span> []tmp;<br>    front = <span class="hljs-number">0</span>;<br>    rear = MaxSize;<br>    MaxSize *= <span class="hljs-number">2</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="队列的链接实现"><a href="#队列的链接实现" class="headerlink" title="队列的链接实现"></a>队列的链接实现</h2><p>和上一章节讨论的栈的链接实现类似，链接队列同样用单链表实现，将单链表的表头作为队头，表尾作为队尾（出于时间复杂度均控制在O(1)的考虑），下面是链接队列的示意图：<br><img src="/img/%E9%93%BE%E6%8E%A5%E9%98%9F%E5%88%97.png" alt="链接队列"><br>类似地，给出链接队列的定义：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">linkQueue</span>: <span class="hljs-keyword">public</span> queue&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">Node</span>&#123;<br>            elem data;<br>            Node *next;<br>            <span class="hljs-built_in">Node</span>(<span class="hljs-type">const</span> elemType&amp; x,node *N = <span class="hljs-literal">nullptr</span>)&#123;<br>                data = x;<br>                next = N;<br>            &#125;<br>            <span class="hljs-built_in">Node</span>()&#123;<br>                next = <span class="hljs-literal">nullptr</span>;<br>            &#125;<br>            ~<span class="hljs-built_in">Node</span>()&#123;&#125;<br>        &#125;;<br>        node *front;<br>        node *rear;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">linkQueue</span>();<br>        ~<span class="hljs-built_in">linkQueue</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">deQueue</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">getHead</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><p>下面是具体的链接队列实现：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">linkQueue</span>()&#123;<br>    front = <span class="hljs-literal">null</span>ptr;<br>    rear = <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::~<span class="hljs-symbol">linkQueue</span>()&#123;<br>    Node *tmp;<br>    <span class="hljs-keyword">while</span>(front != <span class="hljs-literal">null</span>ptr)&#123;<br>        tmp = front;<br>        front = front -&gt; next;<br>        delete tmp;<br>    &#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">enQueue</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span>&amp; <span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(rear == <span class="hljs-literal">null</span>ptr)&#123;<br>        front = new node(x);<br>        rear =  front;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        rear -&gt; next =  new node(x);<br>        rear = rear -&gt; next;<br>    &#125;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">deQueue</span>()&#123;<br>    Node *p = front;<br>    front = front -&gt; next;<br>    <span class="hljs-keyword">if</span>(front == <span class="hljs-literal">null</span>ptr)&#123;<br>        rear = <span class="hljs-literal">null</span>ptr;<br>    &#125;<br>    elemType tmp = p -&gt; data;<br>    delete p;<br>    <span class="hljs-keyword">return</span> tmp;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">getHead</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> front -&gt; data; <br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">linkQueue</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> front == <span class="hljs-literal">null</span>ptr;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="STL中的队列"><a href="#STL中的队列" class="headerlink" title="STL中的队列"></a>STL中的队列</h2><p>与栈类似，STL中的队列也是一个容器适配器，借助于list或deque实现。所以同栈一样，在使用stl::queue时，需要指明2个参数，第一个为队列元素类型，第二个为借助的底层容器，若不指明则默认为deque<br>这里是第二次出现deque这个容器了，那么就让我们来了解一下这个似乎我们不常听闻的底层容器吧😄<br>⭐deque是一个双向队列（double-ended queue），可以在队列的两端进行元素的插入和删除操作。deque是C++STL（标准模板库）中的一种容器，可以用于存储各种类型的元素。特点是可以在队列的两端进行元素的操作，并且可以高效地在队列的任意位置进行元素的插入和删除操作。<br>其成员函数有如下这些：</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">push_back</span><span class="hljs-params">()</span></span><span class="hljs-comment">//在队列的尾部插入元素。</span><br><span class="hljs-function"><span class="hljs-title">emplace_front</span><span class="hljs-params">()</span></span><span class="hljs-comment">//与push_front()的作用一样 </span><br><span class="hljs-function"><span class="hljs-title">push_front</span><span class="hljs-params">()</span></span><span class="hljs-comment">//在队列的头部插入元素。</span><br><span class="hljs-function"><span class="hljs-title">emplace_back</span><span class="hljs-params">()</span></span><span class="hljs-comment">//与push_back()的作用一样 </span><br><span class="hljs-function"><span class="hljs-title">pop_back</span><span class="hljs-params">()</span></span><span class="hljs-comment">//删除队列尾部的元素。</span><br><span class="hljs-function"><span class="hljs-title">pop_front</span><span class="hljs-params">()</span></span><span class="hljs-comment">//删除队列头部的元素。</span><br><span class="hljs-function"><span class="hljs-title">back</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回队列尾部元素的引用。</span><br><span class="hljs-function"><span class="hljs-title">front</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回队列头部元素的引用。</span><br><span class="hljs-function"><span class="hljs-title">clear</span><span class="hljs-params">()</span></span><span class="hljs-comment">//清空队列中的所有元素。</span><br><span class="hljs-function"><span class="hljs-title">empty</span><span class="hljs-params">()</span></span><span class="hljs-comment">//判断队列是否为空。</span><br><span class="hljs-function"><span class="hljs-title">size</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回队列中元素的个数。</span><br><span class="hljs-function"><span class="hljs-title">begin</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回头位置的迭代器</span><br><span class="hljs-function"><span class="hljs-title">end</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回尾+1位置的迭代器</span><br><span class="hljs-function"><span class="hljs-title">rbegin</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回逆头位置的迭代器 </span><br><span class="hljs-function"><span class="hljs-title">rend</span><span class="hljs-params">()</span></span><span class="hljs-comment">//返回逆尾-1位置的迭代器 </span><br><span class="hljs-function"><span class="hljs-title">insert</span><span class="hljs-params">()</span></span><span class="hljs-comment">//在指定位置插入元素 </span><br><span class="hljs-function"><span class="hljs-title">erase</span><span class="hljs-params">()</span></span><span class="hljs-comment">//在指定位置删除元素 </span><br></code></pre></td></tr></table></figure><h2 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h2><p>CSDN：<a href="https://blog.csdn.net/H1727548/article/details/130959610">https://blog.csdn.net/H1727548/article/details/130959610</a></p><h2 id="End"><a href="#End" class="headerlink" title="End"></a>End</h2><p>关于队列的应用，后续会结合上机课内容，在算法部分另开一章进行解释</p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Queue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数据结构1</title>
    <link href="/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/"/>
    <url>/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新"><a href="#Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新" class="headerlink" title="Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新"></a>Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新</h5><h2 id="数据结构-1-引言"><a href="#数据结构-1-引言" class="headerlink" title="数据结构 1 引言"></a>数据结构 1 引言</h2><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>集合结构：两两无关<br>线性结构：除首尾元素外，每个元素仅有一个前驱和一个后驱<br>树形结构：除根元素外，每个元素都只有一个前驱，后驱数量不限<br>图型结构：每个元素可以有任意数量的前驱和后驱</p><h3 id="数据结构的操作"><a href="#数据结构的操作" class="headerlink" title="数据结构的操作"></a>数据结构的操作</h3><p>创建和释放：构造函数 + 析构函数<br>更新：插入 更新（修改）删除<br>查找：访问 搜索 遍历</p><h3 id="数据结构存储实现"><a href="#数据结构存储实现" class="headerlink" title="数据结构存储实现"></a>数据结构存储实现</h3><p>存储结点：每个存储结点存放一个数据元素<br>结点间的关系：比如链表中指向next结点的指针是一种链接存储；而vector类中我们使用的是数组存储；而对于集合结构这种杂乱的数据结构时，可用哈希存储，用一个哈希函数将数据元素与元素存储位置关联起来；另外还有索引存储，分别设置数据区和索引区<br>附加信息：比如链表中的头尾结点</p><h3 id="算法效率分析"><a href="#算法效率分析" class="headerlink" title="算法效率分析"></a>算法效率分析</h3><p>三个时间性能：</p><ul><li>最好情况下的时间复杂度</li><li>最坏情况下的时间复杂度</li><li>平均情况下的时间复杂度</li></ul><p>时间复杂度的表示一般有2种方法：<strong>大O表示法</strong>（取运行时间函数的主项）和 F（n）表示法（通常选择比较简单的函数形式）。有：O（1）&lt; O(logN)&lt; O(N)&lt; O(NlogN)&lt; O(N^2)&lt; O(N^3) ; O(2^N)&lt; O(N!)&lt; O(N^N)<br>那么时间复杂度应该如何计算呢?<br>核心在于：在整个程序中找出最复杂、运行时间最长的程序段的时间复杂度<br>空间性能：</p><ul><li>存储被处理数据所需的空间</li><li>实现操作所需的额外空间<br>空间复杂度一般按最坏情况处理，和时间复杂度一样同样使用大O表示法</li></ul><h3 id="经典举例：最大连续子序列和问题"><a href="#经典举例：最大连续子序列和问题" class="headerlink" title="经典举例：最大连续子序列和问题"></a>经典举例：<strong>最大连续子序列和问题</strong></h3><p>方法一：O(N^3)</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> MaxSum;<br>for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-built_in">n</span> ; i ++)&#123;<br>    for(<span class="hljs-built_in">int</span> j = i ; j &lt; <span class="hljs-built_in">n</span> ; j ++)&#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> k = i ; k &lt;= j ; k ++)&#123;<br>            <span class="hljs-built_in">sum</span> += a[k];<br>        &#125; <br>        <span class="hljs-built_in">if</span>(<span class="hljs-built_in">sum</span> &gt; MaxSum)&#123;<br>            MaxSum = <span class="hljs-built_in">sum</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：O(N^2)</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">int</span> MaxSum = <span class="hljs-number">0</span> ;<br>for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-built_in">size</span> ; i ++)&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span> ;<br>    for(<span class="hljs-built_in">int</span> j = i ; j &lt; <span class="hljs-built_in">size</span> ; j ++)&#123;<br>        <span class="hljs-built_in">sum</span> += a[j];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span> &gt; MaxSum )&#123;<br>            MaxSum = <span class="hljs-built_in">sum</span>;<br>            start = i;<br>            <span class="hljs-keyword">end</span> = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法三：分治法 O(NlogN)<br>共有3种情况：</p><ul><li>全部出现在前半部分，直接递归计算</li><li>全部出现在前半部分，直接递归计算</li><li>前半部分开始，后半部分结束</li></ul><p>那么方法也是相对应的：</p><ul><li>递归计算前半部分最大连续子序列和</li><li>递归计算后半部分最大连续子序列和</li><li>通过2个连续循环计算前半部分开始，后半部分结束的最大连续子序列和</li></ul><p>下面是代码实现：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> MaxSum(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> left,<span class="hljs-type">int</span> right ,<span class="hljs-type">int</span> &amp;<span class="hljs-keyword">start</span>,<span class="hljs-type">int</span> &amp;<span class="hljs-keyword">end</span>)&#123;<br>    <span class="hljs-keyword">if</span>(left == right)&#123;<br>        start = left;<br>        end = right;<br>        <span class="hljs-keyword">if</span>(a[left] &gt; <span class="hljs-number">0</span>)&#123;<br>            <span class="hljs-keyword">return</span> left;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> MaxLeft = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> MaxRight = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> MaxLeftTmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> MaxRightTmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> startL,endL,startR,endR;<br>    <span class="hljs-type">int</span> center = (left + right)/<span class="hljs-number">2</span>;<br>    MaxLeft = MaxSum(a,left,center,startL,endL);<br>    MaxRight = MaxSum(a,center + <span class="hljs-number">1</span>,right,startR,endR);<br>    <span class="hljs-type">int</span> leftSum,rightSum;<br>    start = center;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = center;i &gt;= left;i <span class="hljs-comment">--)&#123;</span><br>        leftSum += a[i];<br>        <span class="hljs-keyword">if</span>(leftSum &gt; MaxLeftTmp)&#123;<br>            MaxLeftTmp = leftSum;<br>            start = i; <br>        &#125;<br>    &#125;<br>    end = center + <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = center + <span class="hljs-number">1</span>;i &lt;= right;i ++)&#123;<br>        rightSum += a[i];<br>        <span class="hljs-keyword">if</span>(rightSum &gt; MaxRightTmp)&#123;<br>            MaxRightTmp = rightSum;<br>            end = i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-type">int</span> MaxTmp = MaxLeftTmp + MaxRightTmp;<br>    <span class="hljs-keyword">if</span>(MaxTmp &gt;= MaxLeft &amp;&amp; MaxTmp &gt;= MaxRight)&#123;<br>        <span class="hljs-keyword">return</span> MaxTmp;<br>    &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(MaxLeft &gt;= MaxTmp &amp;&amp; MaxLeft &gt;= MaxRight)&#123;<br>        start = startL;<br>        end = endL;<br>        <span class="hljs-keyword">return</span> MaxLeft;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        start = startR;<br>        end = endR;<br>        <span class="hljs-keyword">return</span> MaxRight;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>计算以下复杂度，得到T(N) &#x3D; 2T(N&#x2F;2) + N; 可以解得复杂度为O（NlogN）</p><p>方法四：穷举法的再优化 O(N)<br>通过一点逻辑判断，我们可以知道，<strong>所有与最大连续子序列毗连的连续子序列一定有负的（或0），否则会包含它们</strong>。故我们可以做出改进：当检测出一个负子序列时，可以直接让start增加到j + 1。这样一来，我们只需要：</p><p>$$<br>一个循环<br>$$</p><p>下面给出代码实现：</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span> MaxSumProcess(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> size)&#123;<br>    <span class="hljs-type">int</span> MaxSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> thisSum = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> start = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> tmp = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> end = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;i &lt; size;i ++)&#123;<br>        thisSum += a[i];<br>        <span class="hljs-keyword">if</span>(thisSum &lt;= <span class="hljs-number">0</span>)&#123;<br>            thisSum = <span class="hljs-number">0</span>;<br>            MaxSum = <span class="hljs-number">0</span>;<br>            tmp = i + <span class="hljs-number">1</span>;<br>        &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(thisSum &gt; MaxSum)&#123;<br>            MaxSum = thisSum;<br>            start = tmp;<br>            end = j;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(start == size)&#123;<br>        MaxSum = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> MaxSum;<br>&#125;<br></code></pre></td></tr></table></figure><p>显然，这种类似于动态规划的方法，时间复杂度达到了O(N)!</p><h3 id="数据结构的实现"><a href="#数据结构的实现" class="headerlink" title="数据结构的实现"></a>数据结构的实现</h3><p>过程化程序设计 VS 面向对象程序设计：过程化程序设计通过定义一组变量进行存储实现，通过一组算法进行运算实现，但是无法将数据结构定义成一个真正的程序，程序员必须掌握每个数据结构的实现。而面向对象的程序设计将存储与运算封装为类，每个数据结构可表示为一个类模板，有利于代码的重用。<br>每种数据结构用一个抽象类描述，指出该数据结构提供的操作。而每种数据结构可以有若干种实现的方法，每种实现就是一个类（从抽象类继承）。</p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic3</title>
    <link href="/2025/02/11/Java-Basic3/"/>
    <url>/2025/02/11/Java-Basic3/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：Welcome-back-to-JaneZ’s-Java-Learning"><a href="#Before：Welcome-back-to-JaneZ’s-Java-Learning" class="headerlink" title="Before：Welcome back to JaneZ’s Java Learning!"></a>Before：Welcome back to JaneZ’s Java Learning!</h5><h2 id="Java-Basic-3"><a href="#Java-Basic-3" class="headerlink" title="Java Basic 3"></a>Java Basic 3</h2><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>Public VS Private ————对于fields和methods而言<br>Public: 可以被其他对象调用  Private: 只可被类内成员调用<br>那么为什么要对访问权限进行公有和私有的区分呢？</p><ul><li>为了保护私有信息</li><li>声明其他对象应该如何调用当前类</li><li>将实现与接口分离————意味着你可以自由地修改类的内部实现，而不影响使用该类的其他代码，只要公共接口保持不变</li></ul><h3 id="类作用域"><a href="#类作用域" class="headerlink" title="类作用域"></a>类作用域</h3><p>在函数中定义的变量只能在该函数中进行访问，而在类中定义的变量可以在类的所有函数中进行访问<br>函数级别的变量只在函数内部有效，而类级别的变量在整个类中都有效</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>用于引用当前对象的实例，其作用在于：</p><ul><li>明确作用域（Clarifies scope）：<br>当类中的成员变量和方法参数同名时，使用this关键字可以明确指出要访问的是成员变量而不是参数。</li><li>表示“my object”：<br>this关键字用于引用当前对象，即调用方法的对象。</li></ul><h3 id="Java的包-Package"><a href="#Java的包-Package" class="headerlink" title="Java的包 Package"></a>Java的包 Package</h3><p>类似于C++中的namespace(名字空间)</p><ul><li>每个类都属于一个包，包是组织类的一种形式</li><li>同一包中的类具有相似的用途。例如，所有与图形用户界面相关的类可能放在一个名为 gui 的包中。</li><li>包只是目录</li><li>需要导入其他包中的类<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> com.example.data;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataModel</span> </span>&#123;<br>    // 数据模型相关的代码<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="包的定义"><a href="#包的定义" class="headerlink" title="包的定义"></a>包的定义</h4><p>在C++中，我们有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> myapp &#123;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125; <span class="hljs-comment">// namespace myapp</span><br></code></pre></td></tr></table></figure><p>而相应的在Java中，我们有：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.example.myapp; <span class="hljs-comment">// 文件路径</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义的基本格式为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> path.to.package.foo<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="包的使用方式"><a href="#包的使用方式" class="headerlink" title="包的使用方式"></a>包的使用方式</h4><p>在C++中，我们有<code>using namespace std</code><br>而相应的在Java中，我们有：<code>import path.to.package.foo.Foo</code></p><h4 id="为什么包？（好奇怪的句子"><a href="#为什么包？（好奇怪的句子" class="headerlink" title="为什么包？（好奇怪的句子"></a>为什么包？（好奇怪的句子</h4><ul><li>组合相似功能<br>包可以用来将功能相似的类组合在一起。这样做可以提高代码的模块化，使得相关功能更加集中和易于管理。</li><li>区分相似名称<br>包还可以用来区分具有相似名称的类，以避免命名冲突。<br>例如，shopping.List 和 packing.List 这两个类虽然名称相似，但它们位于不同的包中，分别代表购物清单和打包清单。通过使用包，我们可以清楚地区分这两个类，即使它们的名称相同。</li></ul><h4 id="特殊的包"><a href="#特殊的包" class="headerlink" title="特殊的包"></a>特殊的包</h4><p>首先，同一包内的类可以互相访问。<br>其次，还有一个比较特殊的包：java.lang<br>所有位于 java.lang 包中的类都不需要显式导入就可以在任何地方使用。这是Java语言规范的一部分，java.lang 包被视为Java程序的基础包，其中包含了一些最常用的类，如 String、Math、System 等。</p><h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><p>起因是在使用deepseek时看到了这样一个界面：<br><img src="/img/deepseekAPI.png" alt="deepseekAPI"><br>一直对<strong>API</strong>为何物充满了疑问，出于好奇还充了10块钱买了五百万tokens，但并不知道应该如何使用😅（最近资源紧张似乎已经买不了了🤣）<br>在看到这里时十分激动，于是立刻开始了学习！<br>首先，我先问了deepseek✌，API是什么？<br><img src="/img/APIanswer.png" alt="APIanswer"><br><strong>Application Programing Interface!</strong><br>好像也没有那么抽象嘛？我的理解是就是一种很不错的工具，通过标准化接口简化开发，提升效率，广泛应用于数据访问、服务集成和微服务架构中。而我们要讨论的Java API，其实就类似于C++&#x2F;Python中的标准库（standard library）<br>Java语言包含了大量的包（packages）和类（classes），开发者可以利用Java提供的现有类来完成特定的任务，而不需要从头开始编写代码，这样可以节省时间和努力。<br>C++中的标准模板库（STL）我们已经挺熟悉的了，那么接下来，让我们看看Java API中有什么相应的数据结构：<br>1.ArrayList<br>我们知道在C++中有std::vector，可以动态地调节数组的大小，而在Java中，有一个具有同样功能的容器————<strong>ArrayList</strong>，其用法如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ArrayList&lt;Book&gt; books = <span class="hljs-keyword">new</span> ArrayList&lt;Book&gt;();<br>books.<span class="hljs-keyword">add</span>(b);<br>books.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span> , a); <span class="hljs-comment">//相当于insert</span><br>books.<span class="hljs-keyword">remove</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//相当于remove</span><br></code></pre></td></tr></table></figure><p>2.Set<br>同样的，我们知道在C++中有std::set，表示集合，而在Java中，有一个具有相似功能的容器————<strong>Set</strong>，其特点如下：</p><ul><li>集合中每个对象只存储一份，即不允许重复</li><li>集合中的对象没有索引，不能通过索引访问对象<br>下面是两种主要的Set实现：</li><li>TreeSet，对应C++中的std::set  有序</li><li>HashSet，对应C++中的std::unordered_set  无序但查找更快</li></ul><p>3.Map<br>更加同样的，我们知道在C++中有std::map，表示映射，而在Java中，有一个具有相似功能的容器————<strong>Map</strong>，其特点如下：</p><ul><li>存储的是键值对（key-value pair）</li><li>可以通过查找键（key）来获取对应的值（value）<br>下面是两种主要的Map实现：</li><li>TreeMap，对应C++中的std::map  有序</li><li>HashMap，对应C++中的std::unordered_map  无序但查找更快</li></ul>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>OOP</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure6</title>
    <link href="/2025/02/10/Data-Structure6/"/>
    <url>/2025/02/10/Data-Structure6/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎"><a href="#Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎" class="headerlink" title="Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎"></a>Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎</h5><h2 id="Data-Structure-6-栈的链接实现及栈的应用"><a href="#Data-Structure-6-栈的链接实现及栈的应用" class="headerlink" title="Data Structure 6 栈的链接实现及栈的应用"></a>Data Structure 6 栈的链接实现及栈的应用</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>在上一章节的内容中，我们学习了顺序栈相关知识，知道顺序栈的实现本质是在维护一个动态数组，那么在本章节中要讲解的<strong>链接栈</strong>与顺序栈的实现有何区别呢？</p><h3 id="链接栈的存储实现"><a href="#链接栈的存储实现" class="headerlink" title="链接栈的存储实现"></a>链接栈的存储实现</h3><p>由于与栈相关的操作都是在栈顶进行的，所以并不需要直接前驱，使用单链表即可，也不需要头结点。下图是一个存储的图示：<br><img src="/img/%E9%93%BE%E6%8E%A5%E6%A0%88%E5%AD%98%E5%82%A8.png" alt="链接栈存储"><br>话不多说，上链接栈定义代码！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">linkStack</span>:<span class="hljs-keyword">public</span> stack&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>            node *next;<br>            elemType data;<br>            <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType &amp;x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>                next = n;<br>                data = x;<br>            &#125;<br>            <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>            ~<span class="hljs-built_in">node</span>();<br>        &#125;;<br><br>        node *top_p; <span class="hljs-comment">//栈顶结点</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">linkStack</span>();<br>        ~<span class="hljs-built_in">linkStack</span>();<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链接栈运算实现"><a href="#链接栈运算实现" class="headerlink" title="链接栈运算实现"></a>链接栈运算实现</h3><p>构造函数&amp;析构函数：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">linkStack</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">linkStack</span>()</span>&#123;<br>    top_p = nullptr;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">linkStack</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">linkStack</span>()</span>&#123;<br>    node *<span class="hljs-keyword">q</span>;<br>    <span class="hljs-keyword">while</span>(t != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = top_p;<br>        top_p = top_p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">q</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进栈、出栈、判空、取栈顶元素：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">push</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>)&#123;<br>    top_p = new node(x , top_p);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">pop</span>()&#123;<br>    node *p = top_p;<br>    top_p = top_p -&gt; next;<br>    elemType x = p -&gt; data;<br>    delete p;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">top</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="STL中的栈"><a href="#STL中的栈" class="headerlink" title="STL中的栈"></a>STL中的栈</h3><p>在STL中，借助于其他容器存储数据的容器称作<strong>容器适配器</strong>。栈借助线性表进行存储，故属于容器适配器。栈可以借助的容器有vector、list和deque。在调用STL::stack时，如果不指定第二个参数，则默认是用deque来存储数据。<br>For example: <code>$stack&lt;int , vector&lt;int&gt;&gt;$</code> <code>$stack&lt;int , list&lt;int&gt;&gt;$</code></p><h3 id="栈的应用"><a href="#栈的应用" class="headerlink" title="栈的应用"></a>栈的应用</h3><p>1.递归调用</p><figure class="highlight dart"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs dart"><span class="hljs-keyword">void</span> printInt(<span class="hljs-built_in">int</span> <span class="hljs-built_in">num</span>)&#123;<br>    <span class="hljs-keyword">if</span>(<span class="hljs-built_in">num</span> &lt; <span class="hljs-number">10</span>)&#123;<br>        cout.put(<span class="hljs-built_in">num</span>);<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        printInt(<span class="hljs-built_in">num</span>/<span class="hljs-number">10</span>);<br>        cout.put(<span class="hljs-built_in">num</span>%<span class="hljs-number">10</span> + <span class="hljs-string">&#x27;0&#x27;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>这是应用递归函数实现对一个正整数的打印的函数<br>2.括号配对 balance类的定义</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">balance</span>&#123;<br>    <span class="hljs-keyword">private</span>:<br>        ifstream fin; <span class="hljs-comment">//待检测文件流</span><br>        <span class="hljs-built_in">int</span> curremtLine; <span class="hljs-comment">//当前处理的行号</span><br>        <span class="hljs-built_in">int</span> errors; <span class="hljs-comment">//现有的错误数量</span><br>    <span class="hljs-keyword">struct</span> Symbol&#123; <span class="hljs-comment">//栈元素类型</span><br>        <span class="hljs-built_in">char</span> token;<br>        <span class="hljs-built_in">int</span> TheLine; <br>    &#125;;<br>    <span class="hljs-built_in">enum</span> Slash&#123;<br>        SlashSlash; <span class="hljs-comment">//C++注释</span><br>        SlashStar; <span class="hljs-comment">//C注释</span><br>    &#125;;<br>    <span class="hljs-function"><span class="hljs-built_in">bool</span> <span class="hljs-title">CheckMatch</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> Symb I, <span class="hljs-built_in">char</span> Symb2, <span class="hljs-built_in">int</span> Line I, <span class="hljs-built_in">int</span> Line2</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-built_in">char</span> <span class="hljs-title">GetNextSymbol</span>()</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">PutBackChar</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> ch</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SkipComment</span>(<span class="hljs-params"><span class="hljs-built_in">enum</span> CommentType type</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SkipQuote</span>(<span class="hljs-params"><span class="hljs-built_in">char</span> type</span>)</span>;<br>    <span class="hljs-function"><span class="hljs-built_in">char</span> <span class="hljs-title">NextChar</span>()</span>;<br><br>    <span class="hljs-keyword">public</span>:<br>        balance(<span class="hljs-keyword">const</span> <span class="hljs-built_in">char</span> *s);<br>        <span class="hljs-function"><span class="hljs-built_in">int</span> <span class="hljs-title">CheckBalance</span>()</span>; <span class="hljs-comment">//检查括号是否匹配</span><br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title">noFile</span>&#123;&#125;; <span class="hljs-comment">//若检查文件不存在，抛出此异常</span><br></code></pre></td></tr></table></figure><p>具体实现就不给出了（还是太懒了😢😢😢）</p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次交流</title>
    <link href="/2025/02/09/%E4%B8%80%E6%AC%A1%E4%BA%A4%E6%B5%81/"/>
    <url>/2025/02/09/%E4%B8%80%E6%AC%A1%E4%BA%A4%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。"><a href="#Before-今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。" class="headerlink" title="Before: 今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。"></a>Before: 今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。</h5><p>🦈🐬🦭🐳🐋🐟🐠🐡🦐🦑🐙🦞🦀🐚🪸🪼</p><h1 id="大一上学期"><a href="#大一上学期" class="headerlink" title="大一上学期"></a>大一上学期</h1><h2 id="收获-🎖️"><a href="#收获-🎖️" class="headerlink" title="收获 🎖️"></a>收获 🎖️</h2><h3 id="学习层面"><a href="#学习层面" class="headerlink" title="学习层面"></a>学习层面</h3><ul><li>新鲜的知识 ———— 数分 线代 程设</li><li>从未接触过的知识体系</li><li>新的看待科学的眼光</li><li>各类工具的使用</li></ul><h3 id="同学交往"><a href="#同学交往" class="headerlink" title="同学交往"></a>同学交往</h3><ul><li>一些玩的很好的朋友</li><li>一些大佬请教问题</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>学会了一些chore ———— 很多事情只能靠自己，不做不行</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>渐渐地在从高中生思维走出来，慢慢适应大学生活 </p><h2 id="遗憾-😢"><a href="#遗憾-😢" class="headerlink" title="遗憾 😢"></a>遗憾 😢</h2><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>时间分配很不合理，缺少规划意识</p><h3 id="急于求成"><a href="#急于求成" class="headerlink" title="急于求成"></a>急于求成</h3><p>学习浮躁，喜欢和他人作比较，经常莫名其妙地焦虑</p><h2 id="针对性措施"><a href="#针对性措施" class="headerlink" title="针对性措施"></a>针对性措施</h2><h3 id="时间管理-1"><a href="#时间管理-1" class="headerlink" title="时间管理"></a>时间管理</h3><ul><li>列 todoList</li><li>每天最后可以以日记的形式对一天进行复盘</li></ul><h3 id="急于求成-1"><a href="#急于求成-1" class="headerlink" title="急于求成"></a>急于求成</h3><ul><li>“榜样的力量” 找到一个比自己优秀的人，像TA看齐 ————目标意识</li><li>学业上稳扎稳打，不要一味追求速度，重视完成的质量</li></ul><h1 id="新学期（大一下学期）"><a href="#新学期（大一下学期）" class="headerlink" title="新学期（大一下学期）"></a>新学期（大一下学期）</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="做出改变"><a href="#做出改变" class="headerlink" title="做出改变"></a>做出改变</h3><ul><li>减少无意义的社交</li><li>对问题进行更加深入的思考 ————深度思考</li></ul><h3 id="温故而知新"><a href="#温故而知新" class="headerlink" title="温故而知新"></a>温故而知新</h3><ul><li>反思旧学期存在的问题</li><li>为新学期指定可执行性强的计划</li></ul><h3 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h3><ul><li>多与老师、学长、同学进行交流</li><li>一个问题想3遍</li></ul><h2 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h2><h3 id="每天11-30睡"><a href="#每天11-30睡" class="headerlink" title="每天11:30睡"></a>每天11:30睡</h3><p>😴😴😴</p><h3 id="每天6-30-7-00起床"><a href="#每天6-30-7-00起床" class="headerlink" title="每天6:30 - 7:00起床"></a>每天6:30 - 7:00起床</h3><p>🛏️🛏️🛏️</p><h3 id="（无特殊情况）图书馆待到10-30"><a href="#（无特殊情况）图书馆待到10-30" class="headerlink" title="（无特殊情况）图书馆待到10:30"></a>（无特殊情况）图书馆待到10:30</h3><p>🧑‍💻👨‍💻👩‍💻</p><h3 id="尽量少点外卖，多去食堂"><a href="#尽量少点外卖，多去食堂" class="headerlink" title="尽量少点外卖，多去食堂"></a>尽量少点外卖，多去食堂</h3><p>🍚🍛🍙</p><h3 id="（由于身体原因）禁止任何含咖啡因的食物"><a href="#（由于身体原因）禁止任何含咖啡因的食物" class="headerlink" title="（由于身体原因）禁止任何含咖啡因的食物"></a>（由于身体原因）禁止任何含咖啡因的食物</h3><p>❌❌❌</p><h3 id="按时服用药物"><a href="#按时服用药物" class="headerlink" title="按时服用药物"></a>按时服用药物</h3><p>💊💊💊</p><h2 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h2><h3 id="“立志”"><a href="#“立志”" class="headerlink" title="“立志”"></a>“立志”</h3><p>种下一个梦想，为之奋斗<br>追逐心中的那束光</p><h3 id="“正能量”"><a href="#“正能量”" class="headerlink" title="“正能量”"></a>“正能量”</h3><p>做一个快乐、正面、积极、幸福、知足的人❤️</p>]]></content>
    
    
    
    <tags>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic2</title>
    <link href="/2025/02/09/Java-Basic2/"/>
    <url>/2025/02/09/Java-Basic2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：快开学了（-还没玩够呢呜呜呜😢-）"><a href="#Before：快开学了（-还没玩够呢呜呜呜😢-）" class="headerlink" title="Before：快开学了（ 还没玩够呢呜呜呜😢 ）"></a>Before：快开学了（ 还没玩够呢呜呜呜😢 ）</h5><p>下面是一点碎碎念吧：<br>昨天和fz学弟吃饭，震惊于学弟对物竞的执着，想必是没法把学弟骗来泥交了吧🤣🤣🤣。想起了3年前的自己对数竞也是一样的痴迷，励志要把一生都献给纯数研究。当时应该还在学物竞，尝试着数物双修。还是在寒假后放弃了物理，选了数学，当然最后也只以高二的省一草草收场。有时候想，如果当时跟大多数人一样学了物理，大概至少也有个国一吧。经常嘴上说自己物理差数学好，其实细想自己还是挺喜欢物竞的。下学期也是终于有物理课了，希望能借此找到以前对物理的热爱❤️</p><h2 id="Java-Basic-2"><a href="#Java-Basic-2" class="headerlink" title="Java Basic 2"></a>Java Basic 2</h2><h3 id="Good-Programing-Style-代码风格"><a href="#Good-Programing-Style-代码风格" class="headerlink" title="Good Programing Style 代码风格"></a><strong>Good Programing Style 代码风格</strong></h3><ul><li>Rule 1 : 使用好的&#x2F;有意义的变量名</li><li>Rule 2 : 正确的缩进  Ctrl + shift + F 可自动调节缩进</li><li>Rule 3 : 空格 （特别是在复杂的表达式中） 空行 增强可读性</li><li>Rule 4 : 不要重复测试 可能存在多个条件判断中不必要的重复检查等问题，使得代码不够简洁和高效。</li></ul><h3 id="循环-Loops"><a href="#循环-Loops" class="headerlink" title="循环 Loops"></a>循环 Loops</h3><p>Java中有几个循环语句，与C ++ 中几乎一致</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">( condition )</span></span>&#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(initialization; condition ; updata)</span></span>&#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h4><p>与C ++ 中用法一致</p><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><p>与C ++ 同样都是 0 ~ base - 1</p><h4 id="Arrays-的定义"><a href="#Arrays-的定义" class="headerlink" title="Arrays 的定义"></a>Arrays 的定义</h4><p>int[] values;  &#x2F;&#x2F;整型一维数组<br>int[][] values; &#x2F;&#x2F;整型二维数组<br>如果想创建一个固定大小的数组，使用运算符 new<br>int[] values &#x3D; new int[5];</p><h4 id="Arrays-初始化"><a href="#Arrays-初始化" class="headerlink" title="Arrays 初始化"></a>Arrays 初始化</h4><p>注意：这种方法只能在声明变量时使用：<br>int[] values &#x3D; {12 , 24 , -23 , 47};</p><h4 id="Arrays-访问"><a href="#Arrays-访问" class="headerlink" title="Arrays 访问"></a>Arrays 访问</h4><p>同样是下标访问  values[index]</p><h4 id="length-变量"><a href="#length-变量" class="headerlink" title="length 变量"></a>length 变量</h4><p>Java数组在这里与C++数组存在一点区别：<br>C++中length变量只存在于STL容器中，普通数组并不具备这一变量，但Java中则存在<br>For example:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] <span class="hljs-keyword">values</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">12</span>];<br><span class="hljs-type">int</span> size = <span class="hljs-keyword">values</span>.length;<br></code></pre></td></tr></table></figure><h4 id="String-Array"><a href="#String-Array" class="headerlink" title="String Array"></a>String Array</h4><p>Java中允许字符串数组（C ++ 中并不允许string数组）</p><h3 id="Object-Oriented-Programing-面向对象编程"><a href="#Object-Oriented-Programing-面向对象编程" class="headerlink" title="Object Oriented Programing 面向对象编程"></a>Object Oriented Programing 面向对象编程</h3><h4 id="Why-use-classes"><a href="#Why-use-classes" class="headerlink" title="Why use classes ?"></a>Why use classes ?</h4><p><img src="/img/whyclasses1.png" alt="Why use classes"><br><img src="/img/whyclasses2.png" alt="Why use classes"></p><h4 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class Definition"></a>Class Definition</h4><p><code>Baby myBaby = new Baby();</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baby</span></span>&#123;<br>    fields<br>    methods<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构造函数-constructer"><a href="#构造函数-constructer" class="headerlink" title="构造函数 constructer"></a>构造函数 constructer</h4><ul><li>函数名即为类名</li><li>没有返回值</li><li>通常初始化fields</li><li>每个类至少需要一个构造函数<br>For example:<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Baby</span>&#123;<br>    <span class="hljs-type">String</span> name;<br>    <span class="hljs-type">boolean</span> isMale;<br>    <span class="hljs-built_in">Baby</span>(<span class="hljs-type">String</span> myname , <span class="hljs-type">boolean</span> malebaby)&#123;<br>        name = myname;<br>        isMale = malebaby;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="调用类"><a href="#调用类" class="headerlink" title="调用类"></a>调用类</h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim">public class <span class="hljs-type">Baby</span> <span class="hljs-meta">&#123;...&#125;</span><br><span class="hljs-type">Baby</span> <span class="hljs-type">Jane</span> = new <span class="hljs-type">Baby</span>(<span class="hljs-string">&quot;JaneZ&quot;</span> , <span class="hljs-literal">false</span> );<br><span class="hljs-type">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">Jane</span>.name);<br><span class="hljs-type">Jane</span>.sayhi();<br></code></pre></td></tr></table></figure><h3 id="基本数据类型-VS-引用数据类型"><a href="#基本数据类型-VS-引用数据类型" class="headerlink" title="基本数据类型 VS 引用数据类型"></a>基本数据类型 VS 引用数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>包括 int（整数）、long（长整数）、double（双精度浮点数）、boolean（布尔值）、char（字符）、short（短整数）、byte（字节）、float（单精度浮点数）</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>数组和对象<br>所占的空间比基本数据类型要大的多</p><h3 id="Java-对Object-的存储——引用！"><a href="#Java-对Object-的存储——引用！" class="headerlink" title="Java 对Object 的存储——引用！"></a>Java 对Object 的存储——引用！</h3><p><strong>Reference</strong>: Object的存储位置<br>遵循对对象的引用 &lt;-&gt; 按照指示前往一所房子<br>改变对象中的字段 &lt;-&gt; 挪动房子里的家具</p><h3 id="静态数据类型和函数"><a href="#静态数据类型和函数" class="headerlink" title="静态数据类型和函数"></a>静态数据类型和函数</h3><p>静态字段或函数是为类声明（class declaration）而定义的<br>也就是说，它们属于类本身，而不是类的某个具体实例</p><h4 id="Why-public-static-void-main-String-arguments"><a href="#Why-public-static-void-main-String-arguments" class="headerlink" title="Why public static void main(String[] arguments)"></a>Why <code>public static void main(String[] arguments)</code></h4><ul><li>无需实例化：程序启动时，Java 虚拟机（JVM）需要直接调用 main 方法来执行程序。如果 main 方法不是 static，JVM 就需要先实例化一个类的对象，然后才能调用 main 方法，但在程序启动初期，没有合适的机制来创建对象，所以将 main 声明为 static，JVM 可以直接通过类名调用它，无需创建类的实例。</li><li>内存和性能考虑：静态方法在类加载时就已经绑定到类上，调用时不需要额外的对象创建开销，这有助于提高程序启动的效率，并且在程序启动阶段也更符合内存管理和性能优化的需求。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure5</title>
    <link href="/2025/02/09/Data-Structure5/"/>
    <url>/2025/02/09/Data-Structure5/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ今天更新频率有点高啊😎😎😎（-这么良心的up还不快三连一下🤣🤣🤣-）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（-应该坐完了永初路——福建路这一段-），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（-nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕"><a href="#Before：JaneZ今天更新频率有点高啊😎😎😎（-这么良心的up还不快三连一下🤣🤣🤣-）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（-应该坐完了永初路——福建路这一段-），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（-nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕" class="headerlink" title="Before：JaneZ今天更新频率有点高啊😎😎😎（ 这么良心的up还不快三连一下🤣🤣🤣 ）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（ 应该坐完了永初路——福建路这一段 ），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（ nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕"></a>Before：JaneZ今天更新频率有点高啊😎😎😎（ 这么良心的up还不快三连一下🤣🤣🤣 ）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（ 应该坐完了永初路——福建路这一段 ），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（ nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕</h5><p><img src="/img/Metro.png" alt="清凉山地铁站"></p><h2 id="Data-Structure-5-栈"><a href="#Data-Structure-5-栈" class="headerlink" title="Data Structure 5 栈"></a>Data Structure 5 栈</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><ul><li>一种特殊的线性表，插入删除运算限定在表的某一端进行</li><li>允许进行插入删除操作的一端称为<strong>栈顶</strong>，另一端称为<strong>栈底</strong></li><li>处于栈顶位置中的数据元素称为<strong>栈顶元素</strong>，若栈中没有元素，则称为<strong>空栈</strong></li><li>LIFO表（后进先出表）</li></ul><h3 id="栈的抽象类"><a href="#栈的抽象类" class="headerlink" title="栈的抽象类"></a>栈的抽象类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">stack</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//判栈空</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//进栈</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//出栈</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//取栈顶元素</span><br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">stack</span>(); <span class="hljs-comment">//虚析构函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈的顺序实现"><a href="#栈的顺序实现" class="headerlink" title="栈的顺序实现"></a>栈的顺序实现</h3><p>栈的顺序实现称为<strong>顺序栈</strong><br>顺序栈的实现需要3个变量：</p><ul><li>一个指向栈元素类型的指针（指向动态数组的首地址）</li><li>一个表示数组规模的整型数</li><li>一个表示栈顶位置的整型数<br><img src="/img/%E9%A1%BA%E5%BA%8F%E6%A0%88%E5%AD%98%E5%82%A8.png" alt="顺序栈存储"></li></ul><h4 id="下面是一个顺序栈类的定义"><a href="#下面是一个顺序栈类的定义" class="headerlink" title="下面是一个顺序栈类的定义"></a>下面是一个顺序栈类的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqStack</span> : <span class="hljs-keyword">public</span> stack&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        elemType *elem;<br>        <span class="hljs-type">int</span> top_p;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">seqStack</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqStack</span>();<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p == <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">push</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(top_p == maxSize <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    top_p ++;<br>    elem[top_p] == x;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">pop</span>()&#123;<br>    top_p --;<br>    <span class="hljs-keyword">return</span> elem[top_p + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">top</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> elem[top_p];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">doubleSpace</span>()</span>&#123;<br>    elemType *tmp = elem;<br>    elem = new elemType[<span class="hljs-number">2</span> * maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxSize ; i ++)&#123;<br>        elem[i] = tmp[i];<br>    &#125;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">delete</span> []tmp;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Stack</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure4</title>
    <link href="/2025/02/07/Data-Structure4/"/>
    <url>/2025/02/07/Data-Structure4/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）"><a href="#Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）" class="headerlink" title="Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）"></a>Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）</h5><p><img src="/img/%E5%AD%94%E9%9B%80.png" alt="孔雀"></p><h2 id="Data-Structure-4-约瑟夫环-动态内存分配"><a href="#Data-Structure-4-约瑟夫环-动态内存分配" class="headerlink" title="Data Structure 4 约瑟夫环 动态内存分配"></a>Data Structure 4 约瑟夫环 动态内存分配</h2><h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>约瑟夫环是一个很经典的循环链表问题，初次见于OJ上一道经典的题——春樱对决（ ACMOJ1088 ）<br>下面给出约瑟夫环问题一个最简单的例子（报到3倍数击毙）</p><h4 id="构建循环链表"><a href="#构建循环链表" class="headerlink" title="构建循环链表"></a>构建循环链表</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">head</span> <span class="hljs-operator">=</span> p  new node(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>for(int i <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">; i &lt; n ; i ++)&#123;</span><br>    p <span class="hljs-operator">=</span> p -&gt; next <span class="hljs-operator">=</span> new node(i)<span class="hljs-comment">;</span><br>&#125;<br>p -&gt; next <span class="hljs-operator">=</span> head<span class="hljs-comment">; //首尾相连</span><br></code></pre></td></tr></table></figure><h4 id="删除结点（也就是击毙的操作）"><a href="#删除结点（也就是击毙的操作）" class="headerlink" title="删除结点（也就是击毙的操作）"></a>删除结点（也就是击毙的操作）</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">q = head;<br><span class="hljs-function"><span class="hljs-title">while</span>(q -&gt;</span> next != q)&#123;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = q -&gt;</span> next;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>    <span class="hljs-comment">//删除q</span><br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = q -&gt;</span> next;<br>    delete q;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><h4 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h4><ul><li>存储在内存中一个被称为<strong>堆</strong>的区域中，由一个堆管理器进行管理</li><li>new 操作时分配一块空间，delete 操作时回收一块空间<br>但是不断的 new delete 操作会导致内存空间的碎片化，应该如何管理这些内存片段呢？😢</li></ul><h4 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h4><ul><li>所有的空闲片段形成一个集合，按地址顺序排列就得到了线性表，故堆空间的管理实际上就是在<strong>维护一个线性表</strong></li><li>由于该线性表经常需要删除操作（就是 new ）,并且delete操作时可能需要把一些潜在的相邻的闲置空间进行合并，所以用双链表比较合适</li></ul><h4 id="模拟动态内存管理的memory类（感觉这种理解很有意思）"><a href="#模拟动态内存管理的memory类（感觉这种理解很有意思）" class="headerlink" title="模拟动态内存管理的memory类（感觉这种理解很有意思）"></a>模拟动态内存管理的memory类（感觉这种理解很有意思）</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">class memory&#123;<br>    struct <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">        int</span> <span class="hljs-literal">start</span>; //起始地址<br>        int end; //终止地址<br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*prev</span>; <br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*next</span>;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">(int</span> s, int e,<span class="hljs-keyword">node</span> <span class="hljs-title">*p</span> = nullptr,<span class="hljs-keyword">node</span> <span class="hljs-title">*n</span> = nullptr)&#123;<br>            <span class="hljs-literal">start</span> = s;<br>            end = e;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">()&#123;</span><br><span class="hljs-title">            prev</span> = nullptr;<br>            next = nullptr;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*head</span>;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*tail</span>;<br><br>    public:<br>        memory(int capacity);<br>        int malloc(int size); //申请一块大小为size的空间，返回起始地址<br>        void free(int <span class="hljs-literal">start</span>,int size); //释放从<span class="hljs-literal">start</span>开始、大小为size的空间<br>        ~memory();<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">memory::memory(int capacity)&#123;<br>   <span class="hljs-built_in"> head</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> = new <span class="hljs-type">node</span>(<span class="hljs-number">0</span> , capacity - <span class="hljs-number">1</span>,<span class="hljs-built_in"> head</span>);<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> -&gt; <span class="hljs-keyword">next</span> =<span class="hljs-built_in"> tail</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> tail</span> -&gt; prev =<span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span>;<br>&#125;<br><br>memory::~memory()&#123;<br>    <span class="hljs-type">node</span> *p =<span class="hljs-built_in"> head</span>;<br>    <span class="hljs-type">node</span> *q;<br>    while(p != nullpter)&#123;<br>        q = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">int malloc(int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    int returnValue;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> &lt; size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == tail)&#123;<br>        return -<span class="hljs-number">1</span>; <span class="hljs-comment">//没有找到</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">returnValue</span> = p -&gt;</span> start;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> == size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = p -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> = p -&gt;</span> prev;<br>        delete p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start += size;<br>    &#125;<br>    return returnValue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">void memory::free(int start, int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    node *np;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> start &lt; start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p != tail &amp;&amp; start + size == p -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start = start;<br>        np = p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">np</span> = new node(start , start + size - 1 ,p -&gt;</span> prev, p );<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> next = np;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> prev = np;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = np -&gt;</span> prev;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> + 1 == np -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = np -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> end == start + size - <span class="hljs-number">1</span>;<br>        delete np;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
      <tag>Linklist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure3</title>
    <link href="/2025/02/07/Data-Structure3/"/>
    <url>/2025/02/07/Data-Structure3/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）"><a href="#Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）" class="headerlink" title="Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）"></a>Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）</h5><h2 id="Data-Structure-3-双链表-容器-迭代器"><a href="#Data-Structure-3-双链表-容器-迭代器" class="headerlink" title="Data Structure 3 双链表 容器 迭代器"></a>Data Structure 3 双链表 容器 迭代器</h2><p>在上一节中，我们非常详细地实现了一个单链表类（算是对上学期所学进行了一个复习），我个人认为，双链表与单链表并不存在多么显著的区别。所以本章节中关于双链表的部分会相对比较简洁。</p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>定义：（和单链表不同的地方）每个结点既保存直接后继结点的地址，也保存直接前驱结点的地址（单链表只保存直接后继结点的地址）</li><li>拥有直接前驱结点的地址实际上意味着双链表可以从后向前访问</li><li>双链表中既包含了一个头结点head ,还包含了一个尾结点tail；保存一个双链表事实上就是保存头尾两个结点的地址<br>下面是一个双链表类的定义：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *prev;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x ,node *p = <span class="hljs-literal">nullptr</span>, node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br>node *tail;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">dLinkList</span>();<br>    ~<span class="hljs-built_in">dLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>        <span class="hljs-keyword">delete</span> tail;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="容器与迭代器"><a href="#容器与迭代器" class="headerlink" title="容器与迭代器"></a>容器与迭代器</h3><ul><li>本质上我们所说的数据结构，就是在<strong>保存一组相互之间具有某种关系的数据元素</strong>。而C++把每个数据结构的实现称为<strong>一个容器</strong></li><li>在设计容器时，我们通常为每种容器定义一个相应的表示其中对象位置的类型，称作<strong>迭代器</strong>，相当于指向容器中对象的指针</li><li>设计一个迭代器包括2个部分:<br>(1) 如何标识容器中某一对象的位置<br>(2) 如何实现迭代器的操作</li><li>为了方便用户使用，STL将迭代器类（iterator , const_iterator）定义成相应容器类的公有内嵌类</li><li>注意：iterator类可通过迭代器修改指向元素的值，而const_iterator只可以通过迭代器读取指向元素的值</li></ul><h4 id="下面是一些迭代器自身的常见操作："><a href="#下面是一些迭代器自身的常见操作：" class="headerlink" title="下面是一些迭代器自身的常见操作："></a>下面是一些迭代器自身的常见操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="迭代器自身操作"></p><h4 id="这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现："><a href="#这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现：" class="headerlink" title="这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现："></a>这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">iterator</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        node* ptr;<br>    <span class="hljs-keyword">public</span>:<br>        iterator(node* p = nullptr) : ptr(p) &#123;&#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>            ptr = ptr-&gt;next;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>--() &#123;<br>            ptr = ptr-&gt;prev;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>++(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            ++(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>--(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            --(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> ptr-&gt;<span class="hljs-keyword">data</span>;<br>        &#125;<br><br>        T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> &amp;(ptr-&gt;<span class="hljs-keyword">data</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* A operator to check whether two iterators are same (pointing to the same memory) */</span><br>        friend bool <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>           <span class="hljs-keyword">return</span> (a.ptr == b.ptr);<br>        &#125;<br><br>        friend bool <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> (a.ptr != b.ptr);<br>        &#125;<br><br>        friend <span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="以线性表为例"><a href="#以线性表为例" class="headerlink" title="以线性表为例"></a>以线性表为例</h3><h4 id="下面是一些list类和vector类中的迭代器相关操作："><a href="#下面是一些list类和vector类中的迭代器相关操作：" class="headerlink" title="下面是一些list类和vector类中的迭代器相关操作："></a>下面是一些list类和vector类中的迭代器相关操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png" alt="迭代器相关操作"></p><h4 id="这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡："><a href="#这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡：" class="headerlink" title="这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡："></a>这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡：</h4><p>注：其实存在一些问题（ 因为我的实现并没有考虑模板类型T 不具有默认构造函数的情况 😢 ）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* Return an iterator pointing to the first element. */</span><br>iterator <span class="hljs-built_in">begin</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(head-&gt;next);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cbegin</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(head-&gt;next);<br>&#125;<br><br><span class="hljs-comment">/* Return an iterator pointing to one past the last element. */</span><br>iterator <span class="hljs-built_in">end</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(tail);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cend</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(tail);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">iterator</span> insert(<span class="hljs-keyword">iterator</span> pos, <span class="hljs-keyword">const</span> T&amp; value) &#123;<br>    node* n = new node(value, pos.<span class="hljs-keyword">ptr</span>-&gt;prev, pos.<span class="hljs-keyword">ptr</span>);<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev-&gt;next = n;<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev = n;<br>    ++ currentLength;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">iterator</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">iterator erase(iterator pos) noexcept &#123;<br>    <span class="hljs-keyword">if</span> (pos == end()) &#123;<br>        return end();<br>    &#125;<br>    node* tmp = pos.ptr;<br>    <span class="hljs-function"><span class="hljs-title">iterator</span> it(tmp-&gt;</span>next);<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = tmp-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span> = tmp-&gt;</span>prev;<br>    delete tmp;<br>    -- currentLength;<br>    return it;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Linklist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis2</title>
    <link href="/2025/02/05/Maths-Analysis2/"/>
    <url>/2025/02/05/Maths-Analysis2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-好的，又来水文章了。今天要讲的是："><a href="#Before-好的，又来水文章了。今天要讲的是：" class="headerlink" title="Before: 好的，又来水文章了。今天要讲的是："></a>Before: 好的，又来水文章了。今天要讲的是：</h5><h2 id="Maths-Analysis-2-一致收敛判别法"><a href="#Maths-Analysis-2-一致收敛判别法" class="headerlink" title="Maths Analysis 2 一致收敛判别法"></a>Maths Analysis 2 一致收敛判别法</h2><h3 id="第一种：比较判别法"><a href="#第一种：比较判别法" class="headerlink" title="第一种：比较判别法"></a>第一种：比较判别法</h3><p><img src="/img/%E6%AF%94%E8%BE%83%E5%88%A4%E5%88%AB.png" alt="比较判别法"></p><h3 id="第二种：Dirichlet判别法"><a href="#第二种：Dirichlet判别法" class="headerlink" title="第二种：Dirichlet判别法"></a>第二种：Dirichlet判别法</h3><p><img src="/img/%E8%BF%AA%E5%88%A9%E5%85%8B%E9%9B%B7%E5%88%A4%E5%88%AB.png" alt="Dirichlet判别法"></p><h3 id="第三种：Abel判别法"><a href="#第三种：Abel判别法" class="headerlink" title="第三种：Abel判别法"></a>第三种：Abel判别法</h3><p><img src="/img/%E9%98%BF%E8%B4%9D%E5%B0%94%E5%88%A4%E5%88%AB.png" alt="Abel判别法"></p><h3 id="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"><a href="#总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些" class="headerlink" title="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"></a>总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些</h3><ul><li>收敛 &lt;-&gt; 一致收敛</li><li>有界 &lt;-&gt; 一致有界</li><li>其实今天仔细一想，对于函数列的问题，好像就应该讨论一致收敛而不是普通的收敛。主要是我觉得吧，普通收敛引入了一个很麻烦的x 😅😅😅</li></ul>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic1</title>
    <link href="/2025/02/03/Java-Basic1/"/>
    <url>/2025/02/03/Java-Basic1/</url>
    
    <content type="html"><![CDATA[<h5 id="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"><a href="#JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）" class="headerlink" title="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"></a>JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）</h5><h4 id="Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java"><a href="#Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java" class="headerlink" title="Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java"></a>Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java</h4><h2 id="Java-Basic-1"><a href="#Java-Basic-1" class="headerlink" title="Java Basic 1"></a>Java Basic 1</h2><h3 id="Compiling-Java"><a href="#Compiling-Java" class="headerlink" title="Compiling Java"></a>Compiling Java</h3><p>Source Code(.java) -&gt; javac -&gt; Byte Code -&gt; java</p><h3 id="Java版的Hello-world"><a href="#Java版的Hello-world" class="headerlink" title="Java版的Hello world"></a>Java版的Hello world</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] <span class="hljs-variable language_">arguments</span></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>,<span class="hljs-title function_">printIn</span>(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Program-Structure"><a href="#Program-Structure" class="headerlink" title="Program Structure"></a>Program Structure</h3><p>class <strong>CLASSNAME</strong>{<br>    public static void main(String[] arguments){<br>        <strong>STATEMENTS</strong><br>    }<br>}</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>System.out.printIn(some String)<br>Example:</p><ul><li>System.output.printIn(“output”);</li><li>Console: output</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>boolean 相当于C&#x2F;C++中的bool<br>int 相当于C&#x2F;C++中的int<br>double 相当于C&#x2F;C++中的double<br>String 相当于C&#x2F;C++中的string<br><strong>注意：Java要求数据类型必须正确匹配</strong><br>如：String five &#x3D; 5; &#x2F;&#x2F; ERROR</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Form:<br>Type Name;</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>使用 &#x3D;  与C&#x2F;C++相同<br>Example:<br>String foo;<br>foo &#x3D; “IAP 6.092”;<br>double badPi &#x3D; 3.14;</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>与C&#x2F;C++完全一致<br>&#x3D; + - * &#x2F;(整数进行&#x2F;时同样是向下取整)<br><strong>注意： double b &#x3D; 5&#x2F;2; &#x2F;&#x2F; b &#x3D; 2.0</strong><br>优先级：括号 &gt; 乘除法 &gt; 加减法<br>也支持 +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; 等复合运算符</p><h3 id="字符串加法"><a href="#字符串加法" class="headerlink" title="字符串加法"></a>字符串加法</h3><p>String text &#x3D; “hello” + “world”;<br>text &#x3D; text + “number” + 5;<br>&#x2F;&#x2F; text &#x3D; “helloworldnumber5”;</p><h3 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h3><ul><li>强制类型转换 ： int a &#x3D; (int)18.7;</li><li>隐式类型转换 ：double a &#x3D; 2;&#x2F;&#x2F;2.0</li></ul><h3 id="Java的函数——Method"><a href="#Java的函数——Method" class="headerlink" title="Java的函数——Method"></a>Java的函数——Method</h3><p>Example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：NAME();</p><h4 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">NewLine</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newLine</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threeLines</span>()</span>&#123;<br>        newLine();<br>        newLine();<br>        newLine();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] arguments</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 1&quot;</span>);<br>        threeLines();<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数参数Parameter"><a href="#函数参数Parameter" class="headerlink" title="函数参数Parameter"></a>函数参数Parameter</h4><p>Example:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>调用：<br>NAME(EXPRESSION);<br>Another Example:<br>多个参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>,<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Return-Values-返回值"><a href="#Return-Values-返回值" class="headerlink" title="Return Values 返回值"></a>Return Values 返回值</h4><p>Example：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TYPE <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>    <span class="hljs-keyword">return</span> EXPRESSION;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IF-ELSE语句"><a href="#IF-ELSE语句" class="headerlink" title="IF ELSE语句"></a>IF ELSE语句</h3><p>Example:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(CONDITION)</span></span>&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(CONDITION)&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>x &gt; y  x &lt; y  x &gt;&#x3D; y x &lt;&#x3D; y  x&#x3D;&#x3D; y</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>&amp;&amp; ||</p>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis1</title>
    <link href="/2025/02/02/Maths-Analysis1/"/>
    <url>/2025/02/02/Maths-Analysis1/</url>
    
    <content type="html"><![CDATA[<h5 id="好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣"><a href="#好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣" class="headerlink" title="好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣"></a>好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣</h5><h2 id="Maths-Analysis-1-函数列与一致收敛性"><a href="#Maths-Analysis-1-函数列与一致收敛性" class="headerlink" title="Maths Analysis 1  函数列与一致收敛性"></a>Maths Analysis 1  函数列与一致收敛性</h2><h3 id="首先，给出函数列定义！"><a href="#首先，给出函数列定义！" class="headerlink" title="首先，给出函数列定义！"></a>首先，给出函数列定义！</h3><p><img src="/img/%E5%87%BD%E6%95%B0%E5%88%97%E5%AE%9A%E4%B9%89.png" alt="函数列定义"></p><h4 id="是不是很简单？让我们来看一个例子——经典-x-n"><a href="#是不是很简单？让我们来看一个例子——经典-x-n" class="headerlink" title="是不是很简单？让我们来看一个例子——经典 $x^n$"></a>是不是很简单？让我们来看一个例子——经典 $x^n$</h4><p><img src="/img/%E5%87%BD%E6%95%B0%E5%88%97%E4%BE%8B%E5%AD%90.png" alt="函数列例子"></p><h3 id="接着隆重推出：《一致收敛》"><a href="#接着隆重推出：《一致收敛》" class="headerlink" title="接着隆重推出：《一致收敛》"></a>接着隆重推出：《一致收敛》</h3><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E4%B9%89.png" alt="一致收敛定义"></p><h4 id="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"><a href="#看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白" class="headerlink" title="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"></a>看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白</h4><h4 id="哦菜菜鼠鼠似乎明白了些什么"><a href="#哦菜菜鼠鼠似乎明白了些什么" class="headerlink" title="哦菜菜鼠鼠似乎明白了些什么"></a>哦菜菜鼠鼠似乎明白了些什么</h4><h3 id="函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）"><a href="#函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）" class="headerlink" title="函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）"></a>函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）</h3><h4 id="接下来从几何上看看一致收敛"><a href="#接下来从几何上看看一致收敛" class="headerlink" title="接下来从几何上看看一致收敛"></a>接下来从几何上看看一致收敛</h4><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89.png" alt="一致收敛几何意义"></p><h3 id="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"><a href="#将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上" class="headerlink" title="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"></a>将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上</h3><p><img src="/img/%E6%9F%AF%E8%A5%BF%E6%94%B6%E6%95%9B%E5%87%86%E5%88%99.png" alt="柯西收敛准则"></p><h4 id="证明还是很简单的"><a href="#证明还是很简单的" class="headerlink" title="证明还是很简单的"></a>证明还是很简单的</h4><h3 id="接下来看一个和上确界相关的定理及推论吧"><a href="#接下来看一个和上确界相关的定理及推论吧" class="headerlink" title="接下来看一个和上确界相关的定理及推论吧"></a>接下来看一个和上确界相关的定理及推论吧</h3><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E5%8F%8A%E6%8E%A8%E8%AE%BA.png" alt="一致收敛定理及推论"></p><h4 id="And-An-Example"><a href="#And-An-Example" class="headerlink" title="And An Example~"></a>And An Example~</h4><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E4%BE%8B%E5%AD%90.png" alt="一致收敛定理例子"></p><h5 id="JaneZ要做回数分皇帝😎😎😎（口嗨中）"><a href="#JaneZ要做回数分皇帝😎😎😎（口嗨中）" class="headerlink" title="JaneZ要做回数分皇帝😎😎😎（口嗨中）"></a>JaneZ要做回数分皇帝😎😎😎（口嗨中）</h5>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure2</title>
    <link href="/2025/02/01/Data-Structure2/"/>
    <url>/2025/02/01/Data-Structure2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）"><a href="#Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）" class="headerlink" title="Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）"></a>Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）</h5><h2 id="Data-Structure-2-链表-LinkList"><a href="#Data-Structure-2-链表-LinkList" class="headerlink" title="Data Structure 2 链表 LinkList"></a>Data Structure 2 链表 LinkList</h2><h3 id="线性链表的链接存储"><a href="#线性链表的链接存储" class="headerlink" title="线性链表的链接存储"></a>线性链表的链接存储</h3><ul><li>链接存储通过让每个结点保存与它有关系的结点的地址来保存结点之间的关系</li><li>线性表的链接存储是指将每个数据元素存放在一个独立的数据存储单元（结点）中</li><li>链表不需要事先准备空间，一般采用动态存储的方法</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li>每个结点存储一个数据元素和一个后继指针<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="单链表"></li><li>为防止忘记处理特殊情况，可以引入一个不存放数据的特殊结点——头结点（一种优化）<br><img src="/img/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="带头结点单链表"></li></ul><h4 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">sLinkList</span>();<br>    ~<span class="hljs-built_in">sLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="单链表的运算实现"><a href="#单链表的运算实现" class="headerlink" title="单链表的运算实现"></a>单链表的运算实现</h4><ul><li>私有成员函数move的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">node</span> *<span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">move</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head;<br>    <span class="hljs-keyword">while</span>( i -- &gt;= <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表构造函数<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">sLinkList</span>()</span>&#123;<br>    head = new node;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表清空函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B8%85%E7%A9%BA.png" alt="单链表清空操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">clear</span>()</span>&#123;<br>    node *p = head-&gt;<span class="hljs-keyword">next</span>;<br>    node *<span class="hljs-keyword">q</span>;<br>    head -&gt; <span class="hljs-keyword">next</span> = nullptr;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = <span class="hljs-keyword">q</span>;<br>    &#125;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表插入删除函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表删除操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">insert</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span> ,<span class="hljs-title">const</span> <span class="hljs-title">elemType</span> &amp;<span class="hljs-title">x</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = new node(<span class="hljs-keyword">x</span> ,<span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>);<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">remove</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    node *delp;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    delp = <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = delp -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">delete</span> delp;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表search visit traverse函数的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head -&gt; next;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>ptr &amp;&amp; p -&gt; data != x)&#123;<br>        p = p -&gt; next;<br>        ++ i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> move(i) -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">traverse</span>() <span class="hljs-title">const</span></span>&#123;<br>    node *p = head -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        cout &lt;&lt; p -&gt; data &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        p = p -&gt; <span class="hljs-keyword">next</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="JaneZ发烧了，各位注意身体啊"><a href="#JaneZ发烧了，各位注意身体啊" class="headerlink" title="JaneZ发烧了，各位注意身体啊!"></a>JaneZ发烧了，各位注意身体啊!</h5>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Linklist</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Structure1</title>
    <link href="/2025/01/29/Data-Structure1/"/>
    <url>/2025/01/29/Data-Structure1/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！"><a href="#Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！" class="headerlink" title="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！"></a>Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！</h5><h2 id="Data-Structure-1-线性表List"><a href="#Data-Structure-1-线性表List" class="headerlink" title="Data Structure 1 线性表List"></a>Data Structure 1 线性表List</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><ul><li>线性结构的定义：所有结点按一对一的邻接关系构成的整体就是线性结构</li><li>线性表是处理线性结构的数据结构</li><li>线性表中数据元素的个数称为线性表的长度</li></ul><h4 id="线性表的基本运算："><a href="#线性表的基本运算：" class="headerlink" title="线性表的基本运算："></a>线性表的基本运算：</h4><ul><li>创建空线性表 create</li><li>删除线性表中所有数据元素 clear</li><li>求长度 length</li><li>插入元素 insert</li><li>删除元素 remove</li><li>搜索元素 search</li><li>返回特定位置元素值 visit</li><li>按序访问每一数据元素 traverse</li></ul><h4 id="线性表的抽象类"><a href="#线性表的抽象类" class="headerlink" title="线性表的抽象类"></a>线性表的抽象类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span> ; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span> <span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp;x)</span><span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">list</span>()&#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="线性表的顺序实现"><a href="#线性表的顺序实现" class="headerlink" title="线性表的顺序实现"></a>线性表的顺序实现</h3><ul><li>将线性表的数据元素存储在一块连续的空间里，用存储位置反映数据元素间的关系<br><img src="/img/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="顺序表存储结构"></li></ul><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><ul><li>从线性表的抽象类list公有派生<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><br>    <span class="hljs-keyword">private</span>:<br><br>        elemType *data;<br>        <span class="hljs-type">int</span> currentLength;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">public</span>:<br><br>        <span class="hljs-built_in">seqList</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqList</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">seqList</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">initsize</span>)&#123;<br>    data = new elemType[initsize];<br>    maxsize = initsize;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">seqList</span>()</span>&#123;<br>    <span class="hljs-keyword">delete</span> []data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">clear</span>()&#123;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br>(是个伪清除)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">length</span>()&#123;<br>    <span class="hljs-keyword">return</span> currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span>&amp;<span class="hljs-symbol">x</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; currentLength &amp;&amp; data[i] != x; i ++);<br>    <span class="hljs-keyword">if</span>(i == currentLength)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> i; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">traverse</span>()<span class="hljs-symbol">const</span>&#123;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        cout &lt;&lt; data[i]&lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单独讨论插入删除函数"><a href="#单独讨论插入删除函数" class="headerlink" title="单独讨论插入删除函数"></a>单独讨论插入删除函数</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">doubleSpace</span>()&#123;<br>    elemType *tmp = data;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    data = new elemType[maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        data[i] = tmp[i];<br>    &#125;<br>    delete []tmp;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i,<span class="hljs-symbol">const</span></span> <span class="hljs-symbol">elemType</span>&amp; <span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(currentLength == maxSize)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = currentLength; j &gt; i ; j --)&#123;<br>        data[j] = data[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    data[i] = x;<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = i;j &lt; currentLength - <span class="hljs-number">1</span>; j ++)&#123;<br>        data[j] = data[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>List</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Before Everything</title>
    <link href="/2025/01/21/Before-Everything/"/>
    <url>/2025/01/21/Before-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="Before-Everything-前言"><a href="#Before-Everything-前言" class="headerlink" title="Before Everything 前言"></a>Before Everything 前言</h1><p>JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City<br>Well, hello world ! This is the owner of this crazy blog ! My name is JaneZ , a student from Shanghai Jiaotong University . I major in <strong>Computer Science</strong> of the ACM Class. I ‘m an ENFPer or ENFJer , so I really want to know more people with the same interests.<br><strong>Why I start this blog ?</strong><br>Well , partly motivated by my high school classmate YXY , who major in <strong>Artificial Intelligence</strong> also in SJTU . I think it’s mainly because that after a whole semester learning in the ACM class , I didn’t actually adapt to university life that well .<br>So I hope to be more proactive in my learning through this blog.<br>Let’s get back to Chinese. 原谅JaneZ烂烂的英语<br>我的博客（个人主页）采取的是hexo的fluid主题，主要分享我在日常学习中记录的笔记、学习心得以及一些莫名其妙的话。如果各位对于计算机科学、数学、物理学、人工智能等方面感兴趣，都可以常来玩儿，也欢迎与我私下进行交流（联系方式附在About页面中了）。希望能共同进步！<br>对了，如果有任何关于hexo博客的配置部署问题，都可向我咨询。自己踩过的坑，不希望再有人踩进去了。<br>Any way,let’s get started.我们开始吧<br>Attach a picture of this wonderful coffee shop!<br><img src="/img/MStandCoffee.png" alt="M Stand Coffee"><br>Can’t live without coffee …<br>Upd: 有人去医院复查不出所料寄了，再见咖啡☕暑假手术室见了😢😢😢</p>]]></content>
    
    
    
    <tags>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
