<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Maths-Analysis1</title>
    <link href="/2025/02/02/Maths-Analysis1/"/>
    <url>/2025/02/02/Maths-Analysis1/</url>
    
    <content type="html"><![CDATA[<h5 id="好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣"><a href="#好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣" class="headerlink" title="好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣"></a>好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣</h5><h2 id="Maths-Analysis-1-函数列与一致收敛性"><a href="#Maths-Analysis-1-函数列与一致收敛性" class="headerlink" title="Maths Analysis 1  函数列与一致收敛性"></a>Maths Analysis 1  函数列与一致收敛性</h2><h3 id="首先，给出函数列定义！"><a href="#首先，给出函数列定义！" class="headerlink" title="首先，给出函数列定义！"></a>首先，给出函数列定义！</h3><p>！<a href="/img/%E5%87%BD%E6%95%B0%E5%88%97%E5%AE%9A%E4%B9%89.png">函数列定义</a></p><h4 id="是不是很简单？让我们来看一个例子——经典-x-n"><a href="#是不是很简单？让我们来看一个例子——经典-x-n" class="headerlink" title="是不是很简单？让我们来看一个例子——经典 $x^n$"></a>是不是很简单？让我们来看一个例子——经典 $x^n$</h4><p>！<a href="/img/%E5%87%BD%E6%95%B0%E5%88%97%E4%BE%8B%E5%AD%90.png">函数列例子</a></p><h3 id="接着隆重推出：《一致收敛》"><a href="#接着隆重推出：《一致收敛》" class="headerlink" title="接着隆重推出：《一致收敛》"></a>接着隆重推出：《一致收敛》</h3><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E4%B9%89.png">一致收敛定义</a></p><h4 id="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"><a href="#看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白" class="headerlink" title="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"></a>看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白</h4><h4 id="哦菜菜鼠鼠似乎明白了些什么"><a href="#哦菜菜鼠鼠似乎明白了些什么" class="headerlink" title="哦菜菜鼠鼠似乎明白了些什么"></a>哦菜菜鼠鼠似乎明白了些什么</h4><h3 id="函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）"><a href="#函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）" class="headerlink" title="函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）"></a>函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）</h3><h4 id="接下来从几何上看看一致收敛"><a href="#接下来从几何上看看一致收敛" class="headerlink" title="接下来从几何上看看一致收敛"></a>接下来从几何上看看一致收敛</h4><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89.png">一致收敛几何意义</a></p><h3 id="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"><a href="#将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上" class="headerlink" title="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"></a>将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上</h3><p>！<a href="/img/%E6%9F%AF%E8%A5%BF%E6%94%B6%E6%95%9B%E5%87%86%E5%88%99.png">柯西收敛准则</a></p><h4 id="证明还是很简单的"><a href="#证明还是很简单的" class="headerlink" title="证明还是很简单的"></a>证明还是很简单的</h4><h3 id="接下来看一个和上确界相关的定理及推论吧"><a href="#接下来看一个和上确界相关的定理及推论吧" class="headerlink" title="接下来看一个和上确界相关的定理及推论吧"></a>接下来看一个和上确界相关的定理及推论吧</h3><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E5%8F%8A%E6%8E%A8%E8%AE%BA.png">一致收敛定理及推论</a></p><h4 id="And-An-Example"><a href="#And-An-Example" class="headerlink" title="And An Example~"></a>And An Example~</h4><p>！<a href="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E4%BE%8B%E5%AD%90.png">一致收敛定理例子</a></p><h5 id="JaneZ要做回数分皇帝😎😎😎（口嗨中）"><a href="#JaneZ要做回数分皇帝😎😎😎（口嗨中）" class="headerlink" title="JaneZ要做回数分皇帝😎😎😎（口嗨中）"></a>JaneZ要做回数分皇帝😎😎😎（口嗨中）</h5>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure2</title>
    <link href="/2025/02/01/Data-Structure2/"/>
    <url>/2025/02/01/Data-Structure2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）"><a href="#Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）" class="headerlink" title="Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）"></a>Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）</h5><h2 id="Data-Structure-2-链表-LinkList"><a href="#Data-Structure-2-链表-LinkList" class="headerlink" title="Data Structure 2 链表 LinkList"></a>Data Structure 2 链表 LinkList</h2><h3 id="线性链表的链接存储"><a href="#线性链表的链接存储" class="headerlink" title="线性链表的链接存储"></a>线性链表的链接存储</h3><ul><li>链接存储通过让每个结点保存与它有关系的结点的地址来保存结点之间的关系</li><li>线性表的链接存储是指将每个数据元素存放在一个独立的数据存储单元（结点）中</li><li>链表不需要事先准备空间，一般采用动态存储的方法</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li>每个结点存储一个数据元素和一个后继指针<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="单链表"></li><li>为防止忘记处理特殊情况，可以引入一个不存放数据的特殊结点——头结点（一种优化）<br><img src="/img/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="带头结点单链表"></li></ul><h4 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">sLinkList</span>();<br>    ~<span class="hljs-built_in">sLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="单链表的运算实现"><a href="#单链表的运算实现" class="headerlink" title="单链表的运算实现"></a>单链表的运算实现</h4><ul><li>私有成员函数move的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">node</span> *<span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">move</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head;<br>    <span class="hljs-keyword">while</span>( i -- &gt;= <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表构造函数<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">sLinkList</span>()</span>&#123;<br>    head = new node;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表清空函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B8%85%E7%A9%BA.png" alt="单链表清空操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">clear</span>()</span>&#123;<br>    node *p = head-&gt;<span class="hljs-keyword">next</span>;<br>    node *<span class="hljs-keyword">q</span>;<br>    head -&gt; <span class="hljs-keyword">next</span> = nullptr;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = <span class="hljs-keyword">q</span>;<br>    &#125;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表插入删除函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表删除操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">insert</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span> ,<span class="hljs-title">const</span> <span class="hljs-title">elemType</span> &amp;<span class="hljs-title">x</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = new node(<span class="hljs-keyword">x</span> ,<span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>);<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">remove</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    node *delp;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    delp = <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = delp -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">delete</span> delp;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表search visit traverse函数的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head -&gt; next;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>ptr &amp;&amp; p -&gt; data != x)&#123;<br>        p = p -&gt; next;<br>        ++ i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> move(i) -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">traverse</span>() <span class="hljs-title">const</span></span>&#123;<br>    node *p = head -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        cout &lt;&lt; p -&gt; data &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        p = p -&gt; <span class="hljs-keyword">next</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="JaneZ发烧了，各位注意身体啊"><a href="#JaneZ发烧了，各位注意身体啊" class="headerlink" title="JaneZ发烧了，各位注意身体啊!"></a>JaneZ发烧了，各位注意身体啊!</h5>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Data Structure1</title>
    <link href="/2025/01/29/Data-Structure1/"/>
    <url>/2025/01/29/Data-Structure1/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！"><a href="#Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！" class="headerlink" title="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！"></a>Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！</h5><h2 id="Data-Structure-1-线性表List"><a href="#Data-Structure-1-线性表List" class="headerlink" title="Data Structure 1 线性表List"></a>Data Structure 1 线性表List</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><ul><li>线性结构的定义：所有结点按一对一的邻接关系构成的整体就是线性结构</li><li>线性表是处理线性结构的数据结构</li><li>线性表中数据元素的个数称为线性表的长度</li></ul><h4 id="线性表的基本运算："><a href="#线性表的基本运算：" class="headerlink" title="线性表的基本运算："></a>线性表的基本运算：</h4><ul><li>创建空线性表 create</li><li>删除线性表中所有数据元素 clear</li><li>求长度 length</li><li>插入元素 insert</li><li>删除元素 remove</li><li>搜索元素 search</li><li>返回特定位置元素值 visit</li><li>按序访问每一数据元素 traverse</li></ul><h4 id="线性表的抽象类"><a href="#线性表的抽象类" class="headerlink" title="线性表的抽象类"></a>线性表的抽象类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span> ; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span> <span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp;x)</span><span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">list</span>()&#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="线性表的顺序实现"><a href="#线性表的顺序实现" class="headerlink" title="线性表的顺序实现"></a>线性表的顺序实现</h3><ul><li>将线性表的数据元素存储在一块连续的空间里，用存储位置反映数据元素间的关系<br><img src="/img/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="顺序表存储结构"></li></ul><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><ul><li>从线性表的抽象类list公有派生<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><br>    <span class="hljs-keyword">private</span>:<br><br>        elemType *data;<br>        <span class="hljs-type">int</span> currentLength;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">public</span>:<br><br>        <span class="hljs-built_in">seqList</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqList</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">seqList</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">initsize</span>)&#123;<br>    data = new elemType[initsize];<br>    maxsize = initsize;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">seqList</span>()</span>&#123;<br>    <span class="hljs-keyword">delete</span> []data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">clear</span>()&#123;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br>(是个伪清除)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">length</span>()&#123;<br>    <span class="hljs-keyword">return</span> currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span>&amp;<span class="hljs-symbol">x</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; currentLength &amp;&amp; data[i] != x; i ++);<br>    <span class="hljs-keyword">if</span>(i == currentLength)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> i; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">traverse</span>()<span class="hljs-symbol">const</span>&#123;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        cout &lt;&lt; data[i]&lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单独讨论插入删除函数"><a href="#单独讨论插入删除函数" class="headerlink" title="单独讨论插入删除函数"></a>单独讨论插入删除函数</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">doubleSpace</span>()&#123;<br>    elemType *tmp = data;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    data = new elemType[maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        data[i] = tmp[i];<br>    &#125;<br>    delete []tmp;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i,<span class="hljs-symbol">const</span></span> <span class="hljs-symbol">elemType</span>&amp; <span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(currentLength == maxSize)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = currentLength; j &gt; i ; j --)&#123;<br>        data[j] = data[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    data[i] = x;<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = i;j &lt; currentLength - <span class="hljs-number">1</span>; j ++)&#123;<br>        data[j] = data[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Before Everything</title>
    <link href="/2025/01/21/Before-Everything/"/>
    <url>/2025/01/21/Before-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="Before-Everything"><a href="#Before-Everything" class="headerlink" title="Before Everything"></a>Before Everything</h1><h5 id="JaneZ-2025-1-21-M-Stand-Coffee-Nanjing-City"><a href="#JaneZ-2025-1-21-M-Stand-Coffee-Nanjing-City" class="headerlink" title="JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City"></a>JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City</h5><p>Well, hello world ! This is the owner of this crazy blog ! My name is JaneZ , a student from Shanghai Jiaotong University .<br>I major in <strong>Computer Science</strong> . I ‘m totally an E man , so I really want to know more people with the same interests.<br><strong>Why I start this blog ?</strong><br>Well , partly motivated by my high school classmate YXY , who major in <strong>Artificial Intelligence</strong> also in SJTU .<br>I think it’s mainly because that after a whole semester learning in the ACM class , I didn’t actually adapt to university life that well .<br>So I hope to be more proactive in my learning through this blog.<br>Any way , let’s get started.<br>Attach a picture of this wonderful coffee shop !<br><img src="/img/MStandCoffee.png" alt="M Stand Coffee"><br>Can’t live without coffee …</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
