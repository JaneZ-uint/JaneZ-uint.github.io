<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>数据结构1</title>
    <link href="/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/"/>
    <url>/2025/02/17/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%841/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新"><a href="#Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新" class="headerlink" title="Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新"></a>Before：此中文版的数据结构用于整理翁阿姨课上的笔记，以周为单位更新</h5><h2 id="数据结构-1-引言"><a href="#数据结构-1-引言" class="headerlink" title="数据结构 1 引言"></a>数据结构 1 引言</h2><h3 id="数据的逻辑结构"><a href="#数据的逻辑结构" class="headerlink" title="数据的逻辑结构"></a>数据的逻辑结构</h3><p>集合结构：两两无关<br>线性结构：除首尾元素外，每个元素仅有一个前驱和一个后驱<br>树形结构：除根元素外，每个元素都只有一个前驱，后驱数量不限<br>图型结构：每个元素可以有任意数量的前驱和后驱</p><h3 id="数据结构的操作"><a href="#数据结构的操作" class="headerlink" title="数据结构的操作"></a>数据结构的操作</h3><p>创建和释放：构造函数 + 析构函数<br>更新：插入 更新（修改）删除<br>查找：访问 搜索 遍历</p><h3 id="数据结构存储实现"><a href="#数据结构存储实现" class="headerlink" title="数据结构存储实现"></a>数据结构存储实现</h3><p>存储结点：每个存储结点存放一个数据元素<br>结点间的关系：比如链表中指向next结点的指针是一种链接存储；而vector类中我们使用的是数组存储；而对于集合结构这种杂乱的数据结构时，可用哈希存储，用一个哈希函数将数据元素与元素存储位置关联起来；另外还有索引存储，分别设置数据区和索引区<br>附加信息：比如链表中的头尾结点</p><h3 id="算法效率分析"><a href="#算法效率分析" class="headerlink" title="算法效率分析"></a>算法效率分析</h3><p>三个时间性能：</p><ul><li>最好情况下的时间复杂度</li><li>最坏情况下的时间复杂度</li><li>平均情况下的时间复杂度</li></ul><p>时间复杂度的表示一般有2种方法：<strong>大O表示法</strong>（取运行时间函数的主项）和 F（n）表示法（通常选择比较简单的函数形式）。有：O（1）&lt; O(logN)&lt; O(N)&lt; O(NlogN)&lt; O($N^2$)&lt; O($N^3$) ; O（$2^N$）&lt; O(N!)&lt; O($N^N$)<br>那么时间复杂度应该如何计算呢?<br>核心在于：在整个程序中找出最复杂、运行时间最长的程序段的时间复杂度<br>空间性能：</p><ul><li>存储被处理数据所需的空间</li><li>实现操作所需的额外空间</li></ul><h3 id="经典举例：最大连续子序列和问题"><a href="#经典举例：最大连续子序列和问题" class="headerlink" title="经典举例：最大连续子序列和问题"></a>经典举例：<strong>最大连续子序列和问题</strong></h3><p>方法一：O($N^3$)</p><figure class="highlight excel"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs excel"><span class="hljs-built_in">int</span> MaxSum;<br>for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-built_in">n</span> ; i ++)&#123;<br>    for(<span class="hljs-built_in">int</span> j = i ; j &lt; <span class="hljs-built_in">n</span> ; j ++)&#123;<br>        <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span>;<br>        for(<span class="hljs-built_in">int</span> k = i ; k &lt;= j ; k ++)&#123;<br>            <span class="hljs-built_in">sum</span> += a[k];<br>        &#125; <br>        <span class="hljs-built_in">if</span>(<span class="hljs-built_in">sum</span> &gt; MaxSum)&#123;<br>            MaxSum = <span class="hljs-built_in">sum</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法二：O($N^2$)</p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-built_in">int</span> MaxSum = <span class="hljs-number">0</span> ;<br>for(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ; i &lt; <span class="hljs-built_in">size</span> ; i ++)&#123;<br>    <span class="hljs-built_in">int</span> <span class="hljs-built_in">sum</span> = <span class="hljs-number">0</span> ;<br>    for(<span class="hljs-built_in">int</span> j = i ; j &lt; <span class="hljs-built_in">size</span> ; j ++)&#123;<br>        <span class="hljs-built_in">sum</span> += a[j];<br>        <span class="hljs-keyword">if</span>(<span class="hljs-built_in">sum</span> &gt; MaxSum )&#123;<br>            MaxSum = <span class="hljs-built_in">sum</span>;<br>            start = i;<br>            <span class="hljs-keyword">end</span> = j;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法三：分治法 O(NlogN)<br>共有3种情况：</p><ul><li>全部出现在前半部分，直接递归计算</li><li>全部出现在前半部分，直接递归计算</li><li>前半部分开始，后半部分结束</li></ul><p>那么方法也是相对应的：</p><ul><li>递归计算前半部分最大连续子序列和</li><li>递归计算后半部分最大连续子序列和</li><li>通过2个连续循环计算前半部分开始，后半部分结束的最大连续子序列和</li></ul><p>Wait to be updated…</p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
      <tag>Algorithm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic3</title>
    <link href="/2025/02/11/Java-Basic3/"/>
    <url>/2025/02/11/Java-Basic3/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：Welcome-back-to-JaneZ’s-Java-Learning"><a href="#Before：Welcome-back-to-JaneZ’s-Java-Learning" class="headerlink" title="Before：Welcome back to JaneZ’s Java Learning!"></a>Before：Welcome back to JaneZ’s Java Learning!</h5><h2 id="Java-Basic-3"><a href="#Java-Basic-3" class="headerlink" title="Java Basic 3"></a>Java Basic 3</h2><h3 id="访问权限"><a href="#访问权限" class="headerlink" title="访问权限"></a>访问权限</h3><p>Public VS Private ————对于fields和methods而言<br>Public: 可以被其他对象调用  Private: 只可被类内成员调用<br>那么为什么要对访问权限进行公有和私有的区分呢？</p><ul><li>为了保护私有信息</li><li>声明其他对象应该如何调用当前类</li><li>将实现与接口分离————意味着你可以自由地修改类的内部实现，而不影响使用该类的其他代码，只要公共接口保持不变</li></ul><h3 id="类作用域"><a href="#类作用域" class="headerlink" title="类作用域"></a>类作用域</h3><p>在函数中定义的变量只能在该函数中进行访问，而在类中定义的变量可以在类的所有函数中进行访问<br>函数级别的变量只在函数内部有效，而类级别的变量在整个类中都有效</p><h4 id="this关键字"><a href="#this关键字" class="headerlink" title="this关键字"></a>this关键字</h4><p>用于引用当前对象的实例，其作用在于：</p><ul><li>明确作用域（Clarifies scope）：<br>当类中的成员变量和方法参数同名时，使用this关键字可以明确指出要访问的是成员变量而不是参数。</li><li>表示“my object”：<br>this关键字用于引用当前对象，即调用方法的对象。</li></ul><h3 id="Java的包-Package"><a href="#Java的包-Package" class="headerlink" title="Java的包 Package"></a>Java的包 Package</h3><p>类似于C++中的namespace(名字空间)</p><ul><li>每个类都属于一个包，包是组织类的一种形式</li><li>同一包中的类具有相似的用途。例如，所有与图形用户界面相关的类可能放在一个名为 gui 的包中。</li><li>包只是目录</li><li>需要导入其他包中的类<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> com.example.data;<br><br>public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DataModel</span> </span>&#123;<br>    // 数据模型相关的代码<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="包的定义"><a href="#包的定义" class="headerlink" title="包的定义"></a>包的定义</h4><p>在C++中，我们有：</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">namespace</span> myapp &#123;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span> </span>&#123;<br>    std::cout &lt;&lt; <span class="hljs-string">&quot;Hello, World!&quot;</span> &lt;&lt; std::endl;<br>&#125;<br><br>&#125; <span class="hljs-comment">// namespace myapp</span><br></code></pre></td></tr></table></figure><p>而相应的在Java中，我们有：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs csharp">package com.example.myapp; <span class="hljs-comment">// 文件路径</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] <span class="hljs-keyword">args</span></span>)</span> &#123;<br>        System.<span class="hljs-keyword">out</span>.println(<span class="hljs-string">&quot;Hello, World!&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>定义的基本格式为：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl"><span class="hljs-keyword">package</span> path.to.package.foo<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span></span>&#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="包的使用方式"><a href="#包的使用方式" class="headerlink" title="包的使用方式"></a>包的使用方式</h4><p>在C++中，我们有<code>using namespace std</code><br>而相应的在Java中，我们有：<code>import path.to.package.foo.Foo</code></p><h4 id="为什么包？（好奇怪的句子"><a href="#为什么包？（好奇怪的句子" class="headerlink" title="为什么包？（好奇怪的句子"></a>为什么包？（好奇怪的句子</h4><ul><li>组合相似功能<br>包可以用来将功能相似的类组合在一起。这样做可以提高代码的模块化，使得相关功能更加集中和易于管理。</li><li>区分相似名称<br>包还可以用来区分具有相似名称的类，以避免命名冲突。<br>例如，shopping.List 和 packing.List 这两个类虽然名称相似，但它们位于不同的包中，分别代表购物清单和打包清单。通过使用包，我们可以清楚地区分这两个类，即使它们的名称相同。</li></ul><h4 id="特殊的包"><a href="#特殊的包" class="headerlink" title="特殊的包"></a>特殊的包</h4><p>首先，同一包内的类可以互相访问。<br>其次，还有一个比较特殊的包：java.lang<br>所有位于 java.lang 包中的类都不需要显式导入就可以在任何地方使用。这是Java语言规范的一部分，java.lang 包被视为Java程序的基础包，其中包含了一些最常用的类，如 String、Math、System 等。</p><h3 id="Java-API"><a href="#Java-API" class="headerlink" title="Java API"></a>Java API</h3><p>起因是在使用deepseek时看到了这样一个界面：<br><img src="/img/deepseekAPI.png" alt="deepseekAPI"><br>一直对<strong>API</strong>为何物充满了疑问，出于好奇还充了10块钱买了五百万tokens，但并不知道应该如何使用😅（最近资源紧张似乎已经买不了了🤣）<br>在看到这里时十分激动，于是立刻开始了学习！<br>首先，我先问了deepseek✌，API是什么？<br><img src="/img/APIanswer.png" alt="APIanswer"><br><strong>Application Programing Interface!</strong><br>好像也没有那么抽象嘛？我的理解是就是一种很不错的工具，通过标准化接口简化开发，提升效率，广泛应用于数据访问、服务集成和微服务架构中。而我们要讨论的Java API，其实就类似于C++&#x2F;Python中的标准库（standard library）<br>Java语言包含了大量的包（packages）和类（classes），开发者可以利用Java提供的现有类来完成特定的任务，而不需要从头开始编写代码，这样可以节省时间和努力。<br>C++中的标准模板库（STL）我们已经挺熟悉的了，那么接下来，让我们看看Java API中有什么相应的数据结构：<br>1.ArrayList<br>我们知道在C++中有std::vector，可以动态地调节数组的大小，而在Java中，有一个具有同样功能的容器————<strong>ArrayList</strong>，其用法如下：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp">ArrayList&lt;Book&gt; books = <span class="hljs-keyword">new</span> ArrayList&lt;Book&gt;();<br>books.<span class="hljs-keyword">add</span>(b);<br>books.<span class="hljs-keyword">set</span>(<span class="hljs-number">0</span> , a); <span class="hljs-comment">//相当于insert</span><br>books.<span class="hljs-keyword">remove</span>(<span class="hljs-number">1</span>);  <span class="hljs-comment">//相当于remove</span><br></code></pre></td></tr></table></figure><p>2.Set<br>同样的，我们知道在C++中有std::set，表示集合，而在Java中，有一个具有相似功能的容器————<strong>Set</strong>，其特点如下：</p><ul><li>集合中每个对象只存储一份，即不允许重复</li><li>集合中的对象没有索引，不能通过索引访问对象<br>下面是两种主要的Set实现：</li><li>TreeSet，对应C++中的std::set  有序</li><li>HashSet，对应C++中的std::unordered_set  无序但查找更快</li></ul><p>3.Map<br>更加同样的，我们知道在C++中有std::map，表示映射，而在Java中，有一个具有相似功能的容器————<strong>Map</strong>，其特点如下：</p><ul><li>存储的是键值对（key-value pair）</li><li>可以通过查找键（key）来获取对应的值（value）<br>下面是两种主要的Map实现：</li><li>TreeMap，对应C++中的std::map  有序</li><li>HashMap，对应C++中的std::unordered_map  无序但查找更快</li></ul>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>C++</tag>
      
      <tag>oop</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure6</title>
    <link href="/2025/02/10/Data-Structure6/"/>
    <url>/2025/02/10/Data-Structure6/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎"><a href="#Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎" class="headerlink" title="Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎"></a>Before：maybe是回校前最后一篇DS了😢浅浅立个flag：开学后成为日更博主😎</h5><h2 id="Data-Structure-6-栈的链接实现"><a href="#Data-Structure-6-栈的链接实现" class="headerlink" title="Data Structure 6 栈的链接实现"></a>Data Structure 6 栈的链接实现</h2><h3 id="前情提要"><a href="#前情提要" class="headerlink" title="前情提要"></a>前情提要</h3><p>在上一章节的内容中，我们学习了顺序栈相关知识，知道顺序栈的实现本质是在维护一个动态数组，那么在本章节中要讲解的<strong>链接栈</strong>与顺序栈的实现有何区别呢？</p><h3 id="链接栈的存储实现"><a href="#链接栈的存储实现" class="headerlink" title="链接栈的存储实现"></a>链接栈的存储实现</h3><p>由于与栈相关的操作都是在栈顶进行的，所以并不需要直接前驱，使用单链表即可，也不需要头结点。下图是一个存储的图示：<br><img src="/img/%E9%93%BE%E6%8E%A5%E6%A0%88%E5%AD%98%E5%82%A8.png" alt="链接栈存储"><br>话不多说，上链接栈定义代码！</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">linkStack</span>:<span class="hljs-keyword">public</span> stack&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>            node *next;<br>            elemType data;<br>            <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType &amp;x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>                next = n;<br>                data = x;<br>            &#125;<br>            <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>            ~<span class="hljs-built_in">node</span>();<br>        &#125;;<br><br>        node *top_p; <span class="hljs-comment">//栈顶结点</span><br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">linkStack</span>();<br>        ~<span class="hljs-built_in">linkStack</span>();<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="链接栈运算实现"><a href="#链接栈运算实现" class="headerlink" title="链接栈运算实现"></a>链接栈运算实现</h3><p>构造函数&amp;析构函数：</p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">linkStack</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">linkStack</span>()</span>&#123;<br>    top_p = nullptr;<br>&#125;<br><br>template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">linkStack</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">linkStack</span>()</span>&#123;<br>    node *<span class="hljs-keyword">q</span>;<br>    <span class="hljs-keyword">while</span>(t != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = top_p;<br>        top_p = top_p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> <span class="hljs-keyword">q</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>进栈、出栈、判空、取栈顶元素：</p><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">push</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>)&#123;<br>    top_p = new node(x , top_p);<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">pop</span>()&#123;<br>    node *p = top_p;<br>    top_p = top_p -&gt; next;<br>    elemType x = p -&gt; data;<br>    delete p;<br>    <span class="hljs-keyword">return</span> x;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p == <span class="hljs-literal">null</span>ptr;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">linkStack</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">top</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="STL中的栈"><a href="#STL中的栈" class="headerlink" title="STL中的栈"></a>STL中的栈</h3><p>在STL中，借助于其他容器存储数据的容器称作<strong>容器适配器</strong>。栈借助线性表进行存储，故属于容器适配器。栈可以借助的容器有vector、list和deque。在调用STL::stack时，如果不指定第二个参数，则默认是用deque来存储数据。<br>For example: <code>$stack&lt;int , vector&lt;int&gt;&gt;$</code> <code>$stack&lt;int , list&lt;int&gt;&gt;$</code></p>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>一次交流</title>
    <link href="/2025/02/09/%E4%B8%80%E6%AC%A1%E4%BA%A4%E6%B5%81/"/>
    <url>/2025/02/09/%E4%B8%80%E6%AC%A1%E4%BA%A4%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。"><a href="#Before-今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。" class="headerlink" title="Before: 今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。"></a>Before: 今天（20250209）晚上和爸妈进行了一次交流，下面是对这次交流做的一些整理，希望能从中获得一些启发，在下学期的学习中做出改变。</h5><p>🦈🐬🦭🐳🐋🐟🐠🐡🦐🦑🐙🦞🦀🐚🪸🪼</p><h1 id="大一上学期"><a href="#大一上学期" class="headerlink" title="大一上学期"></a>大一上学期</h1><h2 id="收获-🎖️"><a href="#收获-🎖️" class="headerlink" title="收获 🎖️"></a>收获 🎖️</h2><h3 id="学习层面"><a href="#学习层面" class="headerlink" title="学习层面"></a>学习层面</h3><ul><li>新鲜的知识 ———— 数分 线代 程设</li><li>从未接触过的知识体系</li><li>新的看待科学的眼光</li><li>各类工具的使用</li></ul><h3 id="同学交往"><a href="#同学交往" class="headerlink" title="同学交往"></a>同学交往</h3><ul><li>一些玩的很好的朋友</li><li>一些大佬请教问题</li></ul><h3 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h3><p>学会了一些chore ———— 很多事情只能靠自己，不做不行</p><h3 id="思想"><a href="#思想" class="headerlink" title="思想"></a>思想</h3><p>渐渐地在从高中生思维走出来，慢慢适应大学生活 </p><h2 id="遗憾-😢"><a href="#遗憾-😢" class="headerlink" title="遗憾 😢"></a>遗憾 😢</h2><h3 id="时间管理"><a href="#时间管理" class="headerlink" title="时间管理"></a>时间管理</h3><p>时间分配很不合理，缺少规划意识</p><h3 id="急于求成"><a href="#急于求成" class="headerlink" title="急于求成"></a>急于求成</h3><p>学习浮躁，喜欢和他人作比较，经常莫名其妙地焦虑</p><h2 id="针对性措施"><a href="#针对性措施" class="headerlink" title="针对性措施"></a>针对性措施</h2><h3 id="时间管理-1"><a href="#时间管理-1" class="headerlink" title="时间管理"></a>时间管理</h3><ul><li>列 todoList</li><li>每天最后可以以日记的形式对一天进行复盘</li></ul><h3 id="急于求成-1"><a href="#急于求成-1" class="headerlink" title="急于求成"></a>急于求成</h3><ul><li>“榜样的力量” 找到一个比自己优秀的人，像TA看齐 ————目标意识</li><li>学业上稳扎稳打，不要一味追求速度，重视完成的质量</li></ul><h1 id="新学期（大一下学期）"><a href="#新学期（大一下学期）" class="headerlink" title="新学期（大一下学期）"></a>新学期（大一下学期）</h1><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><h3 id="做出改变"><a href="#做出改变" class="headerlink" title="做出改变"></a>做出改变</h3><ul><li>减少无意义的社交</li><li>对问题进行更加深入的思考 ————深度思考</li></ul><h3 id="温故而知新"><a href="#温故而知新" class="headerlink" title="温故而知新"></a>温故而知新</h3><ul><li>反思旧学期存在的问题</li><li>为新学期指定可执行性强的计划</li></ul><h3 id="学习总结"><a href="#学习总结" class="headerlink" title="学习总结"></a>学习总结</h3><ul><li>多与老师、学长、同学进行交流</li><li>一个问题想3遍</li></ul><h2 id="生活-1"><a href="#生活-1" class="headerlink" title="生活"></a>生活</h2><h3 id="每天11-30睡"><a href="#每天11-30睡" class="headerlink" title="每天11:30睡"></a>每天11:30睡</h3><p>😴😴😴</p><h3 id="每天6-30-7-00起床"><a href="#每天6-30-7-00起床" class="headerlink" title="每天6:30 - 7:00起床"></a>每天6:30 - 7:00起床</h3><p>🛏️🛏️🛏️</p><h3 id="（无特殊情况）图书馆待到10-30"><a href="#（无特殊情况）图书馆待到10-30" class="headerlink" title="（无特殊情况）图书馆待到10:30"></a>（无特殊情况）图书馆待到10:30</h3><p>🧑‍💻👨‍💻👩‍💻</p><h3 id="尽量少点外卖，多去食堂"><a href="#尽量少点外卖，多去食堂" class="headerlink" title="尽量少点外卖，多去食堂"></a>尽量少点外卖，多去食堂</h3><p>🍚🍛🍙</p><h3 id="（由于身体原因）禁止任何含咖啡因的食物"><a href="#（由于身体原因）禁止任何含咖啡因的食物" class="headerlink" title="（由于身体原因）禁止任何含咖啡因的食物"></a>（由于身体原因）禁止任何含咖啡因的食物</h3><p>❌❌❌</p><h3 id="按时服用药物"><a href="#按时服用药物" class="headerlink" title="按时服用药物"></a>按时服用药物</h3><p>💊💊💊</p><h2 id="思想-1"><a href="#思想-1" class="headerlink" title="思想"></a>思想</h2><h3 id="“立志”"><a href="#“立志”" class="headerlink" title="“立志”"></a>“立志”</h3><p>种下一个梦想，为之奋斗<br>追逐心中的那束光</p><h3 id="“正能量”"><a href="#“正能量”" class="headerlink" title="“正能量”"></a>“正能量”</h3><p>做一个快乐、正面、积极、幸福、知足的人❤️</p>]]></content>
    
    
    
    <tags>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic2</title>
    <link href="/2025/02/09/Java-Basic2/"/>
    <url>/2025/02/09/Java-Basic2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：快开学了（-还没玩够呢呜呜呜😢-）"><a href="#Before：快开学了（-还没玩够呢呜呜呜😢-）" class="headerlink" title="Before：快开学了（ 还没玩够呢呜呜呜😢 ）"></a>Before：快开学了（ 还没玩够呢呜呜呜😢 ）</h5><p>下面是一点碎碎念吧：<br>昨天和fz学弟吃饭，震惊于学弟对物竞的执着，想必是没法把学弟骗来泥交了吧🤣🤣🤣。想起了3年前的自己对数竞也是一样的痴迷，励志要把一生都献给纯数研究。当时应该还在学物竞，尝试着数物双修。还是在寒假后放弃了物理，选了数学，当然最后也只以高二的省一草草收场。有时候想，如果当时跟大多数人一样学了物理，大概至少也有个国一吧。经常嘴上说自己物理差数学好，其实细想自己还是挺喜欢物竞的。下学期也是终于有物理课了，希望能借此找到以前对物理的热爱❤️</p><h2 id="Java-Basic-2"><a href="#Java-Basic-2" class="headerlink" title="Java Basic 2"></a>Java Basic 2</h2><h3 id="Good-Programing-Style-代码风格"><a href="#Good-Programing-Style-代码风格" class="headerlink" title="Good Programing Style 代码风格"></a><strong>Good Programing Style 代码风格</strong></h3><ul><li>Rule 1 : 使用好的&#x2F;有意义的变量名</li><li>Rule 2 : 正确的缩进  Ctrl + shift + F 可自动调节缩进</li><li>Rule 3 : 空格 （特别是在复杂的表达式中） 空行 增强可读性</li><li>Rule 4 : 不要重复测试 可能存在多个条件判断中不必要的重复检查等问题，使得代码不够简洁和高效。</li></ul><h3 id="循环-Loops"><a href="#循环-Loops" class="headerlink" title="循环 Loops"></a>循环 Loops</h3><p>Java中有几个循环语句，与C ++ 中几乎一致</p><h4 id="while循环"><a href="#while循环" class="headerlink" title="while循环"></a>while循环</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">while</span><span class="hljs-params">( condition )</span></span>&#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="for循环"><a href="#for循环" class="headerlink" title="for循环"></a>for循环</h4><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">for</span><span class="hljs-params">(initialization; condition ; updata)</span></span>&#123;<br>    statements<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="break-continue"><a href="#break-continue" class="headerlink" title="break &amp; continue"></a>break &amp; continue</h4><p>与C ++ 中用法一致</p><h3 id="数组-Arrays"><a href="#数组-Arrays" class="headerlink" title="数组 Arrays"></a>数组 Arrays</h3><p>与C ++ 同样都是 0 ~ base - 1</p><h4 id="Arrays-的定义"><a href="#Arrays-的定义" class="headerlink" title="Arrays 的定义"></a>Arrays 的定义</h4><p>int[] values;  &#x2F;&#x2F;整型一维数组<br>int[][] values; &#x2F;&#x2F;整型二维数组<br>如果想创建一个固定大小的数组，使用运算符 new<br>int[] values &#x3D; new int[5];</p><h4 id="Arrays-初始化"><a href="#Arrays-初始化" class="headerlink" title="Arrays 初始化"></a>Arrays 初始化</h4><p>注意：这种方法只能在声明变量时使用：<br>int[] values &#x3D; {12 , 24 , -23 , 47};</p><h4 id="Arrays-访问"><a href="#Arrays-访问" class="headerlink" title="Arrays 访问"></a>Arrays 访问</h4><p>同样是下标访问  values[index]</p><h4 id="length-变量"><a href="#length-变量" class="headerlink" title="length 变量"></a>length 变量</h4><p>Java数组在这里与C++数组存在一点区别：<br>C++中length变量只存在于STL容器中，普通数组并不具备这一变量，但Java中则存在<br>For example:</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">int</span>[] <span class="hljs-keyword">values</span> = <span class="hljs-built_in">new</span> <span class="hljs-type">int</span>[<span class="hljs-number">12</span>];<br><span class="hljs-type">int</span> size = <span class="hljs-keyword">values</span>.length;<br></code></pre></td></tr></table></figure><h4 id="String-Array"><a href="#String-Array" class="headerlink" title="String Array"></a>String Array</h4><p>Java中允许字符串数组（C ++ 中并不允许string数组）</p><h3 id="Object-Oriented-Programing-面向对象编程"><a href="#Object-Oriented-Programing-面向对象编程" class="headerlink" title="Object Oriented Programing 面向对象编程"></a>Object Oriented Programing 面向对象编程</h3><h4 id="Why-use-classes"><a href="#Why-use-classes" class="headerlink" title="Why use classes ?"></a>Why use classes ?</h4><p><img src="/img/whyclasses1.png" alt="Why use classes"><br><img src="/img/whyclasses2.png" alt="Why use classes"></p><h4 id="Class-Definition"><a href="#Class-Definition" class="headerlink" title="Class Definition"></a>Class Definition</h4><p><code>Baby myBaby = new Baby();</code></p><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">public <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Baby</span></span>&#123;<br>    fields<br>    methods<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="构造函数-constructer"><a href="#构造函数-constructer" class="headerlink" title="构造函数 constructer"></a>构造函数 constructer</h4><ul><li>函数名即为类名</li><li>没有返回值</li><li>通常初始化fields</li><li>每个类至少需要一个构造函数<br>For example:<figure class="highlight arduino"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs arduino"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Baby</span>&#123;<br>    <span class="hljs-type">String</span> name;<br>    <span class="hljs-type">boolean</span> isMale;<br>    <span class="hljs-built_in">Baby</span>(<span class="hljs-type">String</span> myname , <span class="hljs-type">boolean</span> malebaby)&#123;<br>        name = myname;<br>        isMale = malebaby;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h4 id="调用类"><a href="#调用类" class="headerlink" title="调用类"></a>调用类</h4><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim">public class <span class="hljs-type">Baby</span> <span class="hljs-meta">&#123;...&#125;</span><br><span class="hljs-type">Baby</span> <span class="hljs-type">Jane</span> = new <span class="hljs-type">Baby</span>(<span class="hljs-string">&quot;JaneZ&quot;</span> , <span class="hljs-literal">false</span> );<br><span class="hljs-type">System</span>.<span class="hljs-keyword">out</span>.println(<span class="hljs-type">Jane</span>.name);<br><span class="hljs-type">Jane</span>.sayhi();<br></code></pre></td></tr></table></figure><h3 id="基本数据类型-VS-引用数据类型"><a href="#基本数据类型-VS-引用数据类型" class="headerlink" title="基本数据类型 VS 引用数据类型"></a>基本数据类型 VS 引用数据类型</h3><h4 id="基本数据类型"><a href="#基本数据类型" class="headerlink" title="基本数据类型"></a>基本数据类型</h4><p>包括 int（整数）、long（长整数）、double（双精度浮点数）、boolean（布尔值）、char（字符）、short（短整数）、byte（字节）、float（单精度浮点数）</p><h4 id="引用数据类型"><a href="#引用数据类型" class="headerlink" title="引用数据类型"></a>引用数据类型</h4><p>数组和对象<br>所占的空间比基本数据类型要大的多</p><h3 id="Java-对Object-的存储——引用！"><a href="#Java-对Object-的存储——引用！" class="headerlink" title="Java 对Object 的存储——引用！"></a>Java 对Object 的存储——引用！</h3><p><strong>Reference</strong>: Object的存储位置<br>遵循对对象的引用 &lt;-&gt; 按照指示前往一所房子<br>改变对象中的字段 &lt;-&gt; 挪动房子里的家具</p><h3 id="静态数据类型和函数"><a href="#静态数据类型和函数" class="headerlink" title="静态数据类型和函数"></a>静态数据类型和函数</h3><p>静态字段或函数是为类声明（class declaration）而定义的<br>也就是说，它们属于类本身，而不是类的某个具体实例</p><h4 id="Why-public-static-void-main-String-arguments"><a href="#Why-public-static-void-main-String-arguments" class="headerlink" title="Why public static void main(String[] arguments)"></a>Why <code>public static void main(String[] arguments)</code></h4><ul><li>无需实例化：程序启动时，Java 虚拟机（JVM）需要直接调用 main 方法来执行程序。如果 main 方法不是 static，JVM 就需要先实例化一个类的对象，然后才能调用 main 方法，但在程序启动初期，没有合适的机制来创建对象，所以将 main 声明为 static，JVM 可以直接通过类名调用它，无需创建类的实例。</li><li>内存和性能考虑：静态方法在类加载时就已经绑定到类上，调用时不需要额外的对象创建开销，这有助于提高程序启动的效率，并且在程序启动阶段也更符合内存管理和性能优化的需求。</li></ul>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
      <tag>OOP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure5</title>
    <link href="/2025/02/09/Data-Structure5/"/>
    <url>/2025/02/09/Data-Structure5/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ今天更新频率有点高啊😎😎😎（-这么良心的up还不快三连一下🤣🤣🤣-）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（-应该坐完了永初路——福建路这一段-），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（-nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕"><a href="#Before：JaneZ今天更新频率有点高啊😎😎😎（-这么良心的up还不快三连一下🤣🤣🤣-）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（-应该坐完了永初路——福建路这一段-），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（-nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕" class="headerlink" title="Before：JaneZ今天更新频率有点高啊😎😎😎（ 这么良心的up还不快三连一下🤣🤣🤣 ）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（ 应该坐完了永初路——福建路这一段 ），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（ nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕"></a>Before：JaneZ今天更新频率有点高啊😎😎😎（ 这么良心的up还不快三连一下🤣🤣🤣 ）南京几个月前新开通了7号线，作为资深轨道交通爱好者的JaneZ也是在回到南京的第二天光速打卡了（ 应该坐完了永初路——福建路这一段 ），比较熟悉的几个站点就是中胜、大士茶亭、草场门、古平岗还有福建路（ nsfz校车！）吧。前2天去省人民看病，顺带打卡了7号线网红站点——清凉山！真的好看！地下6层是真的厉害！附上图片一张💕💕💕</h5><p><img src="/img/Metro.png" alt="清凉山地铁站"></p><h2 id="Data-Structure-5-栈"><a href="#Data-Structure-5-栈" class="headerlink" title="Data Structure 5 栈"></a>Data Structure 5 栈</h2><h3 id="栈的定义"><a href="#栈的定义" class="headerlink" title="栈的定义"></a>栈的定义</h3><ul><li>一种特殊的线性表，插入删除运算限定在表的某一端进行</li><li>允许进行插入删除操作的一端称为<strong>栈顶</strong>，另一端称为<strong>栈底</strong></li><li>处于栈顶位置中的数据元素称为<strong>栈顶元素</strong>，若栈中没有元素，则称为<strong>空栈</strong></li><li>LIFO表（后进先出表）</li></ul><h3 id="栈的抽象类"><a href="#栈的抽象类" class="headerlink" title="栈的抽象类"></a>栈的抽象类</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">stack</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//判栈空</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//进栈</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//出栈</span><br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">//取栈顶元素</span><br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">stack</span>(); <span class="hljs-comment">//虚析构函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="栈的顺序实现"><a href="#栈的顺序实现" class="headerlink" title="栈的顺序实现"></a>栈的顺序实现</h3><p>栈的顺序实现称为<strong>顺序栈</strong><br>顺序栈的实现需要3个变量：</p><ul><li>一个指向栈元素类型的指针（指向动态数组的首地址）</li><li>一个表示数组规模的整型数</li><li>一个表示栈顶位置的整型数<br><img src="/img/%E9%A1%BA%E5%BA%8F%E6%A0%88%E5%AD%98%E5%82%A8.png" alt="顺序栈存储"></li></ul><h4 id="下面是一个顺序栈类的定义"><a href="#下面是一个顺序栈类的定义" class="headerlink" title="下面是一个顺序栈类的定义"></a>下面是一个顺序栈类的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span> &lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqStack</span> : <span class="hljs-keyword">public</span> stack&lt;elemType&gt;&#123;<br>    <span class="hljs-keyword">private</span>:<br>        elemType *elem;<br>        <span class="hljs-type">int</span> top_p;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-built_in">seqStack</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqStack</span>();<br>        <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">push</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">pop</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">top</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">bool</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">isEmpty</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> top_p == <span class="hljs-number">-1</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">push</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(top_p == maxSize <span class="hljs-number">-1</span>)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    top_p ++;<br>    elem[top_p] == x;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">pop</span>()&#123;<br>    top_p --;<br>    <span class="hljs-keyword">return</span> elem[top_p + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template &lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">top</span>() <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> elem[top_p];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template &lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">doubleSpace</span>()</span>&#123;<br>    elemType *tmp = elem;<br>    elem = new elemType[<span class="hljs-number">2</span> * maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; maxSize ; i ++)&#123;<br>        elem[i] = tmp[i];<br>    &#125;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    <span class="hljs-keyword">delete</span> []tmp;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure4</title>
    <link href="/2025/02/07/Data-Structure4/"/>
    <url>/2025/02/07/Data-Structure4/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）"><a href="#Before：JaneZ换了一家咖啡店，人在Manner-Coffee-身后10米有一只孔雀（附上图片🥶🥶🥶-）" class="headerlink" title="Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）"></a>Before：JaneZ换了一家咖啡店，人在Manner Coffee ,身后10米有一只孔雀（附上图片🥶🥶🥶 ）</h5><p><img src="/img/%E5%AD%94%E9%9B%80.png" alt="孔雀"></p><h2 id="Data-Structure-4-约瑟夫环-动态内存分配"><a href="#Data-Structure-4-约瑟夫环-动态内存分配" class="headerlink" title="Data Structure 4 约瑟夫环 动态内存分配"></a>Data Structure 4 约瑟夫环 动态内存分配</h2><h3 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h3><p>约瑟夫环是一个很经典的循环链表问题，初次见于OJ上一道经典的题——春樱对决（ ACMOJ1088 ）<br>下面给出约瑟夫环问题一个最简单的例子（报到3倍数击毙）</p><h4 id="构建循环链表"><a href="#构建循环链表" class="headerlink" title="构建循环链表"></a>构建循环链表</h4><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs abnf"><span class="hljs-attribute">head</span> <span class="hljs-operator">=</span> p  new node(<span class="hljs-number">0</span>)<span class="hljs-comment">;</span><br>for(int i <span class="hljs-operator">=</span> <span class="hljs-number">1</span> <span class="hljs-comment">; i &lt; n ; i ++)&#123;</span><br>    p <span class="hljs-operator">=</span> p -&gt; next <span class="hljs-operator">=</span> new node(i)<span class="hljs-comment">;</span><br>&#125;<br>p -&gt; next <span class="hljs-operator">=</span> head<span class="hljs-comment">; //首尾相连</span><br></code></pre></td></tr></table></figure><h4 id="删除结点（也就是击毙的操作）"><a href="#删除结点（也就是击毙的操作）" class="headerlink" title="删除结点（也就是击毙的操作）"></a>删除结点（也就是击毙的操作）</h4><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs xl">q = head;<br><span class="hljs-function"><span class="hljs-title">while</span>(q -&gt;</span> next != q)&#123;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = q -&gt;</span> next;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>    <span class="hljs-comment">//删除q</span><br>    <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = q -&gt;</span> next;<br>    delete q;<br>    <span class="hljs-function"><span class="hljs-title">q</span> = p -&gt;</span> next;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h3><h4 id="动态变量"><a href="#动态变量" class="headerlink" title="动态变量"></a>动态变量</h4><ul><li>存储在内存中一个被称为<strong>堆</strong>的区域中，由一个堆管理器进行管理</li><li>new 操作时分配一块空间，delete 操作时回收一块空间<br>但是不断的 new delete 操作会导致内存空间的碎片化，应该如何管理这些内存片段呢？😢</li></ul><h4 id="动态内存管理"><a href="#动态内存管理" class="headerlink" title="动态内存管理"></a>动态内存管理</h4><ul><li>所有的空闲片段形成一个集合，按地址顺序排列就得到了线性表，故堆空间的管理实际上就是在<strong>维护一个线性表</strong></li><li>由于该线性表经常需要删除操作（就是 new ）,并且delete操作时可能需要把一些潜在的相邻的闲置空间进行合并，所以用双链表比较合适</li></ul><h4 id="模拟动态内存管理的memory类（感觉这种理解很有意思）"><a href="#模拟动态内存管理的memory类（感觉这种理解很有意思）" class="headerlink" title="模拟动态内存管理的memory类（感觉这种理解很有意思）"></a>模拟动态内存管理的memory类（感觉这种理解很有意思）</h4><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">class memory&#123;<br>    struct <span class="hljs-keyword">node</span><span class="hljs-title">&#123;</span><br><span class="hljs-title">        int</span> <span class="hljs-literal">start</span>; //起始地址<br>        int end; //终止地址<br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*prev</span>; <br>        <span class="hljs-keyword">node</span> <span class="hljs-title">*next</span>;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">(int</span> s, int e,<span class="hljs-keyword">node</span> <span class="hljs-title">*p</span> = nullptr,<span class="hljs-keyword">node</span> <span class="hljs-title">*n</span> = nullptr)&#123;<br>            <span class="hljs-literal">start</span> = s;<br>            end = e;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-keyword">node</span><span class="hljs-title">()&#123;</span><br><span class="hljs-title">            prev</span> = nullptr;<br>            next = nullptr;<br>        &#125;<br>    &#125;;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*head</span>;<br>    <span class="hljs-keyword">node</span> <span class="hljs-title">*tail</span>;<br><br>    public:<br>        memory(int capacity);<br>        int malloc(int size); //申请一块大小为size的空间，返回起始地址<br>        void free(int <span class="hljs-literal">start</span>,int size); //释放从<span class="hljs-literal">start</span>开始、大小为size的空间<br>        ~memory();<br>&#125;;<br></code></pre></td></tr></table></figure><figure class="highlight xquery"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs xquery">memory::memory(int capacity)&#123;<br>   <span class="hljs-built_in"> head</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> = new <span class="hljs-type">node</span>(<span class="hljs-number">0</span> , capacity - <span class="hljs-number">1</span>,<span class="hljs-built_in"> head</span>);<br>   <span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span> -&gt; <span class="hljs-keyword">next</span> =<span class="hljs-built_in"> tail</span> = new <span class="hljs-type">node</span>;<br>   <span class="hljs-built_in"> tail</span> -&gt; prev =<span class="hljs-built_in"> head</span> -&gt; <span class="hljs-keyword">next</span>;<br>&#125;<br><br>memory::~memory()&#123;<br>    <span class="hljs-type">node</span> *p =<span class="hljs-built_in"> head</span>;<br>    <span class="hljs-type">node</span> *q;<br>    while(p != nullpter)&#123;<br>        q = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = q;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs xl">int malloc(int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    int returnValue;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> &lt; size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p == tail)&#123;<br>        return -<span class="hljs-number">1</span>; <span class="hljs-comment">//没有找到</span><br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">returnValue</span> = p -&gt;</span> start;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> - p -&gt;</span> start + <span class="hljs-number">1</span> == size)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = p -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> = p -&gt;</span> prev;<br>        delete p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start += size;<br>    &#125;<br>    return returnValue;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs xl">void memory::free(int start, int size)&#123;<br>    <span class="hljs-function"><span class="hljs-title">node</span> *p = head -&gt;</span> next;<br>    node *np;<br>    <span class="hljs-function"><span class="hljs-title">while</span>(p != tail &amp;&amp; p -&gt;</span> start &lt; start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> = p -&gt;</span> next;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p != tail &amp;&amp; start + size == p -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> start = start;<br>        np = p;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-function"><span class="hljs-title">np</span> = new node(start , start + size - 1 ,p -&gt;</span> prev, p );<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">prev</span> -&gt;</span> next = np;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> prev = np;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-title">p</span> = np -&gt;</span> prev;<br>    <span class="hljs-function"><span class="hljs-title">if</span>(p -&gt;</span> <span class="hljs-function"><span class="hljs-title">end</span> + 1 == np -&gt;</span> start)&#123;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> <span class="hljs-function"><span class="hljs-title">next</span> = np -&gt;</span> next;<br>        <span class="hljs-function"><span class="hljs-title">p</span> -&gt;</span> end == start + size - <span class="hljs-number">1</span>;<br>        delete np;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure3</title>
    <link href="/2025/02/07/Data-Structure3/"/>
    <url>/2025/02/07/Data-Structure3/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）"><a href="#Before-最近装了个虚拟机（-为了Games101配的环境-），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（-打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了-）" class="headerlink" title="Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）"></a>Before: 最近装了个虚拟机（ 为了Games101配的环境 ），结果很不幸出了一点小小的问题，使得正宫WSL用不了辣（正在紧急维修中）。但是DS的学习是不可中断的！冲！（ 打下这段文字时JaneZ正坐在拥挤的省人民医院诊室门口的地上，脚都麻了 ）</h5><h2 id="Data-Structure-3-双链表-容器-迭代器"><a href="#Data-Structure-3-双链表-容器-迭代器" class="headerlink" title="Data Structure 3 双链表 容器 迭代器"></a>Data Structure 3 双链表 容器 迭代器</h2><p>在上一节中，我们非常详细地实现了一个单链表类（算是对上学期所学进行了一个复习），我个人认为，双链表与单链表并不存在多么显著的区别。所以本章节中关于双链表的部分会相对比较简洁。</p><h3 id="双链表"><a href="#双链表" class="headerlink" title="双链表"></a>双链表</h3><ul><li>定义：（和单链表不同的地方）每个结点既保存直接后继结点的地址，也保存直接前驱结点的地址（单链表只保存直接后继结点的地址）</li><li>拥有直接前驱结点的地址实际上意味着双链表可以从后向前访问</li><li>双链表中既包含了一个头结点head ,还包含了一个尾结点tail；保存一个双链表事实上就是保存头尾两个结点的地址<br>下面是一个双链表类的定义：<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *prev;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x ,node *p = <span class="hljs-literal">nullptr</span>, node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            prev = p;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">prev</span>(<span class="hljs-literal">nullptr</span>),<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br>node *tail;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">dLinkList</span>();<br>    ~<span class="hljs-built_in">dLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>        <span class="hljs-keyword">delete</span> tail;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h3 id="容器与迭代器"><a href="#容器与迭代器" class="headerlink" title="容器与迭代器"></a>容器与迭代器</h3><ul><li>本质上我们所说的数据结构，就是在<strong>保存一组相互之间具有某种关系的数据元素</strong>。而C++把每个数据结构的实现称为<strong>一个容器</strong></li><li>在设计容器时，我们通常为每种容器定义一个相应的表示其中对象位置的类型，称作<strong>迭代器</strong>，相当于指向容器中对象的指针</li><li>设计一个迭代器包括2个部分:<br>(1) 如何标识容器中某一对象的位置<br>(2) 如何实现迭代器的操作</li><li>为了方便用户使用，STL将迭代器类（iterator , const_iterator）定义成相应容器类的公有内嵌类</li><li>注意：iterator类可通过迭代器修改指向元素的值，而const_iterator只可以通过迭代器读取指向元素的值</li></ul><h4 id="下面是一些迭代器自身的常见操作："><a href="#下面是一些迭代器自身的常见操作：" class="headerlink" title="下面是一些迭代器自身的常见操作："></a>下面是一些迭代器自身的常见操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8.png" alt="迭代器自身操作"></p><h4 id="这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现："><a href="#这是我手搓的STL-list类中内嵌iterator类（-const-iterator类几乎同理，只是const版本🤣🤣🤣-）的实现：" class="headerlink" title="这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现："></a>这是我手搓的STL list类中内嵌iterator类（ const_iterator类几乎同理，只是const版本🤣🤣🤣 ）的实现：</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">class</span> <span class="hljs-title class_">iterator</span> &#123;<br>    <span class="hljs-keyword">private</span>:<br>        node* ptr;<br>    <span class="hljs-keyword">public</span>:<br>        iterator(node* p = nullptr) : ptr(p) &#123;&#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>++() &#123;<br>            ptr = ptr-&gt;next;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator&amp; <span class="hljs-keyword">operator</span>--() &#123;<br>            ptr = ptr-&gt;prev;<br>            <span class="hljs-keyword">return</span> *<span class="hljs-keyword">this</span>;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>++(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            ++(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        iterator <span class="hljs-keyword">operator</span>--(int) &#123;<br>            iterator tmp = *<span class="hljs-keyword">this</span>;<br>            --(*<span class="hljs-keyword">this</span>);<br>            <span class="hljs-keyword">return</span> tmp;<br>        &#125;<br><br>        T&amp; <span class="hljs-keyword">operator</span>*() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> ptr-&gt;<span class="hljs-keyword">data</span>;<br>        &#125;<br><br>        T* <span class="hljs-keyword">operator</span>-&gt;() <span class="hljs-keyword">const</span> noexcept &#123;<br>            <span class="hljs-keyword">return</span> &amp;(ptr-&gt;<span class="hljs-keyword">data</span>);<br>        &#125;<br><br>        <span class="hljs-comment">/* A operator to check whether two iterators are same (pointing to the same memory) */</span><br>        friend bool <span class="hljs-keyword">operator</span>==(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>           <span class="hljs-keyword">return</span> (a.ptr == b.ptr);<br>        &#125;<br><br>        friend bool <span class="hljs-keyword">operator</span>!=(<span class="hljs-keyword">const</span> iterator&amp; a, <span class="hljs-keyword">const</span> iterator&amp; b) &#123;<br>            <span class="hljs-keyword">return</span> (a.ptr != b.ptr);<br>        &#125;<br><br>        friend <span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="以线性表为例"><a href="#以线性表为例" class="headerlink" title="以线性表为例"></a>以线性表为例</h3><h4 id="下面是一些list类和vector类中的迭代器相关操作："><a href="#下面是一些list类和vector类中的迭代器相关操作：" class="headerlink" title="下面是一些list类和vector类中的迭代器相关操作："></a>下面是一些list类和vector类中的迭代器相关操作：</h4><p><img src="/img/%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9B%B8%E5%85%B3%E6%93%8D%E4%BD%9C.png" alt="迭代器相关操作"></p><h4 id="这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡："><a href="#这是我手搓的STL-list类中与迭代器相关的一些操作的实现🫡🫡🫡：" class="headerlink" title="这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡："></a>这是我手搓的STL list类中与迭代器相关的一些操作的实现🫡🫡🫡：</h4><p>注：其实存在一些问题（ 因为我的实现并没有考虑模板类型T 不具有默认构造函数的情况 😢 ）</p><figure class="highlight scss"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs scss"><span class="hljs-comment">/* Return an iterator pointing to the first element. */</span><br>iterator <span class="hljs-built_in">begin</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(head-&gt;next);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cbegin</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(head-&gt;next);<br>&#125;<br><br><span class="hljs-comment">/* Return an iterator pointing to one past the last element. */</span><br>iterator <span class="hljs-built_in">end</span>() noexcept &#123;<br>    return <span class="hljs-built_in">iterator</span>(tail);<br>&#125;<br><br>const_iterator <span class="hljs-built_in">cend</span>() const noexcept &#123;<br>    return <span class="hljs-built_in">const_iterator</span>(tail);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">iterator</span> insert(<span class="hljs-keyword">iterator</span> pos, <span class="hljs-keyword">const</span> T&amp; value) &#123;<br>    node* n = new node(value, pos.<span class="hljs-keyword">ptr</span>-&gt;prev, pos.<span class="hljs-keyword">ptr</span>);<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev-&gt;next = n;<br>    pos.<span class="hljs-keyword">ptr</span>-&gt;prev = n;<br>    ++ currentLength;<br>    <span class="hljs-keyword">return</span> <span class="hljs-keyword">iterator</span>(n);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight xl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs xl">iterator erase(iterator pos) noexcept &#123;<br>    <span class="hljs-keyword">if</span> (pos == end()) &#123;<br>        return end();<br>    &#125;<br>    node* tmp = pos.ptr;<br>    <span class="hljs-function"><span class="hljs-title">iterator</span> it(tmp-&gt;</span>next);<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span> = tmp-&gt;</span>next;<br>    <span class="hljs-function"><span class="hljs-title">tmp</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">next</span>-&gt;</span><span class="hljs-function"><span class="hljs-title">prev</span> = tmp-&gt;</span>prev;<br>    delete tmp;<br>    -- currentLength;<br>    return it;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis2</title>
    <link href="/2025/02/05/Maths-Analysis2/"/>
    <url>/2025/02/05/Maths-Analysis2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-好的，又来水文章了。今天要讲的是："><a href="#Before-好的，又来水文章了。今天要讲的是：" class="headerlink" title="Before: 好的，又来水文章了。今天要讲的是："></a>Before: 好的，又来水文章了。今天要讲的是：</h5><h2 id="Maths-Analysis-2-一致收敛判别法"><a href="#Maths-Analysis-2-一致收敛判别法" class="headerlink" title="Maths Analysis 2 一致收敛判别法"></a>Maths Analysis 2 一致收敛判别法</h2><h3 id="第一种：比较判别法"><a href="#第一种：比较判别法" class="headerlink" title="第一种：比较判别法"></a>第一种：比较判别法</h3><p><img src="/img/%E6%AF%94%E8%BE%83%E5%88%A4%E5%88%AB.png" alt="比较判别法"></p><h3 id="第二种：Dirichlet判别法"><a href="#第二种：Dirichlet判别法" class="headerlink" title="第二种：Dirichlet判别法"></a>第二种：Dirichlet判别法</h3><p><img src="/img/%E8%BF%AA%E5%88%A9%E5%85%8B%E9%9B%B7%E5%88%A4%E5%88%AB.png" alt="Dirichlet判别法"></p><h3 id="第三种：Abel判别法"><a href="#第三种：Abel判别法" class="headerlink" title="第三种：Abel判别法"></a>第三种：Abel判别法</h3><p><img src="/img/%E9%98%BF%E8%B4%9D%E5%B0%94%E5%88%A4%E5%88%AB.png" alt="Abel判别法"></p><h3 id="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"><a href="#总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些" class="headerlink" title="总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些"></a>总结一下：这三种判别法跟上学期所学的反常积分敛散性判别法和级数敛散性的判别法是很相似的，甚至还更为简洁一些</h3><ul><li>收敛 &lt;-&gt; 一致收敛</li><li>有界 &lt;-&gt; 一致有界</li><li>其实今天仔细一想，对于函数列的问题，好像就应该讨论一致收敛而不是普通的收敛。主要是我觉得吧，普通收敛引入了一个很麻烦的x 😅😅😅</li></ul>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Basic1</title>
    <link href="/2025/02/03/Java-Basic1/"/>
    <url>/2025/02/03/Java-Basic1/</url>
    
    <content type="html"><![CDATA[<h5 id="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"><a href="#JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）" class="headerlink" title="JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）"></a>JaneZ的Java学习启动了（本来上学期中就想开始的，但大作业真的难评）</h5><h4 id="Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java"><a href="#Before-我选择了MIT-6-092-Introduction-To-Programming-In-Java作为Java的入门，目标是快速上手Java" class="headerlink" title="Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java"></a>Before: 我选择了MIT 6.092: Introduction To Programming In Java作为Java的入门，目标是快速上手Java</h4><h2 id="Java-Basic-1"><a href="#Java-Basic-1" class="headerlink" title="Java Basic 1"></a>Java Basic 1</h2><h3 id="Compiling-Java"><a href="#Compiling-Java" class="headerlink" title="Compiling Java"></a>Compiling Java</h3><p>Source Code(.java) -&gt; javac -&gt; Byte Code -&gt; java</p><h3 id="Java版的Hello-world"><a href="#Java版的Hello-world" class="headerlink" title="Java版的Hello world"></a>Java版的Hello world</h3><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Hello</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-title class_">String</span>[] <span class="hljs-variable language_">arguments</span></span>)&#123;<br>        <span class="hljs-title class_">System</span>.<span class="hljs-property">out</span>,<span class="hljs-title function_">printIn</span>(<span class="hljs-string">&quot;Hello world.&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Program-Structure"><a href="#Program-Structure" class="headerlink" title="Program Structure"></a>Program Structure</h3><p>class <strong>CLASSNAME</strong>{<br>    public static void main(String[] arguments){<br>        <strong>STATEMENTS</strong><br>    }<br>}</p><h3 id="输出"><a href="#输出" class="headerlink" title="输出"></a>输出</h3><p>System.out.printIn(some String)<br>Example:</p><ul><li>System.output.printIn(“output”);</li><li>Console: output</li></ul><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><p>boolean 相当于C&#x2F;C++中的bool<br>int 相当于C&#x2F;C++中的int<br>double 相当于C&#x2F;C++中的double<br>String 相当于C&#x2F;C++中的string<br><strong>注意：Java要求数据类型必须正确匹配</strong><br>如：String five &#x3D; 5; &#x2F;&#x2F; ERROR</p><h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><p>Form:<br>Type Name;</p><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><p>使用 &#x3D;  与C&#x2F;C++相同<br>Example:<br>String foo;<br>foo &#x3D; “IAP 6.092”;<br>double badPi &#x3D; 3.14;</p><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><p>与C&#x2F;C++完全一致<br>&#x3D; + - * &#x2F;(整数进行&#x2F;时同样是向下取整)<br><strong>注意： double b &#x3D; 5&#x2F;2; &#x2F;&#x2F; b &#x3D; 2.0</strong><br>优先级：括号 &gt; 乘除法 &gt; 加减法<br>也支持 +&#x3D; -&#x3D; *&#x3D; &#x2F;&#x3D; 等复合运算符</p><h3 id="字符串加法"><a href="#字符串加法" class="headerlink" title="字符串加法"></a>字符串加法</h3><p>String text &#x3D; “hello” + “world”;<br>text &#x3D; text + “number” + 5;<br>&#x2F;&#x2F; text &#x3D; “helloworldnumber5”;</p><h3 id="关于类型转换"><a href="#关于类型转换" class="headerlink" title="关于类型转换"></a>关于类型转换</h3><ul><li>强制类型转换 ： int a &#x3D; (int)18.7;</li><li>隐式类型转换 ：double a &#x3D; 2;&#x2F;&#x2F;2.0</li></ul><h3 id="Java的函数——Method"><a href="#Java的函数——Method" class="headerlink" title="Java的函数——Method"></a>Java的函数——Method</h3><p>Example:</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><p>调用：NAME();</p><h4 id="一个更复杂的例子"><a href="#一个更复杂的例子" class="headerlink" title="一个更复杂的例子"></a>一个更复杂的例子</h4><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-keyword">class</span> <span class="hljs-title">NewLine</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">newLine</span>()</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">threeLines</span>()</span>&#123;<br>        newLine();<br>        newLine();<br>        newLine();<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span>(<span class="hljs-params">String[] arguments</span>)</span>&#123;<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 1&quot;</span>);<br>        threeLines();<br>        System.<span class="hljs-keyword">out</span>.printIn(<span class="hljs-string">&quot;Line 2&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="函数参数Parameter"><a href="#函数参数Parameter" class="headerlink" title="函数参数Parameter"></a>函数参数Parameter</h4><p>Example:</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><p>调用：<br>NAME(EXPRESSION);<br>Another Example:<br>多个参数</p><figure class="highlight delphi"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs delphi"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> void <span class="hljs-keyword">NAME</span>(<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>,<span class="hljs-keyword">TYPE</span> <span class="hljs-keyword">NAME</span>)<span class="hljs-comment">&#123;</span><br><span class="hljs-comment">    STATEMENTS</span><br><span class="hljs-comment">&#125;</span><br></code></pre></td></tr></table></figure><h4 id="Return-Values-返回值"><a href="#Return-Values-返回值" class="headerlink" title="Return Values 返回值"></a>Return Values 返回值</h4><p>Example：</p><figure class="highlight csharp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs csharp"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> TYPE <span class="hljs-title">NAME</span>()</span>&#123;<br>    STATEMENTS<br>    <span class="hljs-keyword">return</span> EXPRESSION;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="IF-ELSE语句"><a href="#IF-ELSE语句" class="headerlink" title="IF ELSE语句"></a>IF ELSE语句</h3><p>Example:</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs stylus"><span class="hljs-function"><span class="hljs-title">if</span><span class="hljs-params">(CONDITION)</span></span>&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-built_in">if</span>(CONDITION)&#123;<br>    STATEMENTS<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    STATEMENTS<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="其他运算符"><a href="#其他运算符" class="headerlink" title="其他运算符"></a>其他运算符</h3><h4 id="比较运算符"><a href="#比较运算符" class="headerlink" title="比较运算符"></a>比较运算符</h4><p>x &gt; y  x &lt; y  x &gt;&#x3D; y x &lt;&#x3D; y  x&#x3D;&#x3D; y</p><h4 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h4><p>&amp;&amp; ||</p>]]></content>
    
    
    <categories>
      
      <category>Language Learning</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Maths-Analysis1</title>
    <link href="/2025/02/02/Maths-Analysis1/"/>
    <url>/2025/02/02/Maths-Analysis1/</url>
    
    <content type="html"><![CDATA[<h5 id="好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣"><a href="#好消息：JaneZ开始学习数分了！-坏消息：JaneZ的数分要丸辣" class="headerlink" title="好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣"></a>好消息：JaneZ开始学习数分了！ 坏消息：JaneZ的数分要丸辣</h5><h2 id="Maths-Analysis-1-函数列与一致收敛性"><a href="#Maths-Analysis-1-函数列与一致收敛性" class="headerlink" title="Maths Analysis 1  函数列与一致收敛性"></a>Maths Analysis 1  函数列与一致收敛性</h2><h3 id="首先，给出函数列定义！"><a href="#首先，给出函数列定义！" class="headerlink" title="首先，给出函数列定义！"></a>首先，给出函数列定义！</h3><p><img src="/img/%E5%87%BD%E6%95%B0%E5%88%97%E5%AE%9A%E4%B9%89.png" alt="函数列定义"></p><h4 id="是不是很简单？让我们来看一个例子——经典-x-n"><a href="#是不是很简单？让我们来看一个例子——经典-x-n" class="headerlink" title="是不是很简单？让我们来看一个例子——经典 $x^n$"></a>是不是很简单？让我们来看一个例子——经典 $x^n$</h4><p><img src="/img/%E5%87%BD%E6%95%B0%E5%88%97%E4%BE%8B%E5%AD%90.png" alt="函数列例子"></p><h3 id="接着隆重推出：《一致收敛》"><a href="#接着隆重推出：《一致收敛》" class="headerlink" title="接着隆重推出：《一致收敛》"></a>接着隆重推出：《一致收敛》</h3><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E4%B9%89.png" alt="一致收敛定义"></p><h4 id="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"><a href="#看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白" class="headerlink" title="看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白"></a>看上去有点绕啊？这跟函数列收敛有何区别？（鼠鼠菜菜不明白</h4><h4 id="哦菜菜鼠鼠似乎明白了些什么"><a href="#哦菜菜鼠鼠似乎明白了些什么" class="headerlink" title="哦菜菜鼠鼠似乎明白了些什么"></a>哦菜菜鼠鼠似乎明白了些什么</h4><h3 id="函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）"><a href="#函数列收敛的-epsilon-N语言中，N与-epsilon-和x的取值皆有关，而一致收敛中的N只和-epsilon-有关-（回忆一下连续与一致连续）" class="headerlink" title="函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）"></a>函数列收敛的$\epsilon$-N语言中，N与$\epsilon$和x的取值皆有关，而一致收敛中的N只和$\epsilon$有关 （回忆一下连续与一致连续）</h3><h4 id="接下来从几何上看看一致收敛"><a href="#接下来从几何上看看一致收敛" class="headerlink" title="接下来从几何上看看一致收敛"></a>接下来从几何上看看一致收敛</h4><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%87%A0%E4%BD%95%E6%84%8F%E4%B9%89.png" alt="一致收敛几何意义"></p><h3 id="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"><a href="#将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上" class="headerlink" title="将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上"></a>将收敛自然绕不开柯西收敛准则，Cauchy依然可以推广到函数列一致收敛性上</h3><p><img src="/img/%E6%9F%AF%E8%A5%BF%E6%94%B6%E6%95%9B%E5%87%86%E5%88%99.png" alt="柯西收敛准则"></p><h4 id="证明还是很简单的"><a href="#证明还是很简单的" class="headerlink" title="证明还是很简单的"></a>证明还是很简单的</h4><h3 id="接下来看一个和上确界相关的定理及推论吧"><a href="#接下来看一个和上确界相关的定理及推论吧" class="headerlink" title="接下来看一个和上确界相关的定理及推论吧"></a>接下来看一个和上确界相关的定理及推论吧</h3><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E5%8F%8A%E6%8E%A8%E8%AE%BA.png" alt="一致收敛定理及推论"></p><h4 id="And-An-Example"><a href="#And-An-Example" class="headerlink" title="And An Example~"></a>And An Example~</h4><p><img src="/img/%E4%B8%80%E8%87%B4%E6%94%B6%E6%95%9B%E5%AE%9A%E7%90%86%E4%BE%8B%E5%AD%90.png" alt="一致收敛定理例子"></p><h5 id="JaneZ要做回数分皇帝😎😎😎（口嗨中）"><a href="#JaneZ要做回数分皇帝😎😎😎（口嗨中）" class="headerlink" title="JaneZ要做回数分皇帝😎😎😎（口嗨中）"></a>JaneZ要做回数分皇帝😎😎😎（口嗨中）</h5>]]></content>
    
    
    <categories>
      
      <category>Maths Analysis</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Maths Analysis</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data-Structure2</title>
    <link href="/2025/02/01/Data-Structure2/"/>
    <url>/2025/02/01/Data-Structure2/</url>
    
    <content type="html"><![CDATA[<h5 id="Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）"><a href="#Before-JaneZ非常讨厌LinkList，but-厌即是恋（-过年精神状态真是越来越好了，喝点儿中药吧-）" class="headerlink" title="Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）"></a>Before: JaneZ非常讨厌LinkList，but: 厌即是恋（ 过年精神状态真是越来越好了，喝点儿中药吧 ）</h5><h2 id="Data-Structure-2-链表-LinkList"><a href="#Data-Structure-2-链表-LinkList" class="headerlink" title="Data Structure 2 链表 LinkList"></a>Data Structure 2 链表 LinkList</h2><h3 id="线性链表的链接存储"><a href="#线性链表的链接存储" class="headerlink" title="线性链表的链接存储"></a>线性链表的链接存储</h3><ul><li>链接存储通过让每个结点保存与它有关系的结点的地址来保存结点之间的关系</li><li>线性表的链接存储是指将每个数据元素存放在一个独立的数据存储单元（结点）中</li><li>链表不需要事先准备空间，一般采用动态存储的方法</li></ul><h3 id="单链表"><a href="#单链表" class="headerlink" title="单链表"></a>单链表</h3><ul><li>每个结点存储一个数据元素和一个后继指针<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="单链表"></li><li>为防止忘记处理特殊情况，可以引入一个不存放数据的特殊结点——头结点（一种优化）<br><img src="/img/%E5%B8%A6%E5%A4%B4%E7%BB%93%E7%82%B9%E5%8D%95%E9%93%BE%E8%A1%A8.png" alt="带头结点单链表"></li></ul><h4 id="单链表的定义"><a href="#单链表的定义" class="headerlink" title="单链表的定义"></a>单链表的定义</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">sLinkList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-keyword">struct</span> <span class="hljs-title class_">node</span>&#123;<br>        elemType data;<br>        node *next;<br><br>        <span class="hljs-built_in">node</span>(<span class="hljs-type">const</span> elemType&amp; x , node *n = <span class="hljs-literal">nullptr</span>)&#123;<br>            data = x;<br>            next = n;<br>        &#125;<br>        <span class="hljs-built_in">node</span>():<span class="hljs-built_in">next</span>(<span class="hljs-literal">nullptr</span>)&#123;&#125;<br>        ~<span class="hljs-built_in">node</span>()&#123;&#125;<br>    &#125;;<br>node *head;<br><span class="hljs-type">int</span> currentLength;<br><span class="hljs-function">node *<span class="hljs-title">move</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">sLinkList</span>();<br>    ~<span class="hljs-built_in">sLinkList</span>()&#123;<br>        <span class="hljs-built_in">clear</span>();<br>        <span class="hljs-keyword">delete</span> head;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>&#123;<br>        <span class="hljs-keyword">return</span> currentLength;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType &amp;x)</span><span class="hljs-type">const</span></span>;<br>    <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span></span>;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure><h4 id="单链表的运算实现"><a href="#单链表的运算实现" class="headerlink" title="单链表的运算实现"></a>单链表的运算实现</h4><ul><li>私有成员函数move的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">node</span> *<span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">move</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head;<br>    <span class="hljs-keyword">while</span>( i -- &gt;= <span class="hljs-number">0</span>)&#123;<br>        p = p-&gt;next;<br>    &#125;<br>    <span class="hljs-keyword">return</span> p;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表构造函数<figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">sLinkList</span>()</span>&#123;<br>    head = new node;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表清空函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E6%B8%85%E7%A9%BA.png" alt="单链表清空操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">clear</span>()</span>&#123;<br>    node *p = head-&gt;<span class="hljs-keyword">next</span>;<br>    node *<span class="hljs-keyword">q</span>;<br>    head -&gt; <span class="hljs-keyword">next</span> = nullptr;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        <span class="hljs-keyword">q</span> = p -&gt; <span class="hljs-keyword">next</span>;<br>        <span class="hljs-keyword">delete</span> p;<br>        p = <span class="hljs-keyword">q</span>;<br>    &#125;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表插入删除函数<br><img src="/img/%E5%8D%95%E9%93%BE%E8%A1%A8%E5%88%A0%E9%99%A4.png" alt="单链表删除操作"><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">insert</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span> ,<span class="hljs-title">const</span> <span class="hljs-title">elemType</span> &amp;<span class="hljs-title">x</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = new node(<span class="hljs-keyword">x</span> ,<span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>);<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">remove</span>(<span class="hljs-title">int</span> <span class="hljs-title">i</span>)</span>&#123;<br>    node *<span class="hljs-keyword">pos</span>;<br>    node *delp;<br>    <span class="hljs-keyword">pos</span> = move(i - <span class="hljs-number">1</span>);<br>    delp = <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">pos</span> -&gt; <span class="hljs-keyword">next</span> = delp -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">delete</span> delp;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>单链表search visit traverse函数的实现<figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span> &amp;<span class="hljs-symbol">x</span>) <span class="hljs-symbol">const</span>&#123;<br>    node *p = head -&gt; next;<br>    <span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">while</span>(p != <span class="hljs-literal">null</span>ptr &amp;&amp; p -&gt; data != x)&#123;<br>        p = p -&gt; next;<br>        ++ i;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(p != <span class="hljs-literal">null</span>ptr)&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">sLinkList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>) <span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> move(i) -&gt; data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">void</span> <span class="hljs-title">sLinkList</span>&lt;<span class="hljs-title">elemType</span>&gt;::<span class="hljs-title">traverse</span>() <span class="hljs-title">const</span></span>&#123;<br>    node *p = head -&gt; <span class="hljs-keyword">next</span>;<br>    <span class="hljs-keyword">while</span>(p != nullptr)&#123;<br>        cout &lt;&lt; p -&gt; data &lt;&lt;<span class="hljs-string">&quot; &quot;</span>;<br>        p = p -&gt; <span class="hljs-keyword">next</span>;<br>    &#125;<br>    cout &lt;&lt; endl;<br>&#125;<br></code></pre></td></tr></table></figure></li></ul><h5 id="JaneZ发烧了，各位注意身体啊"><a href="#JaneZ发烧了，各位注意身体啊" class="headerlink" title="JaneZ发烧了，各位注意身体啊!"></a>JaneZ发烧了，各位注意身体啊!</h5>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Data Structure1</title>
    <link href="/2025/01/29/Data-Structure1/"/>
    <url>/2025/01/29/Data-Structure1/</url>
    
    <content type="html"><![CDATA[<h5 id="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！"><a href="#Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS-启动！" class="headerlink" title="Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！"></a>Before：JaneZ决定早点开始DS的学习（虽然可能已经不算早了呜呜呜），所以：DS , 启动！</h5><h2 id="Data-Structure-1-线性表List"><a href="#Data-Structure-1-线性表List" class="headerlink" title="Data Structure 1 线性表List"></a>Data Structure 1 线性表List</h2><h3 id="线性表的定义"><a href="#线性表的定义" class="headerlink" title="线性表的定义"></a>线性表的定义</h3><ul><li>线性结构的定义：所有结点按一对一的邻接关系构成的整体就是线性结构</li><li>线性表是处理线性结构的数据结构</li><li>线性表中数据元素的个数称为线性表的长度</li></ul><h4 id="线性表的基本运算："><a href="#线性表的基本运算：" class="headerlink" title="线性表的基本运算："></a>线性表的基本运算：</h4><ul><li>创建空线性表 create</li><li>删除线性表中所有数据元素 clear</li><li>求长度 length</li><li>插入元素 insert</li><li>删除元素 remove</li><li>搜索元素 search</li><li>返回特定位置元素值 visit</li><li>按序访问每一数据元素 traverse</li></ul><h4 id="线性表的抽象类"><a href="#线性表的抽象类" class="headerlink" title="线性表的抽象类"></a>线性表的抽象类</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">list</span>&#123;<br>    <span class="hljs-keyword">public</span>:<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span> ; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">insert</span> <span class="hljs-params">(<span class="hljs-type">int</span> i , <span class="hljs-type">const</span> elemType &amp;x)</span> </span>= <span class="hljs-number">0</span>; <br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp;x)</span><span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">virtual</span> ~<span class="hljs-built_in">list</span>()&#123;&#125;;<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="线性表的顺序实现"><a href="#线性表的顺序实现" class="headerlink" title="线性表的顺序实现"></a>线性表的顺序实现</h3><ul><li>将线性表的数据元素存储在一块连续的空间里，用存储位置反映数据元素间的关系<br><img src="/img/%E7%BA%BF%E6%80%A7%E8%A1%A8%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84.png" alt="顺序表存储结构"></li></ul><h4 id="顺序表的定义"><a href="#顺序表的定义" class="headerlink" title="顺序表的定义"></a>顺序表的定义</h4><ul><li>从线性表的抽象类list公有派生<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs cpp"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">elemType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">seqList</span>: <span class="hljs-keyword">public</span> list &lt;elemType&gt;&#123;<br><br>    <span class="hljs-keyword">private</span>:<br><br>        elemType *data;<br>        <span class="hljs-type">int</span> currentLength;<br>        <span class="hljs-type">int</span> maxSize;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doubleSpace</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-keyword">public</span>:<br><br>        <span class="hljs-built_in">seqList</span>(<span class="hljs-type">int</span> initSize = <span class="hljs-number">10</span>);<br>        ~<span class="hljs-built_in">seqList</span>();<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">clear</span><span class="hljs-params">()</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">length</span><span class="hljs-params">()</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">insert</span><span class="hljs-params">(<span class="hljs-type">int</span> i,<span class="hljs-type">const</span> elemType&amp; x)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">remove</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">search</span><span class="hljs-params">(<span class="hljs-type">const</span> elemType&amp; x)</span> <span class="hljs-type">const</span></span>;<br>        <span class="hljs-function">elemType <span class="hljs-title">visit</span><span class="hljs-params">(<span class="hljs-type">int</span> i)</span><span class="hljs-type">const</span></span>;<br>        <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">traverse</span><span class="hljs-params">()</span><span class="hljs-type">const</span></span>;<br>&#125;;<br></code></pre></td></tr></table></figure></li></ul><h4 id="顺序表实现"><a href="#顺序表实现" class="headerlink" title="顺序表实现"></a>顺序表实现</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">seqList</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">initsize</span>)&#123;<br>    data = new elemType[initsize];<br>    maxsize = initsize;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight perl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs perl">template&lt;<span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">elemType</span>&gt;</span><br><span class="hljs-class"><span class="hljs-title">seqList</span>&lt;<span class="hljs-title">elemType</span>&gt;::~<span class="hljs-title">seqList</span>()</span>&#123;<br>    <span class="hljs-keyword">delete</span> []data;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">clear</span>()&#123;<br>    currentLength = <span class="hljs-number">0</span>;<br>&#125;<br>(是个伪清除)<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">length</span>()&#123;<br>    <span class="hljs-keyword">return</span> currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">int</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">search</span>(<span class="hljs-symbol">const</span> <span class="hljs-symbol">elemType</span>&amp;<span class="hljs-symbol">x</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-built_in">int</span> i;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>;i &lt; currentLength &amp;&amp; data[i] != x; i ++);<br>    <span class="hljs-keyword">if</span>(i == currentLength)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        <span class="hljs-keyword">return</span> i; <br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">elemType</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">visit</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)<span class="hljs-symbol">const</span>&#123;<br>    <span class="hljs-keyword">return</span> data[i];<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">traverse</span>()<span class="hljs-symbol">const</span>&#123;<br>    cout &lt;&lt; endl;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        cout &lt;&lt; data[i]&lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="单独讨论插入删除函数"><a href="#单独讨论插入删除函数" class="headerlink" title="单独讨论插入删除函数"></a>单独讨论插入删除函数</h4><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">doubleSpace</span>()&#123;<br>    elemType *tmp = data;<br>    maxSize *= <span class="hljs-number">2</span>;<br>    data = new elemType[maxSize];<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> i = <span class="hljs-number">0</span>;i &lt; currentLength; i ++)&#123;<br>        data[i] = tmp[i];<br>    &#125;<br>    delete []tmp;<br>&#125;<br><br>template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">insert</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i,<span class="hljs-symbol">const</span></span> <span class="hljs-symbol">elemType</span>&amp; <span class="hljs-symbol">x</span>)&#123;<br>    <span class="hljs-keyword">if</span>(currentLength == maxSize)&#123;<br>        <span class="hljs-built_in">double</span>Space();<br>    &#125;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = currentLength; j &gt; i ; j --)&#123;<br>        data[j] = data[j - <span class="hljs-number">1</span>];<br>    &#125;<br>    data[i] = x;<br>    ++ currentLength;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight angelscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs angelscript">template&lt;<span class="hljs-keyword">class</span> <span class="hljs-symbol">elemType</span>&gt;<br><span class="hljs-symbol">void</span> <span class="hljs-symbol">seqList</span>&lt;<span class="hljs-symbol">elemType</span>&gt;::<span class="hljs-symbol">remove</span>(<span class="hljs-symbol">int</span> <span class="hljs-symbol">i</span>)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-built_in">int</span> j = i;j &lt; currentLength - <span class="hljs-number">1</span>; j ++)&#123;<br>        data[j] = data[j + <span class="hljs-number">1</span>];<br>    &#125;<br>    -- currentLength;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Data Structure</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Data Structure</tag>
      
      <tag>C++</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Before Everything</title>
    <link href="/2025/01/21/Before-Everything/"/>
    <url>/2025/01/21/Before-Everything/</url>
    
    <content type="html"><![CDATA[<h1 id="Before-Everything-前言"><a href="#Before-Everything-前言" class="headerlink" title="Before Everything 前言"></a>Before Everything 前言</h1><p>JaneZ , 2025.1.21 , M Stand Coffee , Nanjing City<br>Well, hello world ! This is the owner of this crazy blog ! My name is JaneZ , a student from Shanghai Jiaotong University . I major in <strong>Computer Science</strong> of the ACM Class. I ‘m an ENFPer or ENFJer , so I really want to know more people with the same interests.<br><strong>Why I start this blog ?</strong><br>Well , partly motivated by my high school classmate YXY , who major in <strong>Artificial Intelligence</strong> also in SJTU . I think it’s mainly because that after a whole semester learning in the ACM class , I didn’t actually adapt to university life that well .<br>So I hope to be more proactive in my learning through this blog.<br>Let’s get back to Chinese. 原谅JaneZ烂烂的英语<br>我的博客（个人主页）采取的是hexo的fluid主题，主要分享我在日常学习中记录的笔记、学习心得以及一些莫名其妙的话。如果各位对于计算机科学、数学、物理学、人工智能等方面感兴趣，都可以常来玩儿，也欢迎与我私下进行交流（联系方式附在About页面中了）。希望能共同进步！<br>对了，如果有任何关于hexo博客的配置部署问题，都可向我咨询。自己踩过的坑，不希望再有人踩进去了。<br>Any way,let’s get started.我们开始吧<br>Attach a picture of this wonderful coffee shop!<br><img src="/img/MStandCoffee.png" alt="M Stand Coffee"><br>Can’t live without coffee …<br>Upd: 有人去医院复查不出所料寄了，再见咖啡☕暑假手术室见了😢😢😢</p>]]></content>
    
    
    
    <tags>
      
      <tag>JaneZ&#39;s Wonderland</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/01/14/hello-world/"/>
    <url>/2025/01/14/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
